// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <fcntl.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

static long syz_open_dev(volatile long a0, volatile long a1, volatile long a2)
{
  if (a0 == 0xc || a0 == 0xb) {
    char buf[128];
    sprintf(buf, "/dev/%s/%d:%d", a0 == 0xc ? "char" : "block", (uint8_t)a1,
            (uint8_t)a2);
    return open(buf, O_RDWR, 0);
  } else {
    char buf[1024];
    char* hash;
    strncpy(buf, (char*)a0, sizeof(buf) - 1);
    buf[sizeof(buf) - 1] = 0;
    while ((hash = strchr(buf, '#'))) {
      *hash = '0' + (char)(a1 % 10);
      a1 /= 10;
    }
    return open(buf, a2, 0);
  }
}

uint64_t r[4] = {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
                 0xffffffffffffffff};

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  intptr_t res = 0;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x2000c380, "./file0\000", 8);
  syscall(__NR_openat, /*fd=*/0xffffff9c, /*file=*/0x2000c380ul,
          /*flags=O_CREAT*/ 0x40ul, /*mode=*/0ul);
  memcpy((void*)0x200000c0, "/dev/fuse\000", 10);
  res = syscall(__NR_openat, /*fd=*/0xffffffffffffff9cul, /*file=*/0x200000c0ul,
                /*flags=*/0x42ul, /*mode=*/0ul);
  if (res != -1)
    r[0] = res;
  memcpy((void*)0x200020c0, "./file0\000", 8);
  memcpy((void*)0x20002100, "fuse\000", 5);
  memcpy((void*)0x20002140, "fd=", 3);
  sprintf((char*)0x20002143, "0x%016llx", (long long)r[0]);
  memcpy((void*)0x20002155, ",rootmode=00000000000000000100000,user_id=", 42);
  sprintf((char*)0x2000217f, "%020llu", (long long)0);
  memcpy((void*)0x20002193, ",group_id=", 10);
  sprintf((char*)0x2000219d, "%020llu", (long long)0);
  syscall(__NR_mount, /*src=*/0ul, /*dst=*/0x200020c0ul, /*type=*/0x20002100ul,
          /*flags=*/0ul, /*opts=*/0x20002140ul);
  syscall(__NR_read, /*fd=*/r[0], /*buf=*/0x2000ecc0ul, /*len=*/0x2020ul);
  memcpy((void*)0x20000000, "/dev/input/event#\000", 18);
  res = -1;
  res = syz_open_dev(/*dev=*/0x20000000, /*id=*/0, /*flags=*/0);
  if (res != -1)
    r[1] = res;
  syscall(__NR_fcntl, /*fd=*/r[1], /*cmd=*/4ul, /*flags=FASYNC*/ 0x2000ul);
  memcpy((void*)0x20000000, "/dev/input/event#\000", 18);
  res = -1;
  res = syz_open_dev(/*dev=*/0x20000000, /*id=*/0, /*flags=O_WRONLY*/ 1);
  if (res != -1)
    r[2] = res;
  *(uint64_t*)0x20000040 = 0x77359400;
  *(uint64_t*)0x20000048 = 0;
  *(uint16_t*)0x20000050 = 0;
  *(uint16_t*)0x20000052 = 0;
  *(uint32_t*)0x20000054 = 0;
  *(uint64_t*)0x20000058 = 0;
  *(uint64_t*)0x20000060 = 0;
  *(uint16_t*)0x20000068 = 0;
  *(uint16_t*)0x2000006a = 0;
  *(uint32_t*)0x2000006c = 0;
  syscall(__NR_write, /*fd=*/r[2], /*data=*/0x20000040ul, /*len=*/0xfe6ful);
  res = syscall(__NR_socket, /*domain=*/0x10ul, /*type=*/3ul, /*proto=*/0x10);
  if (res != -1)
    r[3] = res;
  syscall(__NR_fcntl, /*fd=*/r[3], /*cmd=*/0x10ul, /*arg=*/0ul);
  return 0;
}
