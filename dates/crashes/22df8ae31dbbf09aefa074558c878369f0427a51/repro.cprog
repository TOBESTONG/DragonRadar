// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

uint64_t r[3] = {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff};

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  intptr_t res = 0;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x20000180, "ext4\000", 5);
  memcpy((void*)0x200000c0, "./file0\000", 8);
  memcpy((void*)0x20000240, "dioread_nolock", 14);
  *(uint8_t*)0x2000024e = 0x2c;
  memcpy((void*)0x2000024f, "user_xattr", 10);
  *(uint8_t*)0x20000259 = 0x2c;
  memcpy((void*)0x2000025a, "debug_want_extra_isize", 22);
  *(uint8_t*)0x20000270 = 0x3d;
  sprintf((char*)0x20000271, "0x%016llx", (long long)0x5c);
  *(uint8_t*)0x20000283 = 0x2c;
  memcpy((void*)0x20000284, "resuid", 6);
  *(uint8_t*)0x2000028a = 0x3d;
  sprintf((char*)0x2000028b, "0x%016llx", (long long)0xee01);
  *(uint8_t*)0x2000029d = 0x2c;
  memcpy((void*)0x2000029e, "noauto_da_alloc", 15);
  *(uint8_t*)0x200002ad = 0x2c;
  memcpy((void*)0x200002ae, "errors=continue", 15);
  *(uint8_t*)0x200002bd = 0x2c;
  memcpy((void*)0x200002be, "usrjquota=", 10);
  *(uint8_t*)0x200002c8 = 0x2c;
  memcpy((void*)0x200002c9, "prjquota", 8);
  *(uint8_t*)0x200002d1 = 0x2c;
  memcpy((void*)0x200002d2, "nodiscard", 9);
  *(uint8_t*)0x200002db = 0x2c;
  *(uint8_t*)0x200002dc = 0;
  memcpy(
      (void*)0x200008c0,
      "\x78\x9c\xec\xdb\xcf\x6f\x14\x55\x1c\x00\xf0\xef\xcc\xb6\xa0\xfc\x6a\x45"
      "\x44\x41\xd0\x2a\x1a\x1b\x7f\xb4\xb4\xa0\x72\xf0\xa2\xd1\xc4\x83\x26\x26"
      "\x7a\xc0\x63\x6d\x0b\x41\x16\x6a\x68\x4d\x84\x34\x5a\x8d\xc1\xa3\x21\xf1"
      "\x6e\x3c\x9a\xf8\x17\x78\xd2\x8b\x51\x4f\x26\x5e\xf5\x6e\x48\x88\x36\x26"
      "\xa0\xa7\x9a\xd9\x9d\x29\xbb\x4b\xb7\xf4\xc7\x2e\x8b\xcc\xe7\x93\x0c\xbc"
      "\xb7\xf3\x76\xdf\xfb\xee\x9b\xb7\xf3\xf6\xbd\x6e\x00\xa5\x35\x94\xfd\x93"
      "\x44\xec\x88\x88\xdf\x22\x62\xa0\x9e\x6d\x2e\x30\x54\xff\xef\xda\xe2\xfc"
      "\xe4\x3f\x8b\xf3\x93\x49\x2c\x2d\xbd\xf9\x67\x52\x2b\x77\x75\x71\x7e\xb2"
      "\x28\x5a\x3c\x6f\x7b\x9e\x19\x4e\x23\xd2\x4f\x93\xbc\x92\x66\xb3\xe7\x2f"
      "\x9c\x9e\xa8\x56\xa7\xcf\xe5\xf9\xd1\xb9\x33\xef\x8d\xce\x9e\xbf\xf0\xcc"
      "\xa9\x33\x13\x27\xa7\x4f\x4e\x9f\x1d\x3f\x76\xec\xe8\x91\xb1\xe7\x9f\x1b"
      "\x7f\xb6\x23\x71\x66\x71\x5d\xdd\xff\xe1\xcc\x81\x7d\xaf\xbe\x7d\xe9\xf5"
      "\xc9\xe3\x97\xde\xf9\xe9\x9b\xac\xbd\x7b\x0f\xd6\xcf\x37\xc6\xd1\x29\x43"
      "\x59\xe0\x7f\x2d\xd5\xb4\x9e\x7b\xbc\xd3\x95\xf5\xd8\xce\x86\x74\xd2\xd7"
      "\xc3\x86\xb0\x2e\x95\x88\xc8\xba\xab\xbf\x36\xfe\x07\xa2\x12\xd7\x3b\x6f"
      "\x20\x5e\xf9\xa4\xa7\x8d\x03\xba\x2a\xbb\x37\x6d\x6d\x7f\x7a\x61\x09\xb8"
      "\x83\x25\xd1\xeb\x16\x00\xbd\x51\xdc\xe8\xb3\xef\xbf\xc5\x71\x8b\xa6\x1e"
      "\xb7\x85\x2b\x2f\xd6\xbf\x00\x65\x71\x5f\xcb\x8f\xfa\x99\xbe\x48\xf3\x32"
      "\xfd\x5d\xac\x7f\x28\x22\x8e\x2f\xfc\xfb\x65\x76\x44\x97\xd6\x21\x00\x00"
      "\x1a\x7d\x97\xcd\x7f\x9e\x5e\x69\xfe\x97\xc6\xde\x86\x72\xbb\xf2\x3d\x94"
      "\xc1\x88\xb8\x27\x22\x76\x47\xc4\xbd\x11\xb1\x27\x22\xee\x8b\xa8\x95\xbd"
      "\x3f\x22\x1e\x58\x67\xfd\xad\x5b\x43\x37\xce\x7f\xd2\xcb\x1b\x0a\x6c\x8d"
      "\xb2\xf9\xdf\x0b\xf9\xde\x56\xf3\xfc\xaf\x98\xfd\xc5\x60\x25\xcf\xed\xac"
      "\xc5\xdf\x9f\x9c\x38\x55\x9d\x3e\x9c\xbf\x27\xc3\xd1\xbf\x35\xcb\x8f\xad"
      "\x52\xc7\xf7\x2f\xff\xfa\x79\xbb\x73\x8d\xf3\xbf\xec\xc8\xea\x2f\xe6\x82"
      "\x79\x3b\x2e\xf7\xb5\x2c\xd0\x4d\x4d\xcc\x4d\x74\x6a\x52\x7a\xe5\xe3\x88"
      "\xfd\x7d\x2b\xc5\x9f\x2c\xef\x04\x24\x11\xb1\x2f\x22\xf6\xaf\xef\xa5\x77"
      "\x15\x89\x53\x4f\x7e\x7d\xa0\x5d\xa1\x9b\xc7\xbf\x8a\x0e\xec\x33\x2d\x7d"
      "\x15\xf1\x44\xbd\xff\x17\xa2\x25\xfe\x42\xb2\xfa\xfe\xe4\xe8\x5d\x51\x9d"
      "\x3e\x3c\x5a\x5c\x15\x37\xfa\xf9\x97\x8b\x6f\xb4\xab\x7f\x53\xf1\x77\x40"
      "\xd6\xff\xdb\x9a\xaf\xff\x96\x12\x03\x7f\x27\x8d\xfb\xb5\xb3\xeb\xaf\xe3"
      "\xe2\xef\x9f\xb5\xfd\x4e\xb3\xd1\xeb\x7f\x4b\xf2\x56\x6d\xcf\x7a\x4b\xfe"
      "\xd8\x07\x13\x73\x73\xe7\xc6\x22\xb6\x24\xaf\xd5\xf2\x4d\x8f\x8f\x5f\x7f"
      "\x6e\x91\x2f\xca\x67\xf1\x0f\x1f\x5a\x79\xfc\xef\xce\x9f\x93\xc5\xff\x60"
      "\x44\x64\x17\xf1\xc1\x88\x78\x28\x22\x1e\xce\xdb\xfe\x48\x44\x3c\x1a\x11"
      "\x87\x56\x89\xff\xc7\x97\x1e\x7b\x77\xe3\xf1\x77\x57\x16\xff\xd4\x8a\x9f"
      "\x7f\xcb\xd7\xff\x60\x73\xff\xaf\x3f\x51\x39\xfd\xc3\xb7\xed\xea\x5f\x5b"
      "\xff\x1f\xad\xa5\x86\xf3\x47\x6a\x9f\x7f\x37\xb1\xd6\x06\x6e\xe6\xbd\x03"
      "\x00\x00\x80\xff\x8b\x34\x22\x76\x44\x92\x8e\x2c\xa7\xd3\x74\x64\xa4\xfe"
      "\x37\xfc\x7b\x62\x5b\x5a\x9d\x99\x9d\x7b\xea\xc4\xcc\xfb\x67\xa7\xea\xbf"
      "\x11\x18\x8c\xfe\xb4\x58\xe9\x1a\x68\x58\x0f\x1d\x4b\x16\xf2\x57\xac\xe7"
      "\xc7\xf3\xb5\xe2\xe2\xfc\x91\x7c\xdd\xf8\x8b\xca\xdd\xb5\xfc\xc8\xe4\x4c"
      "\x75\xaa\xc7\xb1\x43\xd9\x6d\x6f\x33\xfe\x33\x7f\x54\x7a\xdd\x3a\xa0\xeb"
      "\xfc\x5e\x0b\xca\xab\x75\xfc\xa7\x3d\x6a\x07\x70\xeb\xb9\xff\x43\x79\x19"
      "\xff\x50\x5e\xc6\x3f\x94\xd7\x4a\xe3\xff\xa3\x96\xbc\xbd\x00\xb8\x33\xb9"
      "\xff\x43\x79\x19\xff\x50\x5e\xc6\x3f\x94\x97\xf1\x0f\xa5\xb4\x99\xdf\xf5"
      "\x4b\x94\x39\x11\xe9\x6d\xd1\x0c\x89\x2e\x25\x7a\xfd\xc9\x04\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x19\xff\x05\x00\x00\xff\xff\x25\x92"
      "\xee\x9c",
      1082);
  syz_mount_image(
      /*fs=*/0x20000180, /*dir=*/0x200000c0,
      /*flags=MS_I_VERSION|MS_SYNCHRONOUS|MS_NODEV|MS_NOATIME|0x300*/ 0x800714,
      /*opts=*/0x20000240, /*chdir=*/0xfe, /*size=*/0x43a, /*img=*/0x200008c0);
  memcpy((void*)0x20000000, "./bus\000", 6);
  res = syscall(__NR_creat, /*file=*/0x20000000ul, /*mode=*/0ul);
  if (res != -1)
    r[0] = res;
  syscall(__NR_fcntl, /*fd=*/r[0], /*cmd=*/4ul,
          /*flags=O_DIRECT|FASYNC|0x100*/ 0x6100ul);
  memcpy((void*)0x20000180, "./bus\000", 6);
  res = syscall(__NR_open, /*file=*/0x20000180ul,
                /*flags=O_SYNC|O_NOATIME|O_CREAT|FASYNC|O_RDWR*/ 0x143042ul,
                /*mode=*/0ul);
  if (res != -1)
    r[1] = res;
  memcpy((void*)0x20000380, "/dev/loop", 9);
  *(uint8_t*)0x20000389 = 0x30;
  *(uint8_t*)0x2000038a = 0;
  memcpy((void*)0x20000140, "./bus\000", 6);
  syscall(__NR_mount, /*src=*/0x20000380ul, /*dst=*/0x20000140ul, /*type=*/0ul,
          /*flags=MS_BIND*/ 0x1000ul, /*data=*/0ul);
  memcpy((void*)0x20000400, "./bus\000", 6);
  res = syscall(__NR_open, /*file=*/0x20000400ul,
                /*flags=O_SYNC|O_NOCTTY|O_NOATIME|O_RDWR|0x3c*/ 0x14113eul,
                /*mode=*/0ul);
  if (res != -1)
    r[2] = res;
  memcpy((void*)0x200001c0, "#! ", 3);
  *(uint8_t*)0x200001c3 = 0xa;
  syscall(__NR_write, /*fd=*/r[2], /*data=*/0x200001c0ul, /*len=*/0x208e24bul);
  syscall(__NR_ftruncate, /*fd=*/r[1], /*len=*/0x2007ffbul);
  memcpy((void*)0x20000200, "threaded\000", 9);
  syscall(__NR_write, /*fd=*/r[0], /*buf=*/0x20000200ul, /*len=*/0x175d9003ul);
  return 0;
}
