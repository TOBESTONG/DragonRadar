// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x20000040, "ext2\000", 5);
  memcpy((void*)0x200001c0, "./file0\000", 8);
  memcpy((void*)0x20000080, "nobarrier", 9);
  *(uint8_t*)0x20000089 = 0x2c;
  memcpy((void*)0x2000008a, "noblock_validity", 16);
  *(uint8_t*)0x2000009a = 0x2c;
  memcpy((void*)0x2000009b, "discard", 7);
  *(uint8_t*)0x200000a2 = 0x2c;
  memcpy((void*)0x200000a3, "barrier", 7);
  *(uint8_t*)0x200000aa = 0x3d;
  sprintf((char*)0x200000ab, "0x%016llx", (long long)2);
  *(uint8_t*)0x200000bd = 0x2c;
  memcpy((void*)0x200000be, "noinit_itable", 13);
  *(uint8_t*)0x200000cb = 0x2c;
  memcpy((void*)0x200000cc, "resgid", 6);
  *(uint8_t*)0x200000d2 = 0x3d;
  sprintf((char*)0x200000d3, "0x%016llx", (long long)0);
  *(uint8_t*)0x200000e5 = 0x2c;
  memcpy((void*)0x200000e6, "jqfmt=vfsold", 12);
  *(uint8_t*)0x200000f2 = 0x2c;
  memcpy((void*)0x200000f3, "journal_async_commit", 20);
  *(uint8_t*)0x20000107 = 0x2c;
  memcpy((void*)0x20000108, "resgid", 6);
  *(uint8_t*)0x2000010e = 0x3d;
  sprintf((char*)0x2000010f, "0x%016llx", (long long)0);
  *(uint8_t*)0x20000121 = 0x32;
  *(uint8_t*)0x20000122 = 0;
  memcpy(
      (void*)0x20000540,
      "\x78\x9c\xec\xdd\x5f\x6b\x5b\xe7\x19\x00\xf0\xe7\x1c\x5b\x59\xfe\x38\xb3"
      "\xc3\x76\x91\x05\x96\x85\x25\xc3\x0e\x5b\x24\x3b\x5e\x12\x33\x58\xb6\xc1"
      "\xd8\xae\x02\xdb\xb2\xfb\xcc\xb3\x65\x63\x2c\x5b\xc6\x92\x93\xd8\x84\xcd"
      "\x61\x1f\x60\x30\xc6\x36\xd8\x55\xaf\x7a\x53\xe8\x07\x28\x94\x7c\x84\x52"
      "\x08\xb4\xf7\xa5\x2d\x2d\xa5\x4d\xda\x8b\x5e\xb4\x51\xd1\x91\x94\x26\x8e"
      "\x14\x3b\x8d\x2d\xa5\xd6\xef\x07\xc7\xe7\x7d\xcf\x39\xd2\xf3\x3e\x92\xf5"
      "\x1e\xbd\xe7\x1c\x74\x02\xe8\x5b\xa7\x22\xe2\x7c\x44\x3c\xa8\xd5\x6a\x93"
      "\x11\x31\xdc\x5c\x9e\x46\x24\xf5\xf9\x9d\x23\x11\xb1\xd9\xd8\xee\xfe\xbd"
      "\x5b\x33\xf5\x29\x89\x5a\xed\xea\xc7\x49\xb6\x41\xbd\x5e\xdf\x6e\xec\x91"
      "\xe7\x6c\x3e\x24\x0e\x46\xc4\x9f\x7e\x1f\xf1\xd7\xe4\xc9\xb8\x95\xf5\x8d"
      "\xc5\xe9\x52\xa9\xb8\xda\xac\x17\xaa\x4b\x2b\x85\xca\xfa\xc6\xb9\x85\xa5"
      "\xe9\xf9\xe2\x7c\x71\x79\x72\x72\xe2\xe2\xd4\xa5\xa9\x0b\x53\xe3\xbb\x92"
      "\xe7\x50\x44\x5c\xfe\xed\xfb\xff\xf9\xe7\xcb\xbf\xbb\xfc\xfa\xcf\x6e\xbc"
      "\x73\xed\xc3\xb1\xbf\xd5\x9b\xf5\xcb\xe6\xfa\x56\x1e\xbb\xad\x91\x7a\x2e"
      "\x7b\x2d\x5a\x06\x23\x62\x75\x2f\x82\xf5\xc0\x40\x33\x9f\x5c\xaf\x1b\x02"
      "\x00\xc0\x8e\xa4\xcd\xe9\xc7\x11\x71\x36\x86\x63\x20\xfb\x36\x07\x00\x00"
      "\x00\xec\x27\xb5\x5f\x0d\xc5\x17\x49\x44\x0d\x00\x00\x00\xd8\xb7\xd2\xec"
      "\xda\xd8\x24\xcd\x37\xaf\x03\x18\x8a\x34\xcd\xe7\x1b\xd7\xf0\x7e\x3f\x0e"
      "\xa7\xa5\x72\xa5\xfa\xd3\xb9\xf2\xda\xf2\x6c\xe3\x1a\xda\x91\xc8\xa5\x73"
      "\x0b\xa5\xe2\x78\xf3\x5a\xe1\x91\xc8\x25\xf5\xfa\x44\x56\xfe\xba\x7e\x7e"
      "\x4b\x7d\x32\x22\x8e\x45\xc4\xbf\x87\x0f\x65\xf5\xfc\x4c\xb9\x34\xdb\xeb"
      "\x83\x1f\x00\x00\x00\xd0\x27\x8e\x6c\x19\xff\x7f\x36\xdc\x18\xff\x03\x00"
      "\x00\x00\xfb\xcc\x48\xaf\x1b\x00\x00\x00\x00\xec\x39\xe3\x7f\x00\x00\x00"
      "\xd8\xff\x8c\xff\x01\x00\x00\x60\x5f\xfb\xc3\x95\x2b\xf5\xa9\xd6\xba\xff"
      "\xf5\xec\xf5\xf5\xb5\xc5\xf2\xf5\x73\xb3\xc5\xca\x62\x7e\x69\x6d\x26\x3f"
      "\x53\x5e\x5d\xc9\xcf\x97\xcb\xf3\xd9\x6f\xf6\x2d\x6d\xf7\x7c\xa5\x72\x79"
      "\xe5\xe7\xb1\xbc\x76\xb3\x50\x2d\x56\xaa\x85\xca\xfa\xc6\xb5\xa5\xf2\xda"
      "\x72\xf5\xda\xc2\x63\xb7\xc0\x06\x00\x00\x00\xba\xe8\xd8\x8f\xee\xbc\x9d"
      "\x44\xc4\xe6\x2f\x0e\x65\x53\xdd\x81\x5e\x37\x0a\xe8\x8a\xc1\x67\xd9\xf8"
      "\xbd\xbd\x6b\x07\xd0\x7d\x03\xbd\x6e\x00\xd0\x33\xcf\xb4\xff\x07\xf6\x95"
      "\x5c\xaf\x1b\x00\xf4\x5c\xb2\xcd\xfa\x36\x17\xef\xb8\x7d\x27\x00\x00\x7c"
      "\xcb\x8c\xfe\xa0\xfd\xf9\xff\x64\xdb\x63\x83\x9b\x69\x97\x9a\x08\xec\x11"
      "\xc7\xff\xa0\x7f\x39\xff\x0f\xfd\xcb\xf9\x7f\xe8\x5f\xb9\x18\x08\x03\x79"
      "\xe8\x6f\xdf\xe0\xfc\x7f\xc3\x1b\x3b\x8d\x50\xab\x3d\x53\x83\x00\x00\x80"
      "\x5d\x37\x94\x4d\x49\x9a\x8f\xc8\x8e\x03\x0c\x45\x9a\xe6\xf3\x11\x47\xb3"
      "\xdb\x02\xe4\x92\xb9\x85\x52\x71\x3c\x22\xbe\x1b\x11\x6f\x0d\xe7\xbe\x53"
      "\xaf\x4f\x64\x8f\x4c\xb6\x1d\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\xb5\x5a\x12\x35\x00\x00\x00"
      "\x60\x5f\x8b\x48\x3f\x48\x9a\xf7\xff\x1a\x1d\x3e\x33\xb4\xf5\xf8\xc0\x81"
      "\xe4\xf3\xe1\x6c\x1e\x11\x37\xfe\x7f\xf5\xbf\x37\xa7\xab\xd5\xd5\x89\xfa"
      "\xf2\x4f\x1e\x2e\xaf\xfe\xaf\xb9\xfc\x7c\x2f\x8e\x60\x00\x00\x00\x00\x5b"
      "\xb5\xc6\xe9\xad\x71\x3c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\xec\xa6\xfb\xf7\x6e\xcd\xb4\xa6\x6e\xc6\xfd"
      "\xe8\x37\x11\x31\xd2\x2e\xfe\x60\x1c\xcc\xe6\x07\x23\x17\x11\x87\x3f\x4d"
      "\x62\xf0\x91\xc7\x25\x11\x31\xb0\x0b\xf1\x37\x6f\x47\xc4\xf1\x76\xf1\x93"
      "\x7a\xb3\x62\xa4\xd9\x8a\x76\xf1\x0f\xf5\x30\x7e\x1a\x11\x47\x76\x21\x3e"
      "\xf4\xb3\x3b\xf5\xfe\xe7\xd7\xed\x3e\x7f\x69\x9c\xca\xe6\xed\x3f\x7f\x17"
      "\xb3\x1e\xea\xf9\x75\xee\xff\xd2\x87\xfd\xdf\x40\x87\xfe\xe7\xe8\x0e\x63"
      "\x9c\xb8\xfb\x6a\xa1\x63\xfc\xdb\x11\x27\x06\xdb\xf7\x3f\xad\xf8\x49\x87"
      "\xf8\xa7\x77\x18\xff\x2f\x7f\xde\xd8\xe8\xb4\xae\xf6\x52\xc4\x68\xdb\xfd"
      "\x4f\xf2\x58\xac\x42\x75\x69\xa5\x50\x59\xdf\x38\xb7\xb0\x34\x3d\x5f\x9c"
      "\x2f\x2e\x4f\x4e\x4e\x5c\x9c\xba\x34\x75\x61\x6a\xbc\x30\xb7\x50\x2a\x36"
      "\xff\xb6\x8d\xf1\xaf\x1f\xbe\xf6\xe0\x69\xf9\x1f\xee\x10\x7f\x64\x9b\xfc"
      "\xcf\xec\x30\xff\x2f\xef\xde\xbc\xf7\xbd\x46\x31\xd7\x2e\xfe\xd8\xe9\xf6"
      "\xef\xff\xf1\x0e\xf1\xd3\xe6\xbe\xef\x27\xcd\x72\x7d\xfd\x68\xab\xbc\xd9"
      "\x28\x3f\xea\xe4\x2b\x6f\x9e\x7c\x5a\xfe\xb3\x1d\xf2\xdf\xee\xfd\x1f\xdb"
      "\x61\xfe\x67\xff\xf8\x8f\x77\xb3\xc2\x6e\xec\xb0\x01\x80\xe7\x56\x59\xdf"
      "\x58\x9c\x2e\x95\x8a\xab\x7d\x5d\x78\xae\x57\xa3\xfe\xb5\xe8\x85\xc8\xe2"
      "\x85\x29\xa4\x2f\x46\x33\xb6\x2f\xfc\xbd\x9b\x41\xeb\xff\x60\xbd\x4f\x79"
      "\xc7\x85\x9e\x76\x4b\x00\x00\xc0\x1e\x78\x72\x0c\x0c\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x74\x5b\x37\x7f\x5d\xaf\x65\xb3"
      "\x37\xa9\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x3c\xd5\x57\x01\x00\x00\xff\xff\xba\x3c\xd2"
      "\xa0",
      1243);
  syz_mount_image(
      /*fs=*/0x20000040, /*dir=*/0x200001c0,
      /*flags=MS_POSIXACL|MS_REC|MS_SYNCHRONOUS|MS_SILENT|MS_NOSUID|0x904*/
      0x1c916, /*opts=*/0x20000080, /*chdir=*/0x1b, /*size=*/0x4db,
      /*img=*/0x20000540);
  return 0;
}
