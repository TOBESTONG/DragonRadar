// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_fsconfig
#define __NR_fsconfig 431
#endif
#ifndef __NR_fspick
#define __NR_fspick 433
#endif
#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

uint64_t r[1] = {0xffffffffffffffff};

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  intptr_t res = 0;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x20000040, "ext4\000", 5);
  memcpy((void*)0x20000500, "./file0\000", 8);
  memcpy((void*)0x20000140, "nobarrier", 9);
  *(uint8_t*)0x20000149 = 0x2c;
  memcpy((void*)0x2000014a, "noblock_validity", 16);
  *(uint8_t*)0x2000015a = 0x2c;
  memcpy((void*)0x2000015b, "discard", 7);
  *(uint8_t*)0x20000162 = 0x2c;
  memcpy((void*)0x20000163, "grpid", 5);
  *(uint8_t*)0x20000168 = 0x2c;
  memcpy((void*)0x20000169, "noinit_itable", 13);
  *(uint8_t*)0x20000176 = 0x2c;
  memcpy((void*)0x20000177, "max_dir_size_kb", 15);
  *(uint8_t*)0x20000186 = 0x3d;
  sprintf((char*)0x20000187, "0x%016llx", (long long)6);
  *(uint8_t*)0x20000199 = 0x2c;
  memcpy((void*)0x2000019a, "jqfmt=vfsold", 12);
  *(uint8_t*)0x200001a6 = 0x2c;
  memcpy((void*)0x200001a7, "resgid", 6);
  *(uint8_t*)0x200001ad = 0x3d;
  sprintf((char*)0x200001ae, "0x%016llx", (long long)0xee01);
  *(uint8_t*)0x200001c0 = 0x2c;
  memcpy((void*)0x200001c1, "resgid", 6);
  *(uint8_t*)0x200001c7 = 0x3d;
  sprintf((char*)0x200001c8, "0x%016llx", (long long)0);
  *(uint8_t*)0x200001da = 0x32;
  *(uint8_t*)0x200001db = 0;
  memcpy(
      (void*)0x20000540,
      "\x78\x9c\xec\xdd\xdf\x6b\x5b\xd7\x1d\x00\xf0\xef\xbd\xb6\xb2\xfc\x70\x66"
      "\x67\xdb\x43\x16\x58\x16\x96\x0c\x3b\x6c\x91\xec\x78\x49\xcc\x1e\xb2\x0d"
      "\xc6\xf6\x14\xd8\x96\xbd\x67\x9e\x2d\x1b\x63\xd9\x32\x96\x9c\xc4\x26\x6c"
      "\x0e\xfb\x03\x06\x63\x6c\x85\x3e\xf5\xa9\x2f\x85\xfe\x01\x85\x92\x3f\xa1"
      "\x14\x02\xed\x7b\x69\x4b\x4b\x69\x93\xf6\xa1\xd0\x36\x2a\xfa\x95\x3a\x8e"
      "\x64\x2b\xc4\x96\x82\xfc\xf9\xc0\xb5\xce\xbd\x3a\xd2\xf7\x7c\x25\x74\xa4"
      "\x73\xee\xb1\x14\xc0\x81\x75\x26\x22\x2e\x46\xc4\xa3\x4a\xa5\x72\x3e\x22"
      "\x86\x1b\xc7\xd3\xc6\x76\xef\x58\x44\x6c\xd6\xeb\x3d\x7c\x70\x67\xa6\xba"
      "\x25\x51\xa9\x5c\xff\x34\x89\xa4\x71\xac\x5a\x7f\x6c\xcb\x7d\x36\x6e\x12"
      "\x87\x23\xe2\x2f\x7f\x8c\xf8\x7b\xf2\x74\xdc\xd2\xfa\xc6\xe2\x74\xa1\x90"
      "\x5f\x6d\xec\xe7\xca\x4b\x2b\xb9\xd2\xfa\xc6\x85\x85\xa5\xe9\xf9\xfc\x7c"
      "\x7e\x79\x72\x72\xe2\xf2\xd4\x95\xa9\x4b\x53\xe3\x7b\x92\xe7\x50\x44\x5c"
      "\xfd\xfd\x87\xff\xfb\xf7\xab\x7f\xb8\xfa\xe6\x2f\x6f\xbd\x77\xe3\xe3\xb1"
      "\x7f\x24\x8d\xe3\xb1\x25\x8f\xbd\x56\x4f\x3d\x53\x7b\x2c\x9a\x06\x23\x62"
      "\x75\x3f\x82\xf5\xc0\x40\x23\x9f\x4c\xaf\x1b\x02\x00\x40\x47\x9a\x9f\xf3"
      "\x7f\x16\x11\xe7\x63\x38\x06\x6a\x9f\xe6\x00\x00\x00\x80\x7e\x52\xf9\xcd"
      "\x50\x7c\x9d\x44\x54\x00\x00\x00\x80\xbe\x95\xd6\xd6\xc0\x26\x69\xb6\xb1"
      "\x0e\x60\x28\xd2\x34\x9b\xad\xaf\xe1\xfd\x51\x1c\x4d\x0b\xc5\x52\xf9\x17"
      "\x73\xc5\xb5\xe5\xd9\xfa\x5a\xd9\x91\xc8\xa4\x73\x0b\x85\xfc\x78\x63\xad"
      "\xf0\x48\x64\x92\xea\xfe\x44\xad\xfc\xdd\xfe\xc5\x6d\xfb\x93\x11\x71\x22"
      "\x22\xfe\x3b\x7c\xa4\xb6\x9f\x9d\x29\x16\x66\x7b\x3d\xf9\x01\x00\x00\x00"
      "\x07\xc4\xb1\x6d\xe3\xff\x2f\x86\xeb\xe3\x7f\x00\x00\x00\xa0\xcf\x8c\xf4"
      "\xba\x01\x00\x00\x00\xc0\xbe\x33\xfe\x07\x00\x00\x80\xfe\x67\xfc\x0f\x00"
      "\x00\x00\x7d\xed\x4f\xd7\xae\x55\xb7\x4a\xf3\xf7\xaf\x67\x6f\xae\xaf\x2d"
      "\x16\x6f\x5e\x98\xcd\x97\x16\xb3\x4b\x6b\x33\xd9\x99\xe2\xea\x4a\x76\xbe"
      "\x58\x9c\xaf\x7d\x67\xdf\xd2\x6e\xf7\x57\x28\x16\x57\x7e\x15\xcb\x6b\xb7"
      "\x73\xe5\x7c\xa9\x9c\x2b\xad\x6f\xdc\x58\x2a\xae\x2d\x97\x6f\x2c\x3c\xf1"
      "\x13\xd8\x00\x00\x00\x40\x17\x9d\xf8\xe9\xbd\x77\x93\x88\xd8\xfc\xf5\x91"
      "\xda\x56\x75\xa8\xd7\x8d\x02\xba\x62\xf0\x59\x2a\x7f\xb0\x7f\xed\x00\xba"
      "\x6f\xa0\x93\x4a\xd6\x07\x42\x5f\x7a\xa6\xf7\x7f\xa0\xaf\x64\x7a\xdd\x00"
      "\xa0\xe7\x92\x5d\xae\x6f\xbb\x78\xe7\xad\xbd\x6f\x0b\x00\x00\xb0\x3f\x46"
      "\x7f\xdc\xfa\xfc\x7f\xb2\xeb\xdc\xc0\x66\xda\xa5\x26\x02\xfb\xc4\xfc\x1f"
      "\x1c\x5c\x1d\x9d\xff\x07\xfa\x52\x47\xe7\xff\x7f\xf0\xd5\xfe\x37\x04\xe8"
      "\xba\x4c\x0c\x84\x81\x3c\x1c\x68\x8f\x2a\x75\x6d\x2b\x3c\xff\xf9\xff\x1d"
      "\xee\x1c\x00\x00\xe8\x8a\xa1\xda\x96\xa4\xd9\x88\xda\x3c\xc0\x50\xa4\x69"
      "\x36\x1b\x71\xbc\xf6\x6f\x7f\x99\x64\x6e\xa1\x90\x1f\x8f\x88\xef\x47\xc4"
      "\x3b\xc3\x99\xef\x55\xf7\x27\x6a\xb7\x4c\x76\x5d\x33\x0c\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x55\x2a"
      "\x49\x54\x00\x00\x00\x80\xbe\x16\x91\x7e\x94\x34\x7e\xef\x7f\x74\xf8\xdc"
      "\xd0\xf6\xf9\x81\x43\xc9\x97\xc3\xb5\xcb\x88\xb8\xf5\xf2\xf5\xff\xdf\x9e"
      "\x2e\x97\x57\x27\xaa\xc7\x3f\x7b\x7c\xbc\xfc\x52\xe3\xf8\xc5\x5e\xcc\x60"
      "\x00\x00\x00\x00\xdb\x35\xc7\xe9\xcd\x71\x3c\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\xa5\x87\x0f\xee\xcc"
      "\x34\xb7\x6e\xc6\xfd\xe4\x77\x11\x31\xd2\x2a\xfe\x60\x1c\xae\x5d\x1e\x8e"
      "\x4c\x44\x1c\xfd\x3c\x89\xc1\x2d\xb7\x4b\x22\x62\x60\x0f\xe2\x6f\xde\x8d"
      "\x88\x93\xad\xe2\x27\xd5\x66\xc5\x48\xa3\x15\xad\xe2\x1f\xe9\x61\xfc\x34"
      "\x22\x8e\xed\x41\x7c\x38\xc8\xee\x55\xfb\x9f\xdf\xb6\x7a\xfd\xa5\x71\xa6"
      "\x76\xd9\xfa\xf5\x77\xb9\xd6\x43\x3d\xbf\xf6\xfd\x5f\xfa\xb8\xff\x1b\x68"
      "\xd3\xff\x1c\xef\x30\xc6\xa9\xfb\xaf\xe7\xda\xc6\xbf\x1b\x71\x6a\xb0\x75"
      "\xff\xd3\x8c\x9f\xb4\x89\x7f\xb6\xc3\xf8\x7f\xfb\xeb\xc6\x46\xbb\xeb\x2a"
      "\xaf\x44\x8c\xb6\x7c\xff\x49\x9e\x88\x95\x2b\x2f\xad\xe4\x4a\xeb\x1b\x17"
      "\x16\x96\xa6\xe7\xf3\xf3\xf9\xe5\xc9\xc9\x89\xcb\x53\x57\xa6\x2e\x4d\x8d"
      "\xe7\xe6\x16\x0a\xf9\xc6\xdf\x96\x31\xfe\xf3\x93\x37\x1e\xed\x94\xff\xd1"
      "\x36\xf1\x47\x76\xc9\xff\x5c\x87\xf9\x7f\x73\xff\xf6\x83\x1f\xd6\x8b\x99"
      "\x56\xf1\xc7\xce\xb6\x7e\xfe\x4f\xb6\x89\x9f\x36\xde\xfb\x7e\xde\x28\x57"
      "\xaf\x1f\x6d\x96\x37\xeb\xe5\xad\x4e\xbf\xf6\xf6\xe9\x9d\xf2\x9f\x6d\x93"
      "\xff\x6e\xcf\xff\x58\x87\xf9\x9f\xff\xf3\xbf\xde\xef\xb0\x2a\x00\xd0\x05"
      "\xa5\xf5\x8d\xc5\xe9\x42\x21\xbf\x7a\xa0\x0b\xcf\xf5\x68\x54\x3f\x16\xbd"
      "\x10\x59\x28\x3c\x6b\xe1\x9f\x2f\x46\x33\x5e\xc8\x42\x6f\xfb\x25\x00\x00"
      "\x60\xef\x3d\x3d\x06\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\xba\xad\x9b\xdf\xae\xd7\xb4\xd9\x9b\x54\x01\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x76\xf4\x6d\x00\x00\x00\xff\xff\x93\xef\xdd\xfe",
      1236);
  syz_mount_image(
      /*fs=*/0x20000040, /*dir=*/0x20000500,
      /*flags=MS_POSIXACL|MS_REC|MS_SYNCHRONOUS|MS_SILENT|MS_NOSUID|0x904*/
      0x1c916, /*opts=*/0x20000140, /*chdir=*/0x1b, /*size=*/0x4d4,
      /*img=*/0x20000540);
  memcpy((void*)0x20000000, ".\000", 2);
  res = syscall(__NR_fspick, /*dfd=*/0xffffff9c, /*path=*/0x20000000ul,
                /*flags=*/0ul);
  if (res != -1)
    r[0] = res;
  memcpy((void*)0x20000080, "ro\000", 3);
  syscall(__NR_fsconfig, /*fd=*/r[0], /*cmd=*/0ul, /*key=*/0x20000080ul,
          /*value=*/0ul, /*aux=*/0ul);
  syscall(__NR_fsconfig, /*fd=*/r[0], /*cmd=*/7ul, /*key=*/0ul, /*value=*/0ul,
          /*aux=*/0ul);
  syscall(__NR_fsconfig, /*fd=*/r[0], /*cmd=*/7ul, /*key=*/0ul, /*value=*/0ul,
          /*aux=*/0ul);
  return 0;
}
