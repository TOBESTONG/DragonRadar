// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif
#ifndef __NR_renameat2
#define __NR_renameat2 316
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

uint64_t r[1] = {0xffffffffffffffff};

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  intptr_t res = 0;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x200004c0, "ext4\000", 5);
  memcpy((void*)0x20000040, "./file0\000", 8);
  memcpy((void*)0x200000c0, "quota", 5);
  *(uint8_t*)0x200000c5 = 0x2c;
  memcpy((void*)0x200000c6, "jqfmt=vfsv0", 11);
  *(uint8_t*)0x200000d1 = 0x2c;
  memcpy((void*)0x200000d2, "nouid32", 7);
  *(uint8_t*)0x200000d9 = 0x2c;
  *(uint8_t*)0x200000da = 0;
  memcpy(
      (void*)0x20000540,
      "\x78\x9c\xec\xdd\xc1\x4f\x5c\x5b\x19\x00\xf0\xef\x5e\xa0\x50\x1e\xef\x41"
      "\x63\x17\x6a\xd4\xd6\x5a\xad\xa6\xe9\x0c\x4c\x5b\xd2\x74\x55\x37\x1a\xd3"
      "\x34\x31\x36\xae\x5c\xb4\x08\x53\x42\x98\x61\x08\x33\xd4\x82\x5d\xd0\xff"
      "\xc1\xc4\x26\xae\xf4\x4f\x70\x61\xe2\xc2\xa4\x2b\xf7\xee\x74\xe7\xa6\x2e"
      "\x4c\xaa\x36\x9a\x62\xe2\x62\xcc\xbd\x33\x50\xa0\x0c\xd0\xd7\xc2\x24\xdc"
      "\xdf\x2f\x39\xb9\xf7\xdc\x33\x9d\xef\x9c\x4e\xee\x39\xc3\x37\x30\x27\x80"
      "\xc2\xba\x18\x11\x1b\x11\x71\x26\x22\x1e\x46\xc4\x78\xf7\x7a\xd2\x2d\x71"
      "\xa7\x53\xb2\xc7\xbd\x79\xfd\x74\x76\xf3\xf5\xd3\xd9\x24\xda\xed\xfb\xff"
      "\x4c\xf2\xf6\xec\x5a\xec\xf8\x37\x99\x4f\xba\xcf\x39\x12\x11\x3f\xfa\x7e"
      "\xc4\x4f\x93\x77\xe3\x36\xd7\xd6\x17\x67\x6a\xb5\xea\x4a\xb7\x5e\x6e\xd5"
      "\x97\xcb\xcd\xb5\xf5\x6b\x0b\xf5\x99\xf9\xea\x7c\x75\xa9\x52\x99\x9e\x9a"
      "\x9e\xbc\x75\xfd\x66\xe5\xa3\x8d\xf5\x42\xfd\xb7\xaf\xbe\xb7\x70\xf7\xc7"
      "\x7f\xf8\xfd\x57\x5f\xfe\x69\xe3\x3b\x3f\xcf\xba\x35\xd6\x6d\xdb\x39\x8e"
      "\x8f\xa9\x33\xf4\xa1\xed\x38\x99\xc1\x88\xb8\x7b\x1c\xc1\xfa\x60\xa0\x3b"
      "\x9e\x33\xfd\xee\x08\x9f\x4b\x1a\x11\xa5\x88\xb8\x94\xdf\xff\xe3\x31\x90"
      "\xbf\x9a\x00\xc0\x69\xd6\x6e\x8f\x47\x7b\x7c\x67\x1d\x00\x38\xed\xd2\x3c"
      "\x07\x96\xa4\xa5\x6e\x2e\x60\x2c\xd2\xb4\x54\xea\xe4\xf0\xce\xc7\x68\x5a"
      "\x6b\x34\x5b\x57\x1f\x35\x56\x97\xe6\x3a\xb9\xb2\x89\x18\x4a\x1f\x2d\xd4"
      "\xaa\x93\xdd\x5c\xe1\x44\x0c\x25\x59\x7d\x2a\x3f\x7f\x5b\xaf\xec\xa9\x5f"
      "\x8f\x88\x73\x11\xf1\x8b\xe1\xb3\x79\xbd\x34\xdb\xa8\xcd\xf5\xf3\x8d\x0f"
      "\x00\x14\xd8\x27\x7b\xd6\xff\xff\x0c\x77\xd6\x7f\x00\xe0\x94\x1b\xe9\x77"
      "\x07\x00\x80\x13\x67\xfd\x07\x80\xe2\xb1\xfe\x03\x40\xf1\x58\xff\x01\xa0"
      "\x78\xac\xff\x00\x50\x3c\xd6\x7f\x00\x28\x1e\xeb\x3f\x00\x14\xca\x0f\xef"
      "\xdd\xcb\x4a\x7b\xb3\xfb\xfd\xd7\x73\x8f\xd7\x56\x17\x1b\x8f\xaf\xcd\x55"
      "\x9b\x8b\xa5\xfa\xea\x6c\x69\xb6\xb1\xb2\x5c\x9a\x6f\x34\xe6\xf3\xef\xec"
      "\xa9\x1f\xf6\x7c\xb5\x46\x63\x79\xea\x46\xac\x3e\x29\xb7\xaa\xcd\x56\xb9"
      "\xb9\xb6\xfe\xa0\xde\x58\x5d\x6a\x3d\xc8\xbf\xd7\xfb\x41\x75\xe8\x44\x46"
      "\x05\x00\x1c\xe4\xdc\x85\x17\x7f\x49\x22\x62\xe3\xf6\xd9\xbc\xc4\x8e\xbd"
      "\x1c\xac\xd5\x70\xba\xa5\xfd\xee\x00\xd0\x37\x03\xfd\xee\x00\xd0\x37\x76"
      "\xfb\x82\xe2\xf2\x33\x3e\xb0\xcf\x16\xbd\xbb\xec\xf8\x15\xa1\xb3\xbb\x1a"
      "\x9e\x1f\x4f\x7f\x80\xe3\x77\xe5\x4b\xf2\xff\x50\x54\xf2\xff\x50\x5c\xf2"
      "\xff\x50\x5c\xf2\xff\x50\x5c\xed\x76\x62\xcf\x7f\x00\x28\x18\x39\x7e\xe0"
      "\x3d\x3e\xff\xdf\xcd\xe7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\xd8\x58\x5e\x92"
      "\xb4\xd4\xdd\x0b\x7c\x2c\xd2\xb4\x54\x8a\xf8\x34\x22\x26\x62\x28\x79\xb4"
      "\x50\xab\x4e\x46\xc4\x67\x11\xf1\xe7\xe1\xa1\xe1\xac\x3e\xd5\xef\x4e\x03"
      "\x00\x1f\x28\xfd\x7b\xd2\xdd\xff\xeb\xca\xf8\xe5\xb1\xbd\xad\x67\x92\xff"
      "\x0e\xe7\xc7\x88\xf8\xd9\xaf\xee\xff\xf2\xc9\x4c\xab\xb5\x32\x95\x5d\xff"
      "\xd7\xf6\xf5\xd6\xf3\xee\xf5\x4a\x3f\xfa\x0f\x00\x1c\x66\x6b\x9d\xde\x5a"
      "\xc7\xb7\xbc\x79\xfd\x74\x76\xab\x9c\x64\x7f\x5e\x7d\xb7\xb3\xb9\x68\x16"
      "\x77\xb3\x5b\x3a\x2d\x83\x31\x98\x1f\x47\x62\x28\x22\x46\xff\x9d\x74\xeb"
      "\x1d\xd9\xfb\x95\x81\x8f\x10\x7f\xe3\x59\x44\x7c\x71\xbf\xf1\x27\x79\x6e"
      "\x64\xa2\xbb\xf3\xe9\xde\xf8\x59\xec\x4f\x4f\x34\x7e\xba\x2b\x7e\x9a\xb7"
      "\x75\x8e\xd9\xff\xc5\x17\xde\x3f\x74\xcf\x2d\x5d\xa1\x28\x5e\x64\xf3\xcf"
      "\x9d\xfd\xee\xbf\x34\x2e\xe6\xc7\xfd\xef\xff\x91\x7c\x86\xfa\x70\x5b\xf3"
      "\xdf\xe6\x3b\xf3\x5f\xba\x3d\xff\x0d\xf4\x98\xff\x2e\x1e\x35\xc6\x8d\x3f"
      "\xfe\xa0\x67\xdb\xb3\x88\x2f\x0f\xee\x17\x3f\xd9\x8e\x9f\xf4\x88\x7f\xf9"
      "\x88\xf1\xff\xfa\x95\xaf\x5d\xea\xd5\xd6\xfe\x75\xc4\x95\xd8\x3f\xfe\xce"
      "\x58\xe5\x56\x7d\xb9\xdc\x5c\x5b\xbf\xb6\x50\x9f\x99\xaf\xce\x57\x97\x2a"
      "\x95\xe9\xa9\xe9\xc9\x5b\xd7\x6f\x56\xca\x79\x8e\xba\xbc\x95\xa9\x7e\xd7"
      "\x3f\x6e\x5f\xfd\xec\xa0\xf1\x8f\xf6\x88\x3f\x72\xc8\xf8\xbf\x79\xc4\xf1"
      "\xff\xe6\x7f\x0f\x7f\xf2\xf5\x03\xe2\x7f\xfb\x1b\xfb\xbf\xfe\xe7\x0f\x88"
      "\x9f\xad\x89\xdf\x3a\x62\xfc\x99\xd1\xdf\xf5\x9c\xeb\xb3\xf8\x73\x3d\xc6"
      "\x7f\xd8\xeb\x7f\xf5\x88\xf1\x5f\xfe\x6d\x7d\xee\x88\x0f\x05\x00\x4e\x40"
      "\x73\x6d\x7d\x71\xa6\x56\xab\xae\x38\x71\xe2\xc4\xc9\xf6\x49\xbf\x67\x26"
      "\xe0\xb8\xbd\xbd\xe9\xfb\xdd\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\xa0\x97\x93\xf8\x73\xa2\x7e\x8f\x11\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xd3\xeb"
      "\xff\x01\x00\x00\xff\xff\x68\x36\xd9\x6e",
      1198);
  syz_mount_image(/*fs=*/0x200004c0, /*dir=*/0x20000040, /*flags=*/0,
                  /*opts=*/0x200000c0, /*chdir=*/1, /*size=*/0x4ae,
                  /*img=*/0x20000540);
  memcpy((void*)0x20000040, "./file0\000", 8);
  memcpy((void*)0x20000080, "trusted.overlay.upper\000", 22);
  syscall(__NR_lsetxattr, /*path=*/0x20000040ul, /*name=*/0x20000080ul,
          /*val=*/0x20000b40ul, /*size=*/0x701ul, /*flags=*/0ul);
  memcpy((void*)0x20000040, "./file0\000", 8);
  syscall(__NR_chdir, /*dir=*/0x20000040ul);
  memcpy((void*)0x20000640, ".\000", 2);
  res = syscall(__NR_openat, /*fd=*/0xffffff9c, /*file=*/0x20000640ul,
                /*flags=*/0ul, /*mode=*/0ul);
  if (res != -1)
    r[0] = res;
  memcpy((void*)0x20000000, "./file0\000", 8);
  memcpy((void*)0x20000200, "./bus\000", 6);
  syscall(__NR_renameat2, /*oldfd=*/r[0], /*old=*/0x20000000ul, /*newfd=*/r[0],
          /*new=*/0x20000200ul, /*flags=*/0ul);
  return 0;
}
