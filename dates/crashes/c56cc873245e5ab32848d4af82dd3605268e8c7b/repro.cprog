// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x200004c0, "ext4\000", 5);
  memcpy((void*)0x20000500, "./file0\000", 8);
  *(uint8_t*)0x20000240 = 0;
  memcpy(
      (void*)0x20000540,
      "\x78\x9c\xec\xdd\xcf\x6f\x54\x5b\x1d\x00\xf0\xef\xbd\x6d\x69\x29\x85\x16"
      "\x25\xf1\x47\x54\x10\x51\x34\x84\x99\x76\x80\x86\xb0\xc2\x8d\xc6\x10\x12"
      "\x23\x71\xe5\x02\x6a\x3b\x34\x4d\x67\x3a\x4d\x67\x8a\xb4\xb2\x28\xff\x83"
      "\x89\x24\xae\xf4\x4f\x70\x61\xe2\xc2\x84\x95\x7b\x77\xba\x73\x83\x0b\x13"
      "\x54\xe2\x0b\x7d\xc9\x5b\xcc\xcb\x9d\x99\x96\x52\x3a\x6d\xdf\xa3\xcc\x7d"
      "\xe9\x7c\x3e\xc9\xc9\xbd\xe7\x9e\x61\xbe\xdf\xc3\xf4\x9e\x33\x3d\x6d\xe7"
      "\x04\xd0\xb7\x2e\x44\xc4\x46\x44\x9c\x88\x88\x07\x11\x31\xde\xb9\x9e\x74"
      "\x4a\xdc\x6e\x97\xec\x71\xaf\x5f\x3d\x99\xdd\x7c\xf5\x64\x36\x89\x66\xf3"
      "\xde\x7f\x93\x56\x7b\x76\x2d\x76\xfc\x9b\xcc\xa9\xce\x73\x8e\x44\xc4\xcf"
      "\x7e\x1c\xf1\xcb\xe4\xdd\xb8\xf5\xb5\xf5\xc5\x99\x4a\xa5\xbc\xd2\xa9\x17"
      "\x1b\xd5\xe5\x62\x7d\x6d\xfd\xea\x42\x75\x66\xbe\x3c\x5f\x5e\x2a\x95\xa6"
      "\xa7\xa6\x27\x6f\x5e\xbb\x51\x3a\xb2\xbe\x9e\xaf\xfe\xf1\xe5\x8f\x16\xee"
      "\xfc\xfc\x2f\x7f\xfe\xe6\x8b\xbf\x6d\xfc\xe0\xd7\x59\x5a\x63\x9d\xb6\x9d"
      "\xfd\x38\x4a\xed\xae\x0f\x6d\xc7\xc9\x0c\x46\xc4\x9d\x0f\x11\x2c\x07\x03"
      "\x9d\xfe\x9c\xc8\x3b\x11\x3e\x97\x34\x22\xbe\x14\x11\x17\xb3\xfb\xbf\x99"
      "\x77\x36\x00\x40\x2f\x34\x9b\xe3\xd1\x1c\xdf\x59\x07\x00\x8e\xbb\xb4\xb5"
      "\x06\x96\xa4\x85\xce\x5a\xc0\x58\xa4\x69\xa1\xd0\x5e\xc3\x3b\x17\xa3\x69"
      "\xa5\x56\x6f\x5c\x79\x58\x5b\x5d\x9a\x6b\xaf\x95\x4d\xc4\x50\xfa\x70\xa1"
      "\x52\x9e\xec\xac\x15\x4e\xc4\x50\x92\xd5\xa7\x5a\xe7\x6f\xea\xa5\x5d\xf5"
      "\x6b\x11\x71\x36\x22\x7e\x33\x7c\xb2\x55\x2f\xcc\xd6\x2a\x73\x79\xbe\xf1"
      "\x01\x80\x3e\x76\x6a\xd7\xfc\xff\xd1\x70\x7b\xfe\x07\x00\x8e\xb9\x91\xbc"
      "\x13\x00\x00\x7a\xce\xfc\x0f\x00\xfd\xc7\xfc\x0f\x00\xfd\xc7\xfc\x0f\x00"
      "\xfd\xc7\xfc\x0f\x00\xfd\xc7\xfc\x0f\x00\xfd\xc7\xfc\x0f\x00\x7d\xe5\xa7"
      "\x77\xef\x66\xa5\xb9\xd9\xf9\xfc\xeb\xb9\x47\x6b\xab\x8b\xb5\x47\x57\xe7"
      "\xca\xf5\xc5\x42\x75\x75\xb6\x30\x5b\x5b\x59\x2e\xcc\xd7\x6a\xf3\xad\xcf"
      "\xec\xa9\x1e\xf4\x7c\x95\x5a\x6d\x79\xea\x7a\xac\x3e\x2e\x36\xca\xf5\x46"
      "\xb1\xbe\xb6\x7e\xbf\x5a\x5b\x5d\x6a\xdc\x6f\x7d\xae\xf7\xfd\xf2\x50\x4f"
      "\x7a\x05\x00\xec\xe7\xec\xf9\xe7\xff\x48\x22\x62\xe3\xd6\xc9\x56\x89\x1d"
      "\x7b\x39\x98\xab\xe1\x78\x4b\xf3\x4e\x00\xc8\xcd\x40\xde\x09\x00\xb9\x19"
      "\xcc\x3b\x01\x20\x37\xbe\xc7\x07\xf6\xd8\xa2\xf7\x2d\x5d\x7f\x45\xe8\xd9"
      "\xd1\xe7\x02\xf4\xc6\xe5\xaf\x59\xff\x87\x7e\x65\xfd\x1f\xfa\x97\xf5\x7f"
      "\xe8\x5f\xd6\xff\xa1\x7f\x35\x9b\x89\x3d\xff\x01\xa0\xcf\x58\xe3\x07\xfc"
      "\xfc\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x3e\xbb\xb1\x56\x49\xd2\x42\x67\x2f\xf0"
      "\xb1\x48\xd3\x42\x21\xe2\x74\x44\x4c\xc4\x50\xf2\x70\xa1\x52\x9e\x8c\x88"
      "\x33\x11\xf1\xf7\xe1\xa1\xe1\xac\x3e\x95\x77\xd2\x00\xc0\x7b\x4a\xff\x9d"
      "\x74\xf6\xff\xba\x3c\x7e\x69\x6c\x77\xeb\x89\xe4\xe3\xe1\xd6\x31\x22\x7e"
      "\xf5\xbb\x7b\xbf\x7d\x3c\xd3\x68\xac\x4c\x65\xd7\xff\xb7\x7d\xbd\xf1\xac"
      "\x73\xbd\x94\x47\xfe\x00\xc0\x41\xb6\xe6\xe9\xad\x79\x7c\xcb\xeb\x57\x4f"
      "\x66\xb7\x4a\x2f\xf3\x79\xf9\xc3\xf6\xe6\xa2\x59\xdc\xcd\x4e\x69\xb7\x0c"
      "\xc6\x60\xeb\x38\x12\x43\x11\x31\xfa\xff\xa4\x53\x6f\xcb\xde\xaf\x0c\x1c"
      "\x41\xfc\x8d\xa7\x11\xf1\xd5\xbd\xfa\x9f\xb4\xd6\x46\x26\x3a\x3b\x9f\xee"
      "\x8e\x9f\xc5\x3e\xdd\xd3\xf8\xe9\x5b\xf1\xd3\x56\x5b\xfb\x98\xfd\x5f\x7c"
      "\xf9\x08\x72\x81\x7e\xf3\x3c\x1b\x7f\x6e\xef\x75\xff\xa5\x71\xa1\x75\xdc"
      "\xfb\xfe\x1f\x69\x8d\x50\xef\x6f\x6b\xfc\xdb\x7c\x67\xfc\x4b\xb7\xc7\xbf"
      "\x81\x2e\xe3\xdf\x85\xc3\xc6\xb8\xfe\xd7\x9f\x74\x6d\x7b\x1a\xf1\xf5\xc1"
      "\xbd\xe2\x27\xdb\xf1\x93\x2e\xf1\x2f\x1d\x32\xfe\x3f\xbf\xf1\xad\x8b\xdd"
      "\xda\x9a\xbf\x8f\xb8\x1c\x7b\xc7\xdf\x19\xab\xd8\xa8\x2e\x17\xeb\x6b\xeb"
      "\x57\x17\xaa\x33\xf3\xe5\xf9\xf2\x52\xa9\x34\x3d\x35\x3d\x79\xf3\xda\x8d"
      "\x52\xb1\xb5\x46\x5d\xdc\x5a\xa9\x7e\xd7\x7f\x6e\x5d\x39\xb3\x5f\xff\x47"
      "\xbb\xc4\x1f\x39\xa0\xff\xdf\x3d\x64\xff\xff\xf0\xc9\x83\x5f\x7c\x7b\x9f"
      "\xf8\xdf\xff\xce\xde\xaf\xff\xb9\x7d\xe2\x67\x73\xe2\xf7\x0e\x19\x7f\x66"
      "\xf4\x4f\x5d\xb7\xef\xce\xe2\xcf\x75\xe9\xff\x41\xaf\xff\x95\x43\xc6\x7f"
      "\xf1\xaf\xf5\xb9\x43\x3e\x14\x00\xe8\x81\xfa\xda\xfa\xe2\x4c\xa5\x52\x5e"
      "\x71\xd2\xb3\x93\xec\xbd\xdb\x17\x20\x0d\x27\xb9\x9d\x64\x5f\x01\x47\xf1"
      "\x3c\x5f\xf9\x80\xa9\xe6\x3d\x32\x01\x1f\xda\x9b\x9b\x3e\xef\x4c\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x6e\x7a\xf1\x07\x4f\x79\xf7\x11"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x80\xe3\xeb\xd3\x00\x00\x00\xff\xff\xb4\xb5\xd6"
      "\xa8",
      1206);
  syz_mount_image(/*fs=*/0x200004c0, /*dir=*/0x20000500, /*flags=*/0,
                  /*opts=*/0x20000240, /*chdir=*/0x25, /*size=*/0x4b6,
                  /*img=*/0x20000540);
  memcpy((void*)0x20000000, "./file0\000", 8);
  memcpy((void*)0x20000040, "security.ima\000", 13);
  syscall(__NR_lsetxattr, /*path=*/0x20000000ul, /*name=*/0x20000040ul,
          /*val=*/0ul, /*size=*/0ul, /*flags=*/0ul);
  return 0;
}
