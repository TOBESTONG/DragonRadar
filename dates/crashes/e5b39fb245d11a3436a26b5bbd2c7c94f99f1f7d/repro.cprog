// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

static __thread int clone_ongoing;
static __thread int skip_segv;
static __thread jmp_buf segv_env;

static void segv_handler(int sig, siginfo_t* info, void* ctx)
{
  if (__atomic_load_n(&clone_ongoing, __ATOMIC_RELAXED) != 0) {
    exit(sig);
  }
  uintptr_t addr = (uintptr_t)info->si_addr;
  const uintptr_t prog_start = 1 << 20;
  const uintptr_t prog_end = 100 << 20;
  int skip = __atomic_load_n(&skip_segv, __ATOMIC_RELAXED) != 0;
  int valid = addr < prog_start || addr > prog_end;
  if (skip && valid) {
    _longjmp(segv_env, 1);
  }
  exit(sig);
}

static void install_segv_handler(void)
{
  struct sigaction sa;
  memset(&sa, 0, sizeof(sa));
  sa.sa_handler = SIG_IGN;
  syscall(SYS_rt_sigaction, 0x20, &sa, NULL, 8);
  syscall(SYS_rt_sigaction, 0x21, &sa, NULL, 8);
  memset(&sa, 0, sizeof(sa));
  sa.sa_sigaction = segv_handler;
  sa.sa_flags = SA_NODEFER | SA_SIGINFO;
  sigaction(SIGSEGV, &sa, NULL);
  sigaction(SIGBUS, &sa, NULL);
}

#define NONFAILING(...)                                                        \
  ({                                                                           \
    int ok = 1;                                                                \
    __atomic_fetch_add(&skip_segv, 1, __ATOMIC_SEQ_CST);                       \
    if (_setjmp(segv_env) == 0) {                                              \
      __VA_ARGS__;                                                             \
    } else                                                                     \
      ok = 0;                                                                  \
    __atomic_fetch_sub(&skip_segv, 1, __ATOMIC_SEQ_CST);                       \
    ok;                                                                        \
  })

static void sleep_ms(uint64_t ms)
{
  usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
  struct timespec ts;
  if (clock_gettime(CLOCK_MONOTONIC, &ts))
    exit(1);
  return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

static void kill_and_wait(int pid, int* status)
{
  kill(-pid, SIGKILL);
  kill(pid, SIGKILL);
  for (int i = 0; i < 100; i++) {
    if (waitpid(-1, status, WNOHANG | __WALL) == pid)
      return;
    usleep(1000);
  }
  DIR* dir = opendir("/sys/fs/fuse/connections");
  if (dir) {
    for (;;) {
      struct dirent* ent = readdir(dir);
      if (!ent)
        break;
      if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
        continue;
      char abort[300];
      snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort",
               ent->d_name);
      int fd = open(abort, O_WRONLY);
      if (fd == -1) {
        continue;
      }
      if (write(fd, abort, 1) < 0) {
      }
      close(fd);
    }
    closedir(dir);
  } else {
  }
  while (waitpid(-1, status, __WALL) != pid) {
  }
}

static void reset_loop()
{
  char buf[64];
  snprintf(buf, sizeof(buf), "/dev/loop%llu", procid);
  int loopfd = open(buf, O_RDWR);
  if (loopfd != -1) {
    ioctl(loopfd, LOOP_CLR_FD, 0);
    close(loopfd);
  }
}

static void setup_test()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setpgrp();
  write_file("/proc/self/oom_score_adj", "1000");
}

static void setup_sysctl()
{
  int cad_pid = fork();
  if (cad_pid < 0)
    exit(1);
  if (cad_pid == 0) {
    for (;;)
      sleep(100);
  }
  char tmppid[32];
  snprintf(tmppid, sizeof(tmppid), "%d", cad_pid);
  struct {
    const char* name;
    const char* data;
  } files[] = {
      {"/sys/kernel/debug/x86/nmi_longest_ns", "10000000000"},
      {"/proc/sys/kernel/hung_task_check_interval_secs", "20"},
      {"/proc/sys/net/core/bpf_jit_kallsyms", "1"},
      {"/proc/sys/net/core/bpf_jit_harden", "0"},
      {"/proc/sys/kernel/kptr_restrict", "0"},
      {"/proc/sys/kernel/softlockup_all_cpu_backtrace", "1"},
      {"/proc/sys/fs/mount-max", "100"},
      {"/proc/sys/vm/oom_dump_tasks", "0"},
      {"/proc/sys/debug/exception-trace", "0"},
      {"/proc/sys/kernel/printk", "7 4 1 3"},
      {"/proc/sys/kernel/keys/gc_delay", "1"},
      {"/proc/sys/vm/oom_kill_allocating_task", "1"},
      {"/proc/sys/kernel/ctrl-alt-del", "0"},
      {"/proc/sys/kernel/cad_pid", tmppid},
  };
  for (size_t i = 0; i < sizeof(files) / sizeof(files[0]); i++) {
    if (!write_file(files[i].name, files[i].data)) {
    }
  }
  kill(cad_pid, SIGKILL);
  while (waitpid(cad_pid, NULL, 0) != cad_pid)
    ;
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
  int iter = 0;
  for (;; iter++) {
    reset_loop();
    int pid = fork();
    if (pid < 0)
      exit(1);
    if (pid == 0) {
      setup_test();
      execute_one();
      exit(0);
    }
    int status = 0;
    uint64_t start = current_time_ms();
    for (;;) {
      sleep_ms(10);
      if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
        break;
      if (current_time_ms() - start < 5000)
        continue;
      kill_and_wait(pid, &status);
      break;
    }
  }
}

void execute_one(void)
{
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  NONFAILING(memcpy((void*)0x20000100, "ext4\000", 5));
  NONFAILING(memcpy((void*)0x20000500, "./file2\000", 8));
  NONFAILING(*(uint8_t*)0x20000040 = 0);
  NONFAILING(memcpy(
      (void*)0x20000fc0,
      "\x78\x9c\xec\xdd\xcf\x6f\x1c\x57\x1d\x00\xf0\xef\x8e\x7f\x26\x4d\xe3\x04"
      "\x7a\x80\x0a\x48\x80\x42\x40\x51\xd6\xf6\xa6\x8d\xaa\x5e\xda\x5c\x40\xa8"
      "\xaa\x84\xa8\x38\x20\x0e\xa9\xb1\x37\x96\xf1\xae\xd7\x78\xd7\xa5\x36\x96"
      "\x70\xff\x06\x90\x40\xe2\x44\xff\x04\x0e\x48\x1c\x90\x7a\xe2\xc0\x8d\x23"
      "\x12\x07\x84\x54\x0e\x48\x01\x2c\x50\x8c\x04\xd2\xa2\x99\x1d\x3b\x5b\x7b"
      "\x4d\xb6\xd9\xf5\x2e\xd9\xfd\x7c\xa4\xf1\xfc\x78\x33\xf3\x7d\x2f\xce\xec"
      "\x7b\xf3\x66\x3d\x2f\x80\xb1\x75\x3d\x22\xf6\x23\x62\x3a\x22\xde\x8a\x88"
      "\xb9\x7c\x7b\x21\x9f\xe2\xb5\xd6\x94\xee\xf7\xf0\x60\x6f\xf9\xf0\x60\x6f"
      "\xb9\x10\xcd\xe6\x9b\x7f\x2b\x64\xe9\xe9\xb6\x68\x3b\x26\xf5\x4c\x7e\xce"
      "\xd9\x88\xf8\xc6\x57\x23\xbe\x53\x38\x1d\xb7\xbe\xb3\xbb\xbe\x54\xa9\x94"
      "\xb7\xf2\xf5\xf9\x46\x75\x73\xbe\xbe\xb3\x7b\x6b\xad\xba\xb4\x5a\x5e\x2d"
      "\x6f\x94\x4a\x77\x16\xef\x2c\xbc\x7c\xfb\xa5\x52\xdf\xca\x7a\xad\xfa\x8b"
      "\x07\x5f\x59\x7b\xfd\x9b\xbf\xfe\xd5\xa7\x3f\xf8\xdd\xfe\x97\x7f\x90\x66"
      "\xeb\x52\x9e\xd6\x5e\x8e\x7e\x6a\x15\x7d\xea\x38\x4e\x6a\x32\x22\x5e\x3f"
      "\x8f\x60\x43\x30\x91\xcf\xa7\x87\x9c\x0f\x9e\x4c\x12\x11\x1f\x8b\x88\xcf"
      "\x65\xd7\xff\x5c\x4c\x64\xff\x3b\x01\x80\x51\xd6\x6c\xce\x45\x73\xae\x7d"
      "\x1d\x00\x18\x75\x49\xd6\x07\x56\x48\x8a\x11\x91\x24\x79\x23\xa0\xd8\xea"
      "\xc3\x7b\x2e\x2e\x26\x95\x5a\xbd\x71\xf3\x7e\x6d\x7b\x63\xa5\xd5\x57\x76"
      "\x25\xa6\x92\xfb\x6b\x95\xf2\xc2\xd5\x99\x3f\x7c\x2f\xdb\x79\xaa\x90\xae"
      "\x2f\x66\x69\x59\x7a\xb6\x5e\x3a\xb1\x7e\x3b\x22\xae\x46\xc4\x8f\x67\x2e"
      "\x64\xeb\xc5\xe5\x5a\x65\x65\x38\x4d\x1e\x00\x18\x7b\xcf\xb4\xd7\xff\x11"
      "\xf1\xcf\x99\x24\x29\x16\xbb\x3a\xb4\xc3\x53\x3d\x00\xe0\xa9\x31\x3b\xec"
      "\x0c\x00\x00\x03\xa7\xfe\x07\x80\xf1\xa3\xfe\x07\x80\xf1\xd3\x45\xfd\x9f"
      "\x3f\xec\xdf\x3f\xf7\xbc\x00\x00\x83\xe1\xfe\x1f\x00\xc6\xcf\x99\xf5\xff"
      "\x7b\x97\x07\x9b\x11\x00\x60\x60\xdc\xff\x03\xc0\x58\xf9\xfa\x1b\x6f\xa4"
      "\x53\xf3\x30\x7f\xff\xf5\xca\xdb\x3b\xdb\xeb\xb5\xb7\x6f\xad\x94\xeb\xeb"
      "\xc5\xea\xf6\x72\x71\xb9\xb6\xb5\x59\x5c\xad\xd5\x56\xb3\x77\xf6\x54\x1f"
      "\x77\xbe\x4a\xad\xb6\xb9\xf8\x62\x6c\xbf\x33\xdf\x28\xd7\x1b\xf3\xf5\x9d"
      "\xdd\x7b\xd5\xda\xf6\x46\xe3\x5e\xf6\x5e\xef\x7b\xe5\xa9\x81\x94\x0a\x00"
      "\xf8\x5f\xae\x5e\x7b\xff\xf7\x85\x88\xd8\x7f\xe5\x42\x36\x45\xdb\x58\x0e"
      "\xea\x6a\x18\x6d\xc9\xb0\x33\x00\x0c\xcd\x44\x2f\x07\x6b\x20\xc0\x53\xcd"
      "\x68\x5f\x30\xbe\xba\xaa\xc2\xb3\x46\xc2\x6f\xcf\x3d\x2f\xc0\x70\x74\x7c"
      "\x99\xf7\x6c\xc7\xc5\x0f\xfb\xe9\x47\x08\xe2\x7b\x46\xf0\x7f\xe5\xc6\x27"
      "\xbb\xef\xff\x37\xc6\x33\x8c\x96\x8f\xd4\xff\xef\x61\x01\x8c\x94\x27\xeb"
      "\xff\x7f\xb5\xef\xf9\x00\x06\x4f\xff\x3f\x8c\xaf\x66\xb3\x70\x72\xcc\xff"
      "\xe9\xe3\x24\x00\x60\x24\xf5\xf0\x15\xbe\xe6\x0f\xfb\xd5\x08\x01\x86\xea"
      "\x71\x83\x79\xf7\xe5\xf9\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8c\x98\x4b\x11\xf1"
      "\xdd\x28\x24\xc5\x6c\x78\xef\x24\xfd\x99\x14\x8b\x11\xcf\x46\xc4\x95\x98"
      "\x9a\x8c\xb5\x4a\x79\x21\x22\x2e\xc7\xb5\x88\x98\x9a\xb9\xbf\x56\x29\x2f"
      "\x0e\x3b\xd3\x00\x40\x8f\x92\xbf\x14\xf2\xf1\xbf\x6e\xcc\xbd\x70\xe9\x64"
      "\xea\x74\xe1\x5f\x33\xd9\x3c\x22\xbe\xff\xb3\x37\x7f\xf2\xce\x52\xa3\xb1"
      "\xb5\x98\x6e\xff\xfb\xf1\xf6\x99\xa3\xe1\xc3\x4a\x8f\x8e\xeb\x61\x5c\x41"
      "\x00\xa0\xcf\xb2\xfa\xbb\x94\xcf\xdb\x6e\xe4\x1f\x1e\xec\x2d\x1f\x4d\x83"
      "\xcc\xcf\x83\xbb\xf1\x9f\x7c\x28\xe2\xe5\xc3\x83\xbd\x6c\x6a\xa5\x4c\x46"
      "\xba\x31\x62\x36\x6b\x4b\x5c\xfc\x47\x21\x26\xf3\x63\x66\x23\xe2\xf9\x88"
      "\x98\xe8\x43\xfc\xfd\x77\x23\xe2\x13\x9d\xca\x5f\xc8\xfa\x46\xae\xe4\x23"
      "\x9f\xb6\xc7\x8f\x3c\xf6\xb3\x03\x8d\x9f\x7c\x28\x7e\x92\xa5\xb5\xe6\x69"
      "\xe3\xeb\xe3\x7d\xc8\x0b\x8c\x9b\xf7\xef\x46\xc4\x6b\x9d\xae\xbf\x24\xae"
      "\x67\xf3\xce\xd7\xff\x6c\xf6\x09\xd5\xbb\x07\x77\x5b\x27\x3b\xfa\xec\x3b"
      "\x6c\x8b\x3f\x99\x47\x9a\xe8\x10\x3f\xbd\xe6\xaf\x77\x1b\xe3\xc5\xdf\x7c"
      "\xed\xd4\xc6\xe6\x5c\x2b\xed\xdd\x88\xe7\x27\x3b\xc5\x2f\x1c\xc7\x2f\x9c"
      "\x11\xff\x85\x2e\xe3\xff\xf1\x53\x9f\xf9\xd1\xab\xad\xc5\x0b\xa7\xb2\xf1"
      "\xf3\x88\x1b\xd1\x39\x7e\x7b\xac\xf9\x46\x75\x73\xbe\xbe\xb3\x7b\x6b\xad"
      "\xba\xb4\x5a\x5e\x2d\x6f\x94\x4a\x77\x16\xef\x2c\xbc\x7c\xfb\xa5\xd2\xfc"
      "\xfd\xb5\x4a\x79\xa1\xf5\xb3\x63\xfc\xbf\xbe\x72\xf3\xf2\x59\x79\x4b\xcb"
      "\x7f\xf1\x8c\xf8\xb3\x1d\xcb\x3f\x7d\x7c\xec\x17\xba\x2c\xff\x7b\xff\x7e"
      "\xeb\xdb\x9f\x7d\xb4\x3a\x73\x32\xfe\x97\x3e\xdf\xf9\xf7\xff\x5c\xc7\xf8"
      "\x2d\x69\x9d\xf8\xc5\x2e\xe3\x2f\x5d\xfc\xe5\x99\xc3\x77\xa7\xf1\x57\xce"
      "\x28\xff\xe3\x7e\xff\x37\xbb\x8c\xff\xc1\x9f\x77\x57\xba\xdc\x15\x00\x18"
      "\x80\xfa\xce\xee\xfa\x52\xa5\x52\xde\xea\x69\x21\xbd\x0b\xed\xc7\x79\x4e"
      "\x2d\xa4\x59\xec\x6e\xe7\xa3\xe6\x62\x6f\x41\xff\x14\xe7\x51\x8a\x27\x5c"
      "\x98\x3a\xaf\x7f\xd5\x73\x5f\x98\x3c\x6e\x2b\xf6\xf7\xcc\xdf\x4a\xcf\x38"
      "\xe0\xe2\x24\x7d\x2f\x45\x4f\x0b\x0f\x07\x15\x6b\x78\x9f\x49\xc0\x60\x3c"
      "\xba\xe8\x87\x9d\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x2c"
      "\x83\xf8\xd3\xa5\x61\x97\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xd1\xf5\xdf\x00\x00"
      "\x00\xff\xff\xef\x8e\xcd\x40",
      1357));
  NONFAILING(syz_mount_image(
      /*fs=*/0x20000100, /*dir=*/0x20000500,
      /*flags=MS_LAZYTIME|MS_SILENT|MS_NOSUID*/ 0x2008002, /*opts=*/0x20000040,
      /*chdir=*/1, /*size=*/0x54d, /*img=*/0x20000fc0));
  NONFAILING(memcpy((void*)0x20000300, "./file0\000", 8));
  syscall(__NR_open, /*file=*/0x20000300ul,
          /*flags=O_SYNC|O_LARGEFILE|O_CREAT|FASYNC|O_RDWR*/ 0x10b042ul,
          /*mode=*/0ul);
  NONFAILING(memcpy((void*)0x200000c0, "vfat\000", 5));
  NONFAILING(memcpy((void*)0x20000000, "./file1\000", 8));
  NONFAILING(syz_mount_image(
      /*fs=*/0x200000c0, /*dir=*/0x20000000,
      /*flags=MS_LAZYTIME|MS_SLAVE|MS_UNBINDABLE|MS_SYNCHRONOUS|MS_STRICTATIME|MS_SILENT|0x200005*/
      0x32a8015, /*opts=*/0, /*chdir=*/0xfd, /*size=*/0, /*img=*/0x20000300));
  NONFAILING(memcpy((void*)0x20000140, "./file1\000", 8));
  NONFAILING(memcpy((void*)0x20000180, "./file0\000", 8));
  syscall(__NR_rename, /*old=*/0x20000140ul, /*new=*/0x20000180ul);
}
int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  setup_sysctl();
  const char* reason;
  (void)reason;
  install_segv_handler();
  loop();
  return 0;
}
