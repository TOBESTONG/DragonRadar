mmap: syz.0.241 (6832) uses deprecated remap_file_pages() syscall. See Documentation/vm/remap_file_pages.rst.
EXT4-fs (loop3): encrypted files will use data=ordered instead of data journaling mode
netlink: 'syz.2.246': attribute type 13 has an invalid length.
================================
WARNING: inconsistent lock state
5.10.0 #1 Not tainted
--------------------------------
inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
syz.2.247/6855 [HC0[0]:SC1[1]:HE1:SE0] takes:
ffff88800c1d3aa8 (&file_data->lock){+.?.}-{2:2}, at: spin_lock include/linux/spinlock.h:354 [inline]
ffff88800c1d3aa8 (&file_data->lock){+.?.}-{2:2}, at: io_file_data_ref_zero+0x75/0x450 fs/io_uring.c:7361
{SOFTIRQ-ON-W} state was registered at:
  lock_acquire kernel/locking/lockdep.c:5437 [inline]
  lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
  __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
  _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
  spin_lock include/linux/spinlock.h:354 [inline]
  io_sqe_files_register fs/io_uring.c:7496 [inline]
  __io_uring_register fs/io_uring.c:9665 [inline]
  __do_sys_io_uring_register+0x3447/0x40a0 fs/io_uring.c:9755
  do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
  entry_SYSCALL_64_after_hwframe+0x44/0xa9
irq event stamp: 1260
hardirqs last  enabled at (1260): [<ffffffff83ecb152>] __raw_spin_unlock_irqrestore include/linux/spinlock_api_smp.h:160 [inline]
hardirqs last  enabled at (1260): [<ffffffff83ecb152>] _raw_spin_unlock_irqrestore+0x42/0x50 kernel/locking/spinlock.c:191
hardirqs last disabled at (1259): [<ffffffff83ecaf1e>] __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:108 [inline]
hardirqs last disabled at (1259): [<ffffffff83ecaf1e>] _raw_spin_lock_irqsave+0x4e/0x50 kernel/locking/spinlock.c:159
softirqs last  enabled at (656): [<ffffffff81099056>] memcpy include/linux/string.h:399 [inline]
softirqs last  enabled at (656): [<ffffffff81099056>] fpu__copy+0x176/0x640 arch/x86/kernel/fpu/core.c:240
softirqs last disabled at (1159): [<ffffffff84000f92>] asm_call_irq_on_stack+0x12/0x20

other info that might help us debug this:
 Possible unsafe locking scenario:

       CPU0
       ----
  lock(&file_data->lock);
  <Interrupt>
    lock(&file_data->lock);

 *** DEADLOCK ***

5 locks held by syz.2.247/6855:
 #0: ffff8880081bed28 (&mm->mmap_lock#2){++++}-{3:3}, at: mmap_read_trylock include/linux/mmap_lock.h:56 [inline]
 #0: ffff8880081bed28 (&mm->mmap_lock#2){++++}-{3:3}, at: do_user_addr_fault+0x339/0xc40 arch/x86/mm/fault.c:1313
 #1: ffffffff850e7f00 (rcu_read_lock){....}-{1:2}, at: filemap_map_pages+0x17f/0xdf0 mm/filemap.c:2843
 #2: ffff888011b5dc18 (ptlock_ptr(page)#2){+.+.}-{2:2}, at: spin_lock include/linux/spinlock.h:354 [inline]
 #2: ffff888011b5dc18 (ptlock_ptr(page)#2){+.+.}-{2:2}, at: pte_alloc_one_map mm/memory.c:3688 [inline]
 #2: ffff888011b5dc18 (ptlock_ptr(page)#2){+.+.}-{2:2}, at: alloc_set_pte+0xa09/0xf80 mm/memory.c:3801
 #3: ffffffff850e7de0 (rcu_callback){....}-{0:0}, at: rcu_do_batch+0x415/0x1440 kernel/rcu/tree.c:2466
 #4: ffffffff850e7f00 (rcu_read_lock){....}-{1:2}, at: percpu_ref_put_many.constprop.0+0x0/0x2a0

stack backtrace:
CPU: 0 PID: 6855 Comm: syz.2.247 Not tainted 5.10.0 #1
Hardware name: QEMU Ubuntu 24.04 PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014
Call Trace:
 <IRQ>
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x107/0x163 lib/dump_stack.c:118
 print_usage_bug kernel/locking/lockdep.c:4413 [inline]
 valid_state kernel/locking/lockdep.c:3751 [inline]
 mark_lock_irq kernel/locking/lockdep.c:3954 [inline]
 mark_lock.cold+0x65/0x90 kernel/locking/lockdep.c:4411
 mark_usage kernel/locking/lockdep.c:4306 [inline]
 __lock_acquire+0x11c2/0x5ca0 kernel/locking/lockdep.c:4786
 lock_acquire kernel/locking/lockdep.c:5437 [inline]
 lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
 __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
 _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
 spin_lock include/linux/spinlock.h:354 [inline]
 io_file_data_ref_zero+0x75/0x450 fs/io_uring.c:7361
 percpu_ref_put_many.constprop.0+0x262/0x2a0 include/linux/percpu-refcount.h:322
 rcu_do_batch+0x496/0x1440 kernel/rcu/tree.c:2476
 rcu_core+0x62d/0x9d0 kernel/rcu/tree.c:2711
 __do_softirq+0x295/0xa3f kernel/softirq.c:298
 asm_call_irq_on_stack+0x12/0x20
 </IRQ>
 __run_on_irqstack arch/x86/include/asm/irq_stack.h:26 [inline]
 run_on_irqstack_cond arch/x86/include/asm/irq_stack.h:77 [inline]
 do_softirq_own_stack+0xaa/0xd0 arch/x86/kernel/irq_64.c:77
 invoke_softirq kernel/softirq.c:393 [inline]
 __irq_exit_rcu+0x1e5/0x220 kernel/softirq.c:423
 irq_exit_rcu+0x5/0x20 kernel/softirq.c:435
 sysvec_apic_timer_interrupt+0x48/0xf0 arch/x86/kernel/apic/apic.c:1091
 asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:631
RIP: 0010:arch_atomic_fetch_add_unless include/linux/atomic-arch-fallback.h:1091 [inline]
RIP: 0010:arch_atomic_add_unless include/linux/atomic-arch-fallback.h:1113 [inline]
RIP: 0010:atomic_add_unless include/asm-generic/atomic-instrumented.h:789 [inline]
RIP: 0010:page_ref_add_unless include/linux/page_ref.h:166 [inline]
RIP: 0010:__page_cache_add_speculative include/linux/pagemap.h:223 [inline]
RIP: 0010:page_cache_get_speculative include/linux/pagemap.h:239 [inline]
RIP: 0010:filemap_map_pages+0x363/0xdf0 mm/filemap.c:2858
Code: 83 e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85 ab 09 00 00 4c 89 64 24 10 41 8b 5c 24 34 e8 76 93 ec ff 31 ff 89 de e8 2d 8b ec ff <85> db 0f 84 27 02 00 00 e8 60 93 ec ff 8d 53 01 89 d8 f0 0f b1 55
RSP: 0000:ffff88801eb07c28 EFLAGS: 00000293
RAX: 0000000000000000 RBX: 0000000000000006 RCX: ffffffff81597b53
RDX: 0000000000000006 RSI: ffff88801def9a00 RDI: 0000000000000005
RBP: ffffea000054f674 R08: 0000000000000001 R09: ffffea000054f677
R10: 0000000000000000 R11: 0000000000000001 R12: ffffea000054f640
R13: ffffea000054f648 R14: ffff88801eb07cc8 R15: dffffc0000000000
 do_fault_around mm/memory.c:3967 [inline]
 do_read_fault mm/memory.c:4001 [inline]
 do_fault mm/memory.c:4134 [inline]
 handle_pte_fault mm/memory.c:4374 [inline]
 __handle_mm_fault mm/memory.c:4509 [inline]
 handle_mm_fault+0x24f6/0x37e0 mm/memory.c:4607
 do_user_addr_fault+0x645/0xc40 arch/x86/mm/fault.c:1372
 handle_page_fault arch/x86/mm/fault.c:1429 [inline]
 exc_page_fault+0xa2/0x1a0 arch/x86/mm/fault.c:1485
 asm_exc_page_fault+0x1e/0x30 arch/x86/include/asm/idtentry.h:583
RIP: 0033:0x7f8bb1683cc6
Code: ff 48 83 e8 01 48 89 d6 bf 01 00 00 00 48 c1 e0 0e 48 c1 ee 06 48 01 c8 48 89 d1 81 e6 ff 3f 00 00 48 c1 e9 03 83 e1 07 d3 e7 <40> 84 bc 06 20 20 00 00 0f 85 27 fd ff ff e9 ce fd ff ff e8 62 5a
RSP: 002b:00007ffff756f6c0 EFLAGS: 00010212
RAX: 000000110c2a0000 RBX: 00007f8bb248c720 RCX: 0000000000000005
RDX: ffffffff8109786a RSI: 00000000000025e1 RDI: 0000000000000020
RBP: 0000000000000000 R08: 00007f8bb1947000 R09: 00007f8bb1949000
R10: 000000008109786e R11: 0000000000000000 R12: ffffffff810973c2
R13: 00007f8bb195d018 R14: 0000000000000008 R15: 000000000000054f
EXT4-fs error (device loop3): ext4_mb_generate_buddy:802: group 0, block bitmap and bg descriptor inconsistent: 191 vs 220 free clusters
EXT4-fs (loop3): 1 truncate cleaned up
EXT4-fs (loop3): mounted filesystem without journal. Opts: noload,resuid=0x000000000000ee01,debug_want_extra_isize=0x000000000000002e,lazytime,i_version,quota,,errors=continue
----------------
Code disassembly (best guess):
   0:	83 e0 07             	and    $0x7,%eax
   3:	83 c0 03             	add    $0x3,%eax
   6:	38 d0                	cmp    %dl,%al
   8:	7c 08                	jl     0x12
   a:	84 d2                	test   %dl,%dl
   c:	0f 85 ab 09 00 00    	jne    0x9bd
  12:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  17:	41 8b 5c 24 34       	mov    0x34(%r12),%ebx
  1c:	e8 76 93 ec ff       	call   0xffec9397
  21:	31 ff                	xor    %edi,%edi
  23:	89 de                	mov    %ebx,%esi
  25:	e8 2d 8b ec ff       	call   0xffec8b57
* 2a:	85 db                	test   %ebx,%ebx <-- trapping instruction
  2c:	0f 84 27 02 00 00    	je     0x259
  32:	e8 60 93 ec ff       	call   0xffec9397
  37:	8d 53 01             	lea    0x1(%rbx),%edx
  3a:	89 d8                	mov    %ebx,%eax
  3c:	f0                   	lock
  3d:	0f                   	.byte 0xf
  3e:	b1 55                	mov    $0x55,%cl
