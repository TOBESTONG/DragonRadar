// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <pthread.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include <linux/futex.h>
#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif
#ifndef __NR_renameat2
#define __NR_renameat2 316
#endif

static unsigned long long procid;

static void sleep_ms(uint64_t ms)
{
  usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
  struct timespec ts;
  if (clock_gettime(CLOCK_MONOTONIC, &ts))
    exit(1);
  return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static void thread_start(void* (*fn)(void*), void* arg)
{
  pthread_t th;
  pthread_attr_t attr;
  pthread_attr_init(&attr);
  pthread_attr_setstacksize(&attr, 128 << 10);
  int i = 0;
  for (; i < 100; i++) {
    if (pthread_create(&th, &attr, fn, arg) == 0) {
      pthread_attr_destroy(&attr);
      return;
    }
    if (errno == EAGAIN) {
      usleep(50);
      continue;
    }
    break;
  }
  exit(1);
}

typedef struct {
  int state;
} event_t;

static void event_init(event_t* ev)
{
  ev->state = 0;
}

static void event_reset(event_t* ev)
{
  ev->state = 0;
}

static void event_set(event_t* ev)
{
  if (ev->state)
    exit(1);
  __atomic_store_n(&ev->state, 1, __ATOMIC_RELEASE);
  syscall(SYS_futex, &ev->state, FUTEX_WAKE | FUTEX_PRIVATE_FLAG, 1000000);
}

static void event_wait(event_t* ev)
{
  while (!__atomic_load_n(&ev->state, __ATOMIC_ACQUIRE))
    syscall(SYS_futex, &ev->state, FUTEX_WAIT | FUTEX_PRIVATE_FLAG, 0, 0);
}

static int event_isset(event_t* ev)
{
  return __atomic_load_n(&ev->state, __ATOMIC_ACQUIRE);
}

static int event_timedwait(event_t* ev, uint64_t timeout)
{
  uint64_t start = current_time_ms();
  uint64_t now = start;
  for (;;) {
    uint64_t remain = timeout - (now - start);
    struct timespec ts;
    ts.tv_sec = remain / 1000;
    ts.tv_nsec = (remain % 1000) * 1000 * 1000;
    syscall(SYS_futex, &ev->state, FUTEX_WAIT | FUTEX_PRIVATE_FLAG, 0, &ts);
    if (__atomic_load_n(&ev->state, __ATOMIC_ACQUIRE))
      return 1;
    now = current_time_ms();
    if (now - start > timeout)
      return 0;
  }
}

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

static void kill_and_wait(int pid, int* status)
{
  kill(-pid, SIGKILL);
  kill(pid, SIGKILL);
  for (int i = 0; i < 100; i++) {
    if (waitpid(-1, status, WNOHANG | __WALL) == pid)
      return;
    usleep(1000);
  }
  DIR* dir = opendir("/sys/fs/fuse/connections");
  if (dir) {
    for (;;) {
      struct dirent* ent = readdir(dir);
      if (!ent)
        break;
      if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
        continue;
      char abort[300];
      snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort",
               ent->d_name);
      int fd = open(abort, O_WRONLY);
      if (fd == -1) {
        continue;
      }
      if (write(fd, abort, 1) < 0) {
      }
      close(fd);
    }
    closedir(dir);
  } else {
  }
  while (waitpid(-1, status, __WALL) != pid) {
  }
}

static void reset_loop()
{
  char buf[64];
  snprintf(buf, sizeof(buf), "/dev/loop%llu", procid);
  int loopfd = open(buf, O_RDWR);
  if (loopfd != -1) {
    ioctl(loopfd, LOOP_CLR_FD, 0);
    close(loopfd);
  }
}

static void setup_test()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setpgrp();
  write_file("/proc/self/oom_score_adj", "1000");
}

struct thread_t {
  int created, call;
  event_t ready, done;
};

static struct thread_t threads[16];
static void execute_call(int call);
static int running;

static void* thr(void* arg)
{
  struct thread_t* th = (struct thread_t*)arg;
  for (;;) {
    event_wait(&th->ready);
    event_reset(&th->ready);
    execute_call(th->call);
    __atomic_fetch_sub(&running, 1, __ATOMIC_RELAXED);
    event_set(&th->done);
  }
  return 0;
}

static void execute_one(void)
{
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  int i, call, thread;
  for (call = 0; call < 11; call++) {
    for (thread = 0; thread < (int)(sizeof(threads) / sizeof(threads[0]));
         thread++) {
      struct thread_t* th = &threads[thread];
      if (!th->created) {
        th->created = 1;
        event_init(&th->ready);
        event_init(&th->done);
        event_set(&th->done);
        thread_start(thr, th);
      }
      if (!event_isset(&th->done))
        continue;
      event_reset(&th->done);
      th->call = call;
      __atomic_fetch_add(&running, 1, __ATOMIC_RELAXED);
      event_set(&th->ready);
      event_timedwait(&th->done,
                      50 + (call == 0 ? 4000 : 0) + (call == 6 ? 4000 : 0));
      break;
    }
  }
  for (i = 0; i < 100 && __atomic_load_n(&running, __ATOMIC_RELAXED); i++)
    sleep_ms(1);
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
  int iter = 0;
  for (;; iter++) {
    reset_loop();
    int pid = fork();
    if (pid < 0)
      exit(1);
    if (pid == 0) {
      setup_test();
      execute_one();
      exit(0);
    }
    int status = 0;
    uint64_t start = current_time_ms();
    for (;;) {
      sleep_ms(10);
      if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
        break;
      if (current_time_ms() - start < 5000)
        continue;
      kill_and_wait(pid, &status);
      break;
    }
  }
}

uint64_t r[3] = {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff};

void execute_call(int call)
{
  intptr_t res = 0;
  switch (call) {
  case 0:
    memcpy((void*)0x20000180, "ext4\000", 5);
    memcpy((void*)0x200000c0, "./file0\000", 8);
    memcpy((void*)0x20000240, "dioread_nolock", 14);
    *(uint8_t*)0x2000024e = 0x2c;
    memcpy((void*)0x2000024f, "grpquota", 8);
    *(uint8_t*)0x20000257 = 0x2c;
    memcpy((void*)0x20000258, "grpquota", 8);
    *(uint8_t*)0x20000260 = 0x2c;
    memcpy((void*)0x20000261, "noauto_da_alloc", 15);
    *(uint8_t*)0x20000270 = 0x2c;
    memcpy((void*)0x20000271, "mblk_io_submit", 14);
    *(uint8_t*)0x2000027f = 0x2c;
    memcpy((void*)0x20000280, "errors=continue", 15);
    *(uint8_t*)0x2000028f = 0x2c;
    memcpy((void*)0x20000290, "usrjquota=", 10);
    *(uint8_t*)0x2000029a = 0x2c;
    *(uint8_t*)0x2000029b = 0;
    memcpy(
        (void*)0x200008c0,
        "\x78\x9c\xec\xdb\xbb\x6f\x1c\xc5\x1f\x00\xf0\xef\xee\xd9\xc9\xef\x97"
        "\x97\x4d\x08\x8f\x98\x00\x86\x80\xb0\x78\xd8\xb1\x13\x20\x05\x0d\x08"
        "\x24\x0a\x90\x90\xa0\x08\xa5\xb1\x9d\xc8\xe4\x12\xa3\xd8\x48\x24\xb2"
        "\xc0\x20\x14\x4a\x14\x89\x1e\x51\x22\xf1\x17\x50\x41\x83\x80\x0a\x89"
        "\x16\x7a\x14\x29\x02\x37\x09\x54\x46\xbb\xb7\xeb\x9c\x2f\x3e\xc7\x8f"
        "\x73\x2e\x64\x3f\x1f\x69\xed\x99\xdb\xb9\x9b\xf9\xde\xec\xdc\xce\xee"
        "\xdc\x05\x50\x59\x83\xd9\x9f\x24\x62\x4f\x44\xfc\x16\x11\x7d\x8d\xec"
        "\xca\x02\x83\x8d\x7f\xd7\x16\xe7\x27\xfe\x5e\x9c\x9f\x48\x62\x69\xe9"
        "\xcd\x3f\x93\xbc\xdc\xd5\xc5\xf9\x89\xb2\x68\xf9\xbc\xdd\x45\x66\x28"
        "\x8d\x48\x3f\x4d\x8a\x4a\x56\x9a\x3d\x7f\xe1\xf4\x78\xbd\x3e\x75\xae"
        "\xc8\x8f\xcc\x9d\x79\x6f\x64\xf6\xfc\x85\x67\xa6\xcf\x8c\x9f\x9a\x3a"
        "\x35\x75\x76\xec\xf8\xf1\x63\x47\x47\x9f\x7f\x6e\xec\xd9\x8e\xc4\x99"
        "\xc5\x75\x75\xe0\xc3\x99\x43\x07\x5f\x7d\xfb\xd2\xeb\x13\x27\x2e\xbd"
        "\xf3\xd3\x37\x59\x7b\xf7\x14\xfb\x9b\xe3\xe8\x94\xc1\x2c\xf0\xbf\x96"
        "\x72\xad\xfb\x1e\xef\x74\x65\x5d\xb6\xb7\x29\x9d\xf4\x74\xb1\x21\x6c"
        "\x48\x2d\x22\xb2\xee\xea\xcd\xc7\x7f\x5f\xd4\xe2\x7a\xe7\xf5\xc5\x2b"
        "\x9f\x74\xb5\x71\xc0\xb6\xca\xce\x4d\x3b\xdb\xef\x5e\x58\x02\xee\x60"
        "\x49\x74\xbb\x05\x40\x77\x94\x27\xfa\xec\xfa\xb7\xdc\x6e\xd1\xd4\xe3"
        "\xb6\x70\xe5\xc5\xc6\x05\x50\x16\xf7\xb5\x62\x6b\xec\xe9\x89\xb4\x28"
        "\xd3\xdb\x72\x7d\xdb\x49\x83\x11\x71\x62\xe1\x9f\x2f\xb3\x2d\xb6\xe9"
        "\x3e\x04\x00\x40\xb3\xef\xb2\xf9\xcf\xd3\xab\xcd\xff\xd2\xb8\xb7\xa9"
        "\xdc\xbe\x62\x0d\xa5\x3f\x22\xee\x8a\x88\xfd\x11\x71\x77\x44\x1c\x88"
        "\x88\x7b\x22\xf2\xb2\xf7\x45\xc4\xfd\x1b\xac\xbf\x75\x69\xe8\xc6\xf9"
        "\x4f\x7a\x79\x53\x81\xad\x53\x36\xff\x7b\xa1\x58\xdb\x5a\x39\xff\x2b"
        "\x67\x7f\xd1\x5f\x2b\x72\x7b\xf3\xf8\x7b\x93\x93\xd3\xf5\xa9\x23\xc5"
        "\x7b\x32\x14\xbd\x3b\xb3\xfc\xe8\x1a\x75\x7c\xff\xf2\xaf\x9f\xb7\xdb"
        "\xd7\x3c\xff\xcb\xb6\xac\xfe\x72\x2e\x58\xb4\xe3\x72\x4f\xcb\x0d\xba"
        "\xc9\xf1\xb9\xf1\x7c\x52\xda\x01\x57\x3e\x8e\x18\xe8\x59\x2d\xfe\x64"
        "\x79\x25\x20\x89\x88\x83\x11\x31\xb0\xb1\x97\xde\x57\x26\xa6\x9f\xfc"
        "\xfa\x50\xbb\x42\x37\x8f\x7f\x0d\x1d\x58\x67\x5a\xfa\x2a\xe2\x89\x46"
        "\xff\x2f\x44\x4b\xfc\xa5\x64\xed\xf5\xc9\x91\xff\x45\x7d\xea\xc8\x48"
        "\x79\x54\xdc\xe8\xe7\x5f\x2e\xbe\xd1\xae\xfe\x2d\xc5\xdf\x01\x59\xff"
        "\xef\x5a\x79\xfc\xb7\x16\xe9\x4f\x9a\xd7\x6b\x67\x37\x5e\xc7\xc5\xdf"
        "\x3f\x6b\x7b\x4d\xb3\xd9\xe3\x7f\x47\xf2\x56\xde\x2f\x3b\x8a\xc7\x3e"
        "\x18\x9f\x9b\x3b\x37\x1a\xb1\x23\x79\x2d\xcf\xaf\x78\x7c\xec\xfa\x73"
        "\xcb\x7c\x59\x3e\x8b\x7f\xe8\xf0\xea\xe3\x7f\x7f\xf1\x9c\xac\x9e\x07"
        "\x22\x22\x3b\x88\x1f\x8c\x88\x87\x22\xe2\xe1\xa2\xed\x8f\x44\xc4\xa3"
        "\x11\x71\x78\x8d\xf8\x7f\x7c\xe9\xb1\x77\x37\x1f\xff\xf6\xca\xe2\x9f"
        "\x5c\xf5\xf3\x6f\xf9\xf8\x6f\xe9\xff\x8d\x27\x6a\xa7\x7f\xf8\xb6\x5d"
        "\xfd\xeb\xeb\xff\x63\x79\x6a\xa8\x78\x24\xff\xfc\xbb\x89\xf5\x36\x70"
        "\x2b\xef\x1d\x00\x00\x00\xfc\x57\xa4\xf9\x77\xe0\x93\x74\x78\x39\x9d"
        "\xa6\xc3\xc3\x8d\xef\xf0\x1f\x88\x5d\x69\x7d\x66\x76\xee\xa9\x93\x33"
        "\xef\x9f\x9d\x6c\x7c\x57\xbe\x3f\x7a\xd3\xf2\x4e\x57\x5f\xd3\xfd\xd0"
        "\xd1\x64\xa1\x78\xc5\x46\x7e\xac\xb8\x57\x5c\xee\x3f\x5a\xdc\x37\xfe"
        "\xa2\xf6\xff\x3c\x3f\x3c\x31\x53\x9f\xec\x72\xec\x50\x75\xbb\xdb\x8c"
        "\xff\xcc\x1f\xb5\x6e\xb7\x0e\xd8\x76\x7e\xaf\x05\xd5\xd5\x3a\xfe\xd3"
        "\x2e\xb5\x03\xb8\xf5\x9c\xff\xa1\xba\x8c\x7f\xa8\x2e\xe3\x1f\xaa\x6b"
        "\xb5\xf1\xff\x51\x4b\xde\x5a\x00\xdc\x99\x9c\xff\xa1\xba\x8c\x7f\xa8"
        "\x2e\xe3\x1f\xaa\xcb\xf8\x87\x4a\xda\xca\xef\xfa\x25\xaa\x9c\x88\xf4"
        "\xb6\x68\x86\xc4\x36\x25\xba\xfd\xc9\x04\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0"
        "\x19\xff\x06\x00\x00\xff\xff\x59\x4d\xed\x85",
        1082);
    syz_mount_image(
        /*fs=*/0x20000180, /*dir=*/0x200000c0,
        /*flags=MS_I_VERSION|MS_REC|MS_SYNCHRONOUS|MS_SILENT|MS_RELATIME|0xf00*/
        0xa0cf10, /*opts=*/0x20000240, /*chdir=*/1, /*size=*/0x43a,
        /*img=*/0x200008c0);
    break;
  case 1:
    memcpy((void*)0x20000040, "./file0\000", 8);
    syscall(__NR_chdir, /*dir=*/0x20000040ul);
    break;
  case 2:
    memcpy((void*)0x20000640, ".\000", 2);
    res = syscall(__NR_openat, /*fd=*/0xffffff9c, /*file=*/0x20000640ul,
                  /*flags=*/0ul, /*mode=*/0ul);
    if (res != -1)
      r[0] = res;
    break;
  case 3:
    memcpy((void*)0x20000040, "memory.current\000", 15);
    res = syscall(__NR_openat, /*fd=*/0xffffff9c, /*file=*/0x20000040ul,
                  /*flags=*/0x275aul, /*mode=*/0ul);
    if (res != -1)
      r[1] = res;
    break;
  case 4:
    memcpy((void*)0x20000000, "#! ", 3);
    *(uint8_t*)0x20000003 = 0xa;
    syscall(__NR_write, /*fd=*/r[1], /*data=*/0x20000000ul,
            /*len=*/0x208e24bul);
    break;
  case 5:
    memcpy((void*)0x20000000, "./file0\000", 8);
    memcpy((void*)0x20000200, "./bus\000", 6);
    syscall(__NR_renameat2, /*oldfd=*/r[0], /*old=*/0x20000000ul,
            /*newfd=*/r[0], /*new=*/0x20000200ul, /*flags=*/0ul);
    break;
  case 6:
    memcpy((void*)0x20000040, "ext4\000", 5);
    memcpy((void*)0x20000080, "./file1\000", 8);
    memcpy((void*)0x20000240, "errors=remount-ro", 17);
    *(uint8_t*)0x20000251 = 0x2c;
    memcpy((void*)0x20000252, "delalloc", 8);
    *(uint8_t*)0x2000025a = 0x2c;
    memcpy((void*)0x2000025b, "noblock_validity", 16);
    *(uint8_t*)0x2000026b = 0x2c;
    memcpy((void*)0x2000026c, "errors=remount-ro", 17);
    *(uint8_t*)0x2000027d = 0x2c;
    memcpy((void*)0x2000027e, "noauto_da_alloc", 15);
    *(uint8_t*)0x2000028d = 0x2c;
    memcpy((void*)0x2000028e, "resgid", 6);
    *(uint8_t*)0x20000294 = 0x3d;
    sprintf((char*)0x20000295, "0x%016llx", (long long)0);
    *(uint8_t*)0x200002a7 = 0x2c;
    memcpy((void*)0x200002a8, "barrier", 7);
    *(uint8_t*)0x200002af = 0x2c;
    memcpy((void*)0x200002b0, "noauto_da_alloc", 15);
    *(uint8_t*)0x200002bf = 0x2c;
    memcpy((void*)0x200002c0, "max_dir_size_kb", 15);
    *(uint8_t*)0x200002cf = 0x3d;
    sprintf((char*)0x200002d0, "0x%016llx", (long long)0x4de);
    *(uint8_t*)0x200002e2 = 0x2c;
    *(uint8_t*)0x200002e3 = 0;
    memcpy(
        (void*)0x20000500,
        "\x78\x9c\xec\xdd\xcf\x6f\x1b\x59\x1d\x00\xf0\xef\x4c\xe2\xfe\x4c\x89"
        "\x0b\x3d\x94\x4a\x94\x8a\x16\xa5\x15\xd4\x4e\x1a\xda\x46\x5c\x28\xa7"
        "\x9e\x2a\x01\xe5\x5e\x42\xe2\x44\x51\x9c\x38\x8a\x9d\xb6\x89\x2a\x94"
        "\x8a\xff\x00\x21\x15\x89\x13\x77\x24\xc4\x19\x09\xf5\x4f\x40\x48\x95"
        "\xe0\x8e\x40\x02\xa1\xdd\x76\xf7\xb0\x87\xed\x7a\x65\x7b\x9c\x4d\xb3"
        "\x76\x7e\x6c\x9d\xb8\x4d\x3e\x1f\x69\x3a\x6f\xe6\x8d\xe7\xfb\x7d\xa9"
        "\xf2\x3c\x6f\xe6\xc5\x0e\xe0\xc8\xba\x14\x11\x77\x22\x62\x20\x22\xae"
        "\x45\xc4\x70\xb6\x3f\xcd\x96\xbb\x8d\x8d\xf5\xd6\x71\xaf\x5e\x3e\x99"
        "\x6a\x2c\x49\xd4\xeb\xf7\x3f\x48\x22\xc9\xf6\xb5\xcf\x95\x64\xeb\xd3"
        "\xad\x97\xc4\x89\x88\xf8\xd9\xdd\x88\x5f\x26\x5f\x8e\x5b\x5d\x5d\x9b"
        "\x9f\x2c\x97\x4b\xcb\xd9\x76\xb1\xb6\xb0\x54\xac\xae\xae\x5d\x9f\x5b"
        "\x98\x9c\x2d\xcd\x96\x16\xc7\xc7\xc7\x6e\x4d\xdc\x9e\xb8\x39\x31\xda"
        "\x93\x76\xe6\x23\x62\x30\x2b\xff\xf5\xfb\x8f\xfe\xf5\xe0\x7f\x57\x7f"
        "\xd5\x48\x6b\x28\xdb\xb7\xb9\x1d\x7b\x30\xb0\xd3\x01\xad\xa6\xe7\x9a"
        "\x3f\x8b\xb6\x46\x1e\xcb\x5f\x21\xd8\xbb\xa8\xfd\x03\xc8\xf5\x39\x0f"
        "\x00\x00\x76\xa7\x71\x8d\xff\xf5\x88\xf8\x4e\xf3\xfa\x7f\x38\x06\x36"
        "\xae\x92\x01\x00\x00\x80\xc3\xa2\xfe\xa3\xa1\xf8\x34\x89\xa8\x03\x00"
        "\x00\x00\x87\x56\xda\x9c\x03\x9b\xa4\x85\x6c\x2e\xc0\x50\xa4\x69\xa1"
        "\xd0\x9a\xc3\x7b\x2e\x4e\xa5\xe5\x4a\xb5\xf6\xbd\x99\xca\xca\xe2\x74"
        "\x6b\xae\x6c\x3e\x72\xe9\xcc\x5c\xb9\x34\x9a\xcd\x15\xce\x47\x2e\x69"
        "\x6c\x8f\x65\x73\x6c\xf3\x91\x3b\x16\x73\xe5\xd2\x8d\x2f\xb6\x9b\xf5"
        "\xe3\x11\x71\x36\x22\x7e\x3b\x7c\xb2\xb9\x5d\x98\xaa\x94\xa7\xfb\x7d"
        "\xf3\x03\x00\x00\x00\x8e\x88\xd3\x5b\xc6\xff\x1f\x0f\xb7\xc6\xff\x00"
        "\x00\x00\xc0\x21\x93\xef\x77\x02\x00\x00\x00\xc0\xbe\x33\xfe\x07\x00"
        "\x00\x80\xc3\xcf\xf8\x1f\x00\x00\x00\x0e\xb5\x9f\xdc\xbb\xd7\x58\xea"
        "\xed\xef\xbf\x9e\x7e\xb8\xba\x32\x5f\x79\x78\x7d\xba\x54\x9d\x2f\x2c"
        "\xac\x4c\x15\xa6\x2a\xcb\x4b\x85\xd9\x4a\x65\xb6\xf9\x99\x7d\x0b\x3b"
        "\x9d\xaf\x5c\xa9\x2c\xfd\x20\x16\x57\x1e\x17\x6b\xa5\x6a\xad\x58\x5d"
        "\x5d\x7b\xb0\x50\x59\x59\xac\x3d\x98\x7b\xe3\x2b\xb0\x01\x00\x00\x80"
        "\x03\x74\xf6\xdb\xcf\xff\x99\x44\xc4\xfa\x0f\x4f\x36\x97\x86\x63\xfd"
        "\x4e\x0a\x38\x10\xc9\x5e\x0e\xfe\xcf\xfe\xe5\x01\x1c\xbc\x81\x7e\x27"
        "\x00\xf4\xcd\x60\xbf\x13\x00\xfa\x26\xb7\x5d\xe5\xb3\x6e\x15\xaf\xcf"
        "\xed\x4b\x32\x40\x5f\xec\x74\x1f\xa0\xeb\xe4\x9d\xbf\xf5\x3e\x17\x00"
        "\x00\x60\x7f\x8c\x7c\xb3\xfb\xf3\xff\x6d\xef\x0d\x00\xef\xbd\xb4\xdf"
        "\x09\x00\x00\x07\xce\xf3\x7f\x38\xba\x72\x66\x00\xc2\x91\xf7\xb5\x1d"
        "\xea\xdf\xfe\xf9\x7f\xbd\xbe\xa7\x84\x00\x00\x80\x9e\x1b\x6a\x2e\x49"
        "\x5a\xc8\x9e\x05\x0e\x45\x9a\x16\x0a\x11\x67\x9a\x5f\x0b\x90\x4b\x66"
        "\xe6\xca\xa5\xd1\x6c\x7c\xf0\x8f\xe1\xdc\xf1\xc6\xf6\x58\xf3\x95\xc9"
        "\xde\xfe\x76\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x8e\xb0\x7a\x3d\x89\x3a\x00\x00\x00\x70\xa8"
        "\x45\xa4\xff\x4d\x9a\x9f\xe6\x1f\x31\x32\x7c\x65\x68\xeb\xfd\x81\x63"
        "\xc9\x27\xc3\xcd\x75\x44\x3c\xfa\xfd\xfd\x67\x8f\x27\x6b\xb5\xe5\xb1"
        "\xc6\xfe\x0f\x37\xf6\xd7\x7e\x97\xed\xbf\xd1\x8f\x3b\x18\x00\x00\x00"
        "\xc0\x56\xed\x71\x7a\x7b\x1c\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbd\xf4\xea\xe5\x93"
        "\xa9\xf6\x72\x90\x71\xff\xff\xe3\x88\xc8\x77\x8a\x3f\x18\x27\x9a\xeb"
        "\x13\x91\x8b\x88\x53\x1f\x25\x31\xb8\xe9\x75\x49\x44\x0c\xf4\x20\xfe"
        "\xfa\xd3\x88\x38\xdf\x29\x7e\xd2\x48\x2b\xf2\x59\x16\x9d\xe2\x9f\xec"
        "\x63\xfc\x34\x22\x4e\xf7\x20\x3e\x1c\x65\xcf\x1b\xfd\xcf\x9d\x4e\xbf"
        "\x7f\x69\x5c\x6a\xae\x3b\xff\xfe\x0d\x66\xcb\xdb\xea\xde\xff\xa5\x1b"
        "\xfd\xdf\x40\x16\x7f\x73\x7f\xd7\xe8\x7f\xce\xec\x32\xc6\x85\x17\x7f"
        "\x2a\x76\x8d\xff\x34\xe2\xc2\x60\xe7\xfe\xa7\x1d\x3f\xe9\xd2\xff\x5d"
        "\xde\x65\xfc\x5f\xfc\x7c\x6d\xad\x5b\x5d\xfd\x0f\x11\x23\x1d\xdf\x7f"
        "\x92\x37\x62\x15\x6b\x0b\x4b\xc5\xea\xea\xda\xf5\xb9\x85\xc9\xd9\xd2"
        "\x6c\x69\x71\x7c\x7c\xec\xd6\xc4\xed\x89\x9b\x13\xa3\xc5\x99\xb9\x72"
        "\x29\xfb\xb7\x63\x8c\xdf\x7c\xeb\x2f\x9f\x6d\xd7\xfe\x53\x5d\xe2\xe7"
        "\x77\x68\xff\x95\x5d\xb6\xff\xf5\x8b\xc7\x2f\xbf\xd1\x2a\xe6\x3a\xc5"
        "\xbf\x7a\xb9\xf3\xfb\xef\xf9\x2e\xf1\xd3\xec\xbd\xef\xbb\x59\xb9\x51"
        "\x3f\xd2\x2e\xaf\xb7\xca\x9b\x5d\xfc\xe3\xdf\x2f\x6e\xd7\xfe\xe9\x8d"
        "\xf6\x1f\x8f\xbd\xfc\xff\x5f\xdd\x65\xfb\xaf\xfd\xf4\xd7\xff\xde\xe5"
        "\xa1\x00\xc0\x01\xa8\xae\xae\xcd\x4f\x96\xcb\xa5\xe5\xf7\xa3\xf0\xe7"
        "\xce\x55\x03\xd1\xa3\x10\xbd\x3a\x8f\x42\x87\x42\x76\x41\x1d\xef\x4a"
        "\x3e\x87\xa2\x50\x4f\xf6\xe9\xcc\xfd\xee\x99\x00\x00\x80\x5e\xdb\x34"
        "\xf4\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\xfa\xe4\x20\x3e\xa8\x6c\x6b\xcc\xf5\xfe\x34\x15\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x00\x00\x00\x00\x60\x5b\x9f\x07\x00\x00\xff\xff\xad\xce\xcd\x53",
        1240);
    syz_mount_image(
        /*fs=*/0x20000040, /*dir=*/0x20000080,
        /*flags=MS_LAZYTIME|MS_REC|MS_STRICTATIME|MS_NOEXEC|MS_NODIRATIME|0x540*/
        0x3004d48, /*opts=*/0x20000240, /*chdir=*/0x11, /*size=*/0x4d8,
        /*img=*/0x20000500);
    break;
  case 7:
    memcpy((void*)0x20000380, "/dev/loop", 9);
    *(uint8_t*)0x20000389 = 0x30 + procid * 1;
    *(uint8_t*)0x2000038a = 0;
    memcpy((void*)0x20000140, "./bus\000", 6);
    syscall(__NR_mount, /*src=*/0x20000380ul, /*dst=*/0x20000140ul,
            /*type=*/0ul, /*flags=MS_BIND*/ 0x1000ul, /*data=*/0ul);
    break;
  case 8:
    memcpy((void*)0x20000400, "./bus\000", 6);
    res = syscall(__NR_open, /*file=*/0x20000400ul,
                  /*flags=O_SYNC|O_NOCTTY|O_NOATIME|O_RDWR|0x3c*/ 0x14113eul,
                  /*mode=*/0ul);
    if (res != -1)
      r[2] = res;
    break;
  case 9:
    memcpy((void*)0x20000100, "#! ", 3);
    *(uint8_t*)0x20000103 = 0xa;
    syscall(__NR_write, /*fd=*/r[2], /*data=*/0x20000100ul,
            /*len=*/0x208e24bul);
    break;
  case 10:
    syscall(__NR_mkdir, /*path=*/0ul, /*mode=*/0ul);
    break;
  }
}
int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  for (procid = 0; procid < 4; procid++) {
    if (fork() == 0) {
      loop();
    }
  }
  sleep(1000000);
  return 0;
}
