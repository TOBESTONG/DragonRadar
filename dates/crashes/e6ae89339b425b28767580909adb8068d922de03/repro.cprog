// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

static void use_temporary_dir(void)
{
  char tmpdir_template[] = "./syzkaller.XXXXXX";
  char* tmpdir = mkdtemp(tmpdir_template);
  if (!tmpdir)
    exit(1);
  if (chmod(tmpdir, 0777))
    exit(1);
  if (chdir(tmpdir))
    exit(1);
}

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  use_temporary_dir();
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x200000c0, "ext4\000", 5);
  memcpy((void*)0x20000040, "./file0\000", 8);
  memcpy((void*)0x20000000, "journal_dev", 11);
  *(uint8_t*)0x2000000b = 0x3d;
  sprintf((char*)0x2000000c, "0x%016llx", (long long)7);
  *(uint8_t*)0x2000001e = 0x2c;
  memcpy((void*)0x2000001f, "nodiscard", 9);
  *(uint8_t*)0x20000028 = 0x2c;
  memcpy((void*)0x20000029, "nouid32", 7);
  *(uint8_t*)0x20000030 = 0x2c;
  *(uint8_t*)0x20000031 = 0;
  memcpy(
      (void*)0x20000a00,
      "\x78\x9c\xec\xdd\xc1\x4f\x5c\x5b\x19\x00\xf0\xef\x5e\xa0\x50\x1e\xef\xc1"
      "\x8b\x6f\xa1\x46\x7d\xf5\xf9\xb4\x9a\xa6\x33\x30\x6d\x49\xd3\x55\xdd\x68"
      "\x4c\x53\x63\x6c\x5c\x75\xd1\x22\x4c\x09\x61\x86\x21\xcc\x50\x0b\x76\x41"
      "\xff\x07\x13\x9b\xb8\xd2\x3f\xc1\x85\x89\x0b\x4d\x57\x26\x2e\xdd\xe9\xce"
      "\x4d\x5d\x98\x54\x6d\x34\xc5\xc4\xc5\x98\x7b\x67\xa0\x40\x19\x4a\x5b\x60"
      "\x5e\xb8\xbf\x5f\x72\x72\xef\xb9\x67\x3a\xdf\x39\x9d\xdc\xf3\x0d\x67\x60"
      "\x4e\x00\x85\x75\x2e\x22\x36\x22\xe2\x4c\x44\xdc\x8d\x88\xf1\xee\xf5\xa4"
      "\x5b\xe2\x7a\xa7\x64\x8f\x7b\xf1\xfc\xe1\xec\xe6\xf3\x87\xb3\x49\xb4\xdb"
      "\xb7\xfe\x99\x64\xed\x03\xd9\xb5\xd8\xf1\x6f\x32\xef\x75\x9f\x73\x24\x22"
      "\x7e\xf8\xdd\x88\x1f\x27\xaf\xc6\x6d\xae\xad\x2f\xce\xd4\x6a\xd5\x95\x6e"
      "\xbd\xdc\xaa\x2f\x97\x9b\x6b\xeb\x17\x17\xea\x33\xf3\xd5\xf9\xea\x52\xa5"
      "\x32\x3d\x35\x3d\x79\xf5\xd2\x95\xca\x91\x8d\xf5\xe3\xfa\xaf\x9f\x7d\x67"
      "\xe1\xc6\x8f\x7e\xf7\xdb\x2f\x3f\xfd\xd3\xc6\xb7\x7e\x9a\x75\x6b\xac\xdb"
      "\xb6\x73\x1c\x47\xa9\x33\xf4\xa1\xed\x38\x99\xc1\x88\xb8\x71\x1c\xc1\xfa"
      "\x60\xa0\x3b\x9e\x33\xfd\xee\x08\x6f\x25\x8d\x88\x52\x44\x7c\x92\xdf\xff"
      "\xe3\x31\x90\xbf\x9a\x00\xc0\x69\xd6\x6e\x8f\x47\x7b\x7c\x67\x1d\x00\x38"
      "\xed\xd2\x7c\x0d\x2c\x49\x4b\xdd\xb5\x80\xb1\x48\xd3\x52\xa9\xb3\x86\xf7"
      "\x51\x8c\xa6\xb5\x46\xb3\x75\xe1\x5e\x63\x75\x69\xae\xb3\x56\x36\x11\x43"
      "\xe9\xbd\x85\x5a\x75\xb2\xbb\x56\x38\x11\x43\x49\x56\x9f\xca\xcf\x5f\xd6"
      "\x2b\x7b\xea\x97\x22\xe2\xc3\x88\xf8\xd9\xf0\xd9\xbc\x5e\x9a\x6d\xd4\xe6"
      "\xfa\xf9\xc6\x07\x00\x0a\xec\xbd\x3d\xf9\xff\x3f\xc3\x9d\xfc\x0f\x00\x9c"
      "\x72\x23\xfd\xee\x00\x00\x70\xe2\xe4\x7f\x00\x28\x1e\xf9\x1f\x00\x8a\x47"
      "\xfe\x07\x80\xe2\x91\xff\x01\xa0\x78\xe4\x7f\x00\x28\x1e\xf9\x1f\x00\x0a"
      "\xe5\x07\x37\x6f\x66\xa5\xbd\xd9\xfd\xfe\xeb\xb9\xfb\x6b\xab\x8b\x8d\xfb"
      "\x17\xe7\xaa\xcd\xc5\x52\x7d\x75\xb6\x34\xdb\x58\x59\x2e\xcd\x37\x1a\xf3"
      "\xf9\x77\xf6\xd4\x5f\xf7\x7c\xb5\x46\x63\x79\xea\x72\xac\x3e\x28\xb7\xaa"
      "\xcd\x56\xb9\xb9\xb6\x7e\xa7\xde\x58\x5d\x6a\xdd\xc9\xbf\xd7\xfb\x4e\x75"
      "\xe8\x44\x46\x05\x00\x1c\xe4\xc3\x8f\x9f\xfc\x25\x89\x88\x8d\x6b\x67\xf3"
      "\x12\x3b\xf6\x72\x90\xab\xe1\x74\xb3\xdb\x07\x14\xd7\x40\xbf\x3b\x00\xf4"
      "\x8d\xfc\x0f\xc5\xd5\xfb\x67\xfc\x3f\x9e\x68\x3f\x80\xfe\xd9\x67\x8b\xde"
      "\x5d\x76\xfc\x8a\xd0\xd9\x5d\x0d\x8f\x8f\xa7\x3f\xc0\xf1\x3b\xff\x05\xeb"
      "\xff\x50\x54\x69\xbf\x3b\x00\xf4\x8d\xf5\x7f\x28\x2e\xeb\xff\x50\x5c\xed"
      "\x76\x62\xcf\x7f\x00\x28\x18\x6b\xfc\xc0\x1b\x7c\xfe\xbf\x9b\xcf\xff\x01"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x28\xb0\xb1\xbc\x24\x69\xa9\xbb\x17\xf8\x58\xa4\x69"
      "\xa9\x14\xf1\x7e\x44\x4c\xc4\x50\x72\x6f\xa1\x56\x9d\x8c\x88\x0f\x22\xe2"
      "\xcf\xc3\x43\xc3\x59\x7d\xaa\xdf\x9d\x06\x00\xde\x51\xfa\xf7\xa4\xbb\xff"
      "\xd7\xf9\xf1\x4f\xc7\xf6\xb6\x9e\x49\xfe\x3b\x9c\x1f\x23\xe2\x27\xbf\xb8"
      "\xf5\xf3\x07\x33\xad\xd6\xca\x54\x76\xfd\x5f\xdb\xd7\x5b\x8f\xbb\xd7\x2b"
      "\xfd\xe8\x3f\x00\xf0\x3a\x5b\x79\x7a\x2b\x8f\x6f\x79\xf1\xfc\xe1\xec\x56"
      "\x39\xc9\xfe\x3c\xfb\x76\x67\x73\xd1\x2c\xee\x66\xb7\x74\x5a\x06\x63\x30"
      "\x3f\x8e\xc4\x50\x44\x8c\xfe\x3b\xe9\xd6\x3b\xb2\xf7\x2b\x03\x47\x10\x7f"
      "\xe3\x51\x44\x7c\x7e\xbf\xf1\x27\xf9\xda\xc8\x44\x77\xe7\xd3\xbd\xf1\xb3"
      "\xd8\xef\x9f\x68\xfc\x74\x57\xfc\x34\x6f\xeb\x1c\xb3\xff\x8b\xcf\xbd\x79"
      "\xe8\x9e\x5b\xba\x42\x51\x3c\xc9\xe6\x9f\xeb\xfb\xdd\x7f\x69\x9c\xcb\x8f"
      "\xfb\xdf\xff\x23\xf9\x0c\xf5\xee\xb6\xe6\xbf\xcd\x57\xe6\xbf\x74\x7b\xfe"
      "\x1b\xe8\x31\xff\x9d\x3b\x6c\x8c\xcb\x7f\xf8\x5e\xcf\xb6\x47\x11\x5f\x1c"
      "\xdc\x2f\x7e\xb2\x1d\x3f\xe9\x11\xff\xd3\x43\xc6\xff\xeb\x97\xbe\xf2\x49"
      "\xaf\xb6\xf6\x2f\x23\xce\xc7\xfe\xf1\x77\xc6\x2a\xb7\xea\xcb\xe5\xe6\xda"
      "\xfa\xc5\x85\xfa\xcc\x7c\x75\xbe\xba\x54\xa9\x4c\x4f\x4d\x4f\x5e\xbd\x74"
      "\xa5\x52\xce\xd7\xa8\xcb\x5b\x2b\xd5\xaf\xfa\xc7\xb5\x0b\x1f\x1c\x34\xfe"
      "\xd1\x1e\xf1\x47\x5e\x33\xfe\xaf\x1f\x72\xfc\xbf\xfa\xdf\xdd\xdb\x5f\x3d"
      "\x20\xfe\x37\xbf\xb6\xff\xeb\xff\xd1\x01\xf1\xb3\x9c\xf8\x8d\x43\xc6\x9f"
      "\x19\xfd\x4d\xcf\xb9\x3e\x8b\x3f\xd7\x63\xfc\x7b\x5e\xff\x5d\x5b\x84\x67"
      "\x95\x0b\x87\x8c\xff\xf4\x6f\xeb\x73\x87\x7c\x28\x00\x70\x02\x9a\x6b\xeb"
      "\x8b\x33\xb5\x5a\x75\xc5\xc9\x91\x9e\xfc\xfe\xf6\xf7\xef\x7e\x06\xba\xe1"
      "\xc4\xc9\x5b\x9e\xf4\x7b\x66\x02\x8e\xdb\xcb\x9b\xbe\xdf\x3d\x01\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7a\x39\x89\x3f\x27\xea\xf7\x18\x01"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x38\xbd\xfe\x1f\x00\x00\xff\xff\xf1\x6a\xda\x4e",
      1223);
  syz_mount_image(/*fs=*/0x200000c0, /*dir=*/0x20000040, /*flags=MS_NODEV*/ 4,
                  /*opts=*/0x20000000, /*chdir=*/1, /*size=*/0x4c7,
                  /*img=*/0x20000a00);
  memcpy((void*)0x20000100, "./file0\000", 8);
  memcpy((void*)0x20000180, "trusted.overlay.upper\000", 22);
  syscall(__NR_setxattr, /*path=*/0x20000100ul, /*name=*/0x20000180ul,
          /*val=*/0x200001c0ul, /*size=*/0x2000ul, /*flags=*/0ul);
  return 0;
}
