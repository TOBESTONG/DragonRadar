// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x20000040, "ext4\000", 5);
  memcpy((void*)0x20000500, "./file1\000", 8);
  *(uint8_t*)0x20000540 = 0;
  memcpy(
      (void*)0x20000580,
      "\x78\x9c\xec\xdd\x51\x6b\x63\x59\x1d\x00\xf0\xff\xbd\x6d\xd6\xce\x4c\xd7"
      "\x66\x55\x44\x17\x5c\x17\x77\xa5\x5d\x74\x92\x76\xeb\xee\x14\x91\x71\x04"
      "\xd1\xa7\x01\x75\x7c\xaf\xb5\x4d\x4b\x69\xda\x94\x26\x9d\x99\x96\x41\x3b"
      "\xf8\x01\x04\x11\x15\x7c\xf2\xc9\x17\xc1\x0f\x20\xc8\x7c\x04\x11\x06\xf4"
      "\x5d\x46\x51\x44\x3b\xfa\xe0\x83\xce\x95\xdc\xdc\x8c\x9d\x4e\xd2\x56\x26"
      "\x6d\x86\xf6\xf7\x83\xd3\x9c\x73\x4f\x92\xff\xff\xa4\xe4\xe6\x9e\xdc\xc3"
      "\x4d\x00\x17\xd6\x9b\x11\x71\x23\x22\x46\x22\xe2\x9d\x88\x98\x28\xb6\xa7"
      "\x45\x99\x6f\x37\xf6\x3a\xf7\x7b\xbc\x7f\x6f\xb1\x5d\x92\xc8\xb2\x5b\x7f"
      "\x4b\x22\x29\xb6\x75\x9f\xab\xdd\x1e\x8d\x88\x2b\x9d\x87\xc4\x58\x44\x7c"
      "\xe3\xab\x11\xdf\x4e\x9e\x8f\xdb\xdc\xd9\x5d\x5b\xa8\xd7\x6b\x5b\x45\xbb"
      "\xda\x5a\xdf\xac\x36\x77\x76\xaf\xae\xae\x2f\xac\xd4\x56\x6a\x1b\xb3\xb3"
      "\x33\xef\xcf\x5d\x9b\x7b\x6f\x6e\x3a\x2b\xbc\xd0\x38\xcb\x11\x71\xfd\xcb"
      "\x7f\xfa\xd1\xf7\x7f\xfe\x95\xeb\xbf\xfe\xec\x9d\x3f\xcc\xff\x65\xea\x3b"
      "\xed\xb4\xbe\xf0\xd1\x4e\xff\xc1\x71\x0c\x52\x67\xe8\xa5\xfc\xb5\xe8\x6a"
      "\xbf\x46\x5b\xa7\x11\x6c\x08\x46\x8a\xf1\x94\x86\x9d\x08\x00\x00\x27\x32"
      "\x15\x11\x1f\x8a\x88\x4f\xe5\xc7\xff\x13\x31\x92\x1f\xcd\x01\x00\x00\x00"
      "\xe7\x49\xf6\xc5\xf1\xf8\x77\x12\x91\x01\x00\x00\x00\xe7\x56\x1a\x11\xe3"
      "\x91\xa4\x95\x62\xbd\xef\x78\xa4\x69\xa5\xd2\x59\xc3\xfb\x91\xb8\x9c\xd6"
      "\x1b\xcd\xd6\x67\x96\x1b\xdb\x1b\x4b\xed\xbe\x88\x72\x94\xd2\xe5\xd5\x7a"
      "\x6d\xba\x58\x2b\x5c\x8e\x52\xd2\x6e\xcf\x14\x6b\x6c\xbb\xed\x77\x0f\xb5"
      "\x67\x23\xe2\xb5\x88\xf8\xe1\xc4\xa5\xbc\x5d\x59\x6c\xd4\x97\x86\xfd\xe5"
      "\x07\x00\x00\x00\x5c\x10\x57\x0e\xcd\xff\xff\x39\x91\xe6\x75\x00\x00\x00"
      "\xe0\x9c\x29\x0f\x3b\x01\x00\x00\x00\xe0\xd4\x99\xff\x03\x00\x00\xc0\xf9"
      "\x67\xfe\x0f\x00\x00\x00\xe7\xda\xd7\x6e\xde\x6c\x97\xac\xfb\xfb\xd7\x4b"
      "\xb7\x77\xb6\xd7\x1a\xb7\xaf\x2e\xd5\x9a\x6b\x95\xf5\xed\xc5\xca\x62\x63"
      "\x6b\xb3\xb2\xd2\x68\xac\xe4\xd7\xec\x5b\x3f\xee\xf9\xea\x8d\xc6\xe6\xe7"
      "\x62\x63\xfb\x6e\xb5\x55\x6b\xb6\xaa\xcd\x9d\xdd\xf9\xf5\xc6\xf6\x46\x6b"
      "\x7e\xf5\x99\x9f\xc0\x06\x00\x00\x00\xce\xd0\x6b\x9f\x7c\xf0\xfb\x24\x22"
      "\xf6\x3e\x7f\x29\x2f\x51\x5c\x07\x10\xe0\x19\x7f\x1c\x76\x02\xc0\x20\x8d"
      "\x0c\x3b\x01\x60\x68\x46\x87\x9d\x00\x30\x34\xa5\x61\x27\x00\x0c\x5d\x72"
      "\x4c\x7f\xdf\xc5\x3b\xbf\x19\x7c\x2e\x00\x00\xc0\xe9\x98\xfc\xf8\xf3\xe7"
      "\xff\x5f\xe9\x74\x3d\x72\x6e\x00\xce\x37\x6b\x7d\x00\xe0\xe2\x71\xfe\x1f"
      "\x2e\xae\x92\x15\x80\x70\xe1\x7d\xf0\x98\xfe\x17\x3f\xff\x9f\x65\xff\x57"
      "\x42\x00\x00\xc0\xc0\x8d\xe7\x25\x49\x2b\xc5\xb9\xc0\xf1\x48\xd3\x4a\x25"
      "\xe2\xd5\xfc\x67\x01\x4a\xc9\xf2\x6a\xbd\x36\x5d\xcc\x0f\x7e\x37\x51\xfa"
      "\x40\xbb\x3d\x93\x3f\x32\x39\x76\xcd\x30\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x91\x65\x49\x64\x00\x00"
      "\x00\xc0\xb9\x16\x91\xfe\x39\xc9\xaf\xe6\x1f\x31\x39\xf1\xf6\xf8\xe1\xef"
      "\x07\x5e\x49\xfe\x35\x91\xdf\x46\xc4\x9d\x9f\xde\xfa\xf1\xdd\x85\x56\x6b"
      "\x6b\xa6\xbd\xfd\xef\x4f\xb7\xb7\x7e\x52\x6c\x7f\x77\x18\xdf\x60\x00\x00"
      "\x00\x00\x87\x75\xe7\xe9\xdd\x79\x3c\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\xd2\xe3\xfd\x7b\x8b\x79\x89"
      "\x58\x3c\xcb\xb8\x7f\xfd\x52\x44\x94\x0f\xc4\xdf\xbf\x57\xc4\x1f\x8d\xb1"
      "\xfc\x76\x2c\x4a\x11\x71\xf9\x1f\x49\x8c\x1e\x78\x5c\x12\x11\x23\x03\x88"
      "\xbf\x77\x3f\x22\x3e\xd6\x2b\x7e\x12\x4f\xb2\x2c\x2b\x17\x59\xf4\x8a\x7f"
      "\xe9\x94\xe3\x97\xf3\x97\xa6\x77\xfc\x34\x22\xae\x0c\x20\x3e\x5c\x64\x0f"
      "\xda\xfb\x9f\x1b\xbd\xde\x7f\x69\xbc\x99\xdf\xf6\x7e\xff\x8d\x16\xe5\x45"
      "\xf5\xdf\xff\xa5\x4f\xf7\x7f\x23\x7d\xf6\x3f\xaf\x9e\x30\xc6\xeb\x0f\x7f"
      "\x59\xed\x1b\xff\x7e\xc4\xeb\xa3\xbd\xf7\x3f\xdd\xf8\x49\x9f\xf8\x6f\x9d"
      "\x30\xfe\xb7\xbe\xb9\xbb\xdb\xaf\x2f\xfb\x59\xc4\x64\xf4\x8e\x7f\x30\x56"
      "\xb5\xb5\xbe\x59\x6d\xee\xec\x5e\x5d\x5d\x5f\x58\xa9\xad\xd4\x36\x66\x67"
      "\x67\xde\x9f\xbb\x36\xf7\xde\xdc\x74\x75\x79\xb5\x5e\x2b\xfe\xf6\x8c\xf1"
      "\x83\x4f\xfc\xea\xc9\x51\xe3\xbf\xdc\x27\x7e\xf9\x98\xf1\xbf\x7d\xc2\xf1"
      "\xff\xe7\xe1\xdd\xfd\x0f\x77\xaa\xa5\x5e\xf1\xa7\xde\xea\x15\x3f\xff\x58"
      "\xe8\x19\x3f\x2d\x3e\xfb\x3e\x5d\xd4\xdb\xfd\x93\xdd\xfa\x5e\xa7\x7e\xd0"
      "\x1b\xbf\xf8\xed\x1b\x47\x8d\x7f\xa9\xcf\xf8\x7b\xfc\xff\xc7\x0e\x8e\x7f"
      "\xea\x84\xe3\x7f\xe7\xeb\xdf\x7b\x74\xc2\xbb\x02\x00\x67\xa0\xb9\xb3\xbb"
      "\xb6\x50\xaf\xd7\xb6\x54\x54\xce\xba\xd2\x3d\x1a\xae\xd7\xb6\xb2\xef\x76"
      "\xaa\x2f\x47\x62\xdd\x4a\xf6\x72\xa4\x31\xe8\x4a\x77\x22\x71\xe4\x9d\x87"
      "\xb5\x47\x02\x00\x00\x4e\xcb\xff\x0e\xfa\x87\x9d\x09\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5c\x5c\x67\x71\xc9\xb1\xc3\x31"
      "\xf7\x86\x33\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x80\x23\xfd\x37\x00\x00\xff\xff\xd5\x63"
      "\xd8\x5e",
      1244);
  syz_mount_image(/*fs=*/0x20000040, /*dir=*/0x20000500,
                  /*flags=MS_LAZYTIME*/ 0x2000000, /*opts=*/0x20000540,
                  /*chdir=*/1, /*size=*/0x4dc, /*img=*/0x20000580);
  return 0;
}
