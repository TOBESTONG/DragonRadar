// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <arpa/inet.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <net/if.h>
#include <net/if_arp.h>
#include <netinet/in.h>
#include <sched.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/resource.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <sys/wait.h>
#include <unistd.h>

#include <linux/capability.h>
#include <linux/genetlink.h>
#include <linux/if_addr.h>
#include <linux/if_ether.h>
#include <linux/if_link.h>
#include <linux/if_tun.h>
#include <linux/in6.h>
#include <linux/ip.h>
#include <linux/loop.h>
#include <linux/neighbour.h>
#include <linux/net.h>
#include <linux/netlink.h>
#include <linux/rtnetlink.h>
#include <linux/tcp.h>
#include <linux/veth.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

static __thread int clone_ongoing;
static __thread int skip_segv;
static __thread jmp_buf segv_env;

static void segv_handler(int sig, siginfo_t* info, void* ctx)
{
  if (__atomic_load_n(&clone_ongoing, __ATOMIC_RELAXED) != 0) {
    exit(sig);
  }
  uintptr_t addr = (uintptr_t)info->si_addr;
  const uintptr_t prog_start = 1 << 20;
  const uintptr_t prog_end = 100 << 20;
  int skip = __atomic_load_n(&skip_segv, __ATOMIC_RELAXED) != 0;
  int valid = addr < prog_start || addr > prog_end;
  if (skip && valid) {
    _longjmp(segv_env, 1);
  }
  exit(sig);
}

static void install_segv_handler(void)
{
  struct sigaction sa;
  memset(&sa, 0, sizeof(sa));
  sa.sa_handler = SIG_IGN;
  syscall(SYS_rt_sigaction, 0x20, &sa, NULL, 8);
  syscall(SYS_rt_sigaction, 0x21, &sa, NULL, 8);
  memset(&sa, 0, sizeof(sa));
  sa.sa_sigaction = segv_handler;
  sa.sa_flags = SA_NODEFER | SA_SIGINFO;
  sigaction(SIGSEGV, &sa, NULL);
  sigaction(SIGBUS, &sa, NULL);
}

#define NONFAILING(...)                                                        \
  ({                                                                           \
    int ok = 1;                                                                \
    __atomic_fetch_add(&skip_segv, 1, __ATOMIC_SEQ_CST);                       \
    if (_setjmp(segv_env) == 0) {                                              \
      __VA_ARGS__;                                                             \
    } else                                                                     \
      ok = 0;                                                                  \
    __atomic_fetch_sub(&skip_segv, 1, __ATOMIC_SEQ_CST);                       \
    ok;                                                                        \
  })

static void use_temporary_dir(void)
{
  char tmpdir_template[] = "./syzkaller.XXXXXX";
  char* tmpdir = mkdtemp(tmpdir_template);
  if (!tmpdir)
    exit(1);
  if (chmod(tmpdir, 0777))
    exit(1);
  if (chdir(tmpdir))
    exit(1);
}

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

struct nlmsg {
  char* pos;
  int nesting;
  struct nlattr* nested[8];
  char buf[4096];
};

static void netlink_init(struct nlmsg* nlmsg, int typ, int flags,
                         const void* data, int size)
{
  memset(nlmsg, 0, sizeof(*nlmsg));
  struct nlmsghdr* hdr = (struct nlmsghdr*)nlmsg->buf;
  hdr->nlmsg_type = typ;
  hdr->nlmsg_flags = NLM_F_REQUEST | NLM_F_ACK | flags;
  memcpy(hdr + 1, data, size);
  nlmsg->pos = (char*)(hdr + 1) + NLMSG_ALIGN(size);
}

static void netlink_attr(struct nlmsg* nlmsg, int typ, const void* data,
                         int size)
{
  struct nlattr* attr = (struct nlattr*)nlmsg->pos;
  attr->nla_len = sizeof(*attr) + size;
  attr->nla_type = typ;
  if (size > 0)
    memcpy(attr + 1, data, size);
  nlmsg->pos += NLMSG_ALIGN(attr->nla_len);
}

static void netlink_nest(struct nlmsg* nlmsg, int typ)
{
  struct nlattr* attr = (struct nlattr*)nlmsg->pos;
  attr->nla_type = typ;
  nlmsg->pos += sizeof(*attr);
  nlmsg->nested[nlmsg->nesting++] = attr;
}

static void netlink_done(struct nlmsg* nlmsg)
{
  struct nlattr* attr = nlmsg->nested[--nlmsg->nesting];
  attr->nla_len = nlmsg->pos - (char*)attr;
}

static int netlink_send_ext(struct nlmsg* nlmsg, int sock, uint16_t reply_type,
                            int* reply_len, bool dofail)
{
  if (nlmsg->pos > nlmsg->buf + sizeof(nlmsg->buf) || nlmsg->nesting)
    exit(1);
  struct nlmsghdr* hdr = (struct nlmsghdr*)nlmsg->buf;
  hdr->nlmsg_len = nlmsg->pos - nlmsg->buf;
  struct sockaddr_nl addr;
  memset(&addr, 0, sizeof(addr));
  addr.nl_family = AF_NETLINK;
  ssize_t n = sendto(sock, nlmsg->buf, hdr->nlmsg_len, 0,
                     (struct sockaddr*)&addr, sizeof(addr));
  if (n != (ssize_t)hdr->nlmsg_len) {
    if (dofail)
      exit(1);
    return -1;
  }
  n = recv(sock, nlmsg->buf, sizeof(nlmsg->buf), 0);
  if (reply_len)
    *reply_len = 0;
  if (n < 0) {
    if (dofail)
      exit(1);
    return -1;
  }
  if (n < (ssize_t)sizeof(struct nlmsghdr)) {
    errno = EINVAL;
    if (dofail)
      exit(1);
    return -1;
  }
  if (hdr->nlmsg_type == NLMSG_DONE)
    return 0;
  if (reply_len && hdr->nlmsg_type == reply_type) {
    *reply_len = n;
    return 0;
  }
  if (n < (ssize_t)(sizeof(struct nlmsghdr) + sizeof(struct nlmsgerr))) {
    errno = EINVAL;
    if (dofail)
      exit(1);
    return -1;
  }
  if (hdr->nlmsg_type != NLMSG_ERROR) {
    errno = EINVAL;
    if (dofail)
      exit(1);
    return -1;
  }
  errno = -((struct nlmsgerr*)(hdr + 1))->error;
  return -errno;
}

static int netlink_send(struct nlmsg* nlmsg, int sock)
{
  return netlink_send_ext(nlmsg, sock, 0, NULL, true);
}

static int netlink_query_family_id(struct nlmsg* nlmsg, int sock,
                                   const char* family_name, bool dofail)
{
  struct genlmsghdr genlhdr;
  memset(&genlhdr, 0, sizeof(genlhdr));
  genlhdr.cmd = CTRL_CMD_GETFAMILY;
  netlink_init(nlmsg, GENL_ID_CTRL, 0, &genlhdr, sizeof(genlhdr));
  netlink_attr(nlmsg, CTRL_ATTR_FAMILY_NAME, family_name,
               strnlen(family_name, GENL_NAMSIZ - 1) + 1);
  int n = 0;
  int err = netlink_send_ext(nlmsg, sock, GENL_ID_CTRL, &n, dofail);
  if (err < 0) {
    return -1;
  }
  uint16_t id = 0;
  struct nlattr* attr = (struct nlattr*)(nlmsg->buf + NLMSG_HDRLEN +
                                         NLMSG_ALIGN(sizeof(genlhdr)));
  for (; (char*)attr < nlmsg->buf + n;
       attr = (struct nlattr*)((char*)attr + NLMSG_ALIGN(attr->nla_len))) {
    if (attr->nla_type == CTRL_ATTR_FAMILY_ID) {
      id = *(uint16_t*)(attr + 1);
      break;
    }
  }
  if (!id) {
    errno = EINVAL;
    return -1;
  }
  recv(sock, nlmsg->buf, sizeof(nlmsg->buf), 0);
  return id;
}

static int netlink_next_msg(struct nlmsg* nlmsg, unsigned int offset,
                            unsigned int total_len)
{
  struct nlmsghdr* hdr = (struct nlmsghdr*)(nlmsg->buf + offset);
  if (offset == total_len || offset + hdr->nlmsg_len > total_len)
    return -1;
  return hdr->nlmsg_len;
}

static void netlink_add_device_impl(struct nlmsg* nlmsg, const char* type,
                                    const char* name, bool up)
{
  struct ifinfomsg hdr;
  memset(&hdr, 0, sizeof(hdr));
  if (up)
    hdr.ifi_flags = hdr.ifi_change = IFF_UP;
  netlink_init(nlmsg, RTM_NEWLINK, NLM_F_EXCL | NLM_F_CREATE, &hdr,
               sizeof(hdr));
  if (name)
    netlink_attr(nlmsg, IFLA_IFNAME, name, strlen(name));
  netlink_nest(nlmsg, IFLA_LINKINFO);
  netlink_attr(nlmsg, IFLA_INFO_KIND, type, strlen(type));
}

static void netlink_add_device(struct nlmsg* nlmsg, int sock, const char* type,
                               const char* name)
{
  netlink_add_device_impl(nlmsg, type, name, false);
  netlink_done(nlmsg);
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

static void netlink_add_veth(struct nlmsg* nlmsg, int sock, const char* name,
                             const char* peer)
{
  netlink_add_device_impl(nlmsg, "veth", name, false);
  netlink_nest(nlmsg, IFLA_INFO_DATA);
  netlink_nest(nlmsg, VETH_INFO_PEER);
  nlmsg->pos += sizeof(struct ifinfomsg);
  netlink_attr(nlmsg, IFLA_IFNAME, peer, strlen(peer));
  netlink_done(nlmsg);
  netlink_done(nlmsg);
  netlink_done(nlmsg);
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

static void netlink_add_xfrm(struct nlmsg* nlmsg, int sock, const char* name)
{
  netlink_add_device_impl(nlmsg, "xfrm", name, true);
  netlink_nest(nlmsg, IFLA_INFO_DATA);
  int if_id = 1;
  netlink_attr(nlmsg, 2, &if_id, sizeof(if_id));
  netlink_done(nlmsg);
  netlink_done(nlmsg);
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

static void netlink_add_hsr(struct nlmsg* nlmsg, int sock, const char* name,
                            const char* slave1, const char* slave2)
{
  netlink_add_device_impl(nlmsg, "hsr", name, false);
  netlink_nest(nlmsg, IFLA_INFO_DATA);
  int ifindex1 = if_nametoindex(slave1);
  netlink_attr(nlmsg, IFLA_HSR_SLAVE1, &ifindex1, sizeof(ifindex1));
  int ifindex2 = if_nametoindex(slave2);
  netlink_attr(nlmsg, IFLA_HSR_SLAVE2, &ifindex2, sizeof(ifindex2));
  netlink_done(nlmsg);
  netlink_done(nlmsg);
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

static void netlink_add_linked(struct nlmsg* nlmsg, int sock, const char* type,
                               const char* name, const char* link)
{
  netlink_add_device_impl(nlmsg, type, name, false);
  netlink_done(nlmsg);
  int ifindex = if_nametoindex(link);
  netlink_attr(nlmsg, IFLA_LINK, &ifindex, sizeof(ifindex));
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

static void netlink_add_vlan(struct nlmsg* nlmsg, int sock, const char* name,
                             const char* link, uint16_t id, uint16_t proto)
{
  netlink_add_device_impl(nlmsg, "vlan", name, false);
  netlink_nest(nlmsg, IFLA_INFO_DATA);
  netlink_attr(nlmsg, IFLA_VLAN_ID, &id, sizeof(id));
  netlink_attr(nlmsg, IFLA_VLAN_PROTOCOL, &proto, sizeof(proto));
  netlink_done(nlmsg);
  netlink_done(nlmsg);
  int ifindex = if_nametoindex(link);
  netlink_attr(nlmsg, IFLA_LINK, &ifindex, sizeof(ifindex));
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

static void netlink_add_macvlan(struct nlmsg* nlmsg, int sock, const char* name,
                                const char* link)
{
  netlink_add_device_impl(nlmsg, "macvlan", name, false);
  netlink_nest(nlmsg, IFLA_INFO_DATA);
  uint32_t mode = MACVLAN_MODE_BRIDGE;
  netlink_attr(nlmsg, IFLA_MACVLAN_MODE, &mode, sizeof(mode));
  netlink_done(nlmsg);
  netlink_done(nlmsg);
  int ifindex = if_nametoindex(link);
  netlink_attr(nlmsg, IFLA_LINK, &ifindex, sizeof(ifindex));
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

static void netlink_add_geneve(struct nlmsg* nlmsg, int sock, const char* name,
                               uint32_t vni, struct in_addr* addr4,
                               struct in6_addr* addr6)
{
  netlink_add_device_impl(nlmsg, "geneve", name, false);
  netlink_nest(nlmsg, IFLA_INFO_DATA);
  netlink_attr(nlmsg, IFLA_GENEVE_ID, &vni, sizeof(vni));
  if (addr4)
    netlink_attr(nlmsg, IFLA_GENEVE_REMOTE, addr4, sizeof(*addr4));
  if (addr6)
    netlink_attr(nlmsg, IFLA_GENEVE_REMOTE6, addr6, sizeof(*addr6));
  netlink_done(nlmsg);
  netlink_done(nlmsg);
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

#define IFLA_IPVLAN_FLAGS 2
#define IPVLAN_MODE_L3S 2
#undef IPVLAN_F_VEPA
#define IPVLAN_F_VEPA 2

static void netlink_add_ipvlan(struct nlmsg* nlmsg, int sock, const char* name,
                               const char* link, uint16_t mode, uint16_t flags)
{
  netlink_add_device_impl(nlmsg, "ipvlan", name, false);
  netlink_nest(nlmsg, IFLA_INFO_DATA);
  netlink_attr(nlmsg, IFLA_IPVLAN_MODE, &mode, sizeof(mode));
  netlink_attr(nlmsg, IFLA_IPVLAN_FLAGS, &flags, sizeof(flags));
  netlink_done(nlmsg);
  netlink_done(nlmsg);
  int ifindex = if_nametoindex(link);
  netlink_attr(nlmsg, IFLA_LINK, &ifindex, sizeof(ifindex));
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

static void netlink_device_change(struct nlmsg* nlmsg, int sock,
                                  const char* name, bool up, const char* master,
                                  const void* mac, int macsize,
                                  const char* new_name)
{
  struct ifinfomsg hdr;
  memset(&hdr, 0, sizeof(hdr));
  if (up)
    hdr.ifi_flags = hdr.ifi_change = IFF_UP;
  hdr.ifi_index = if_nametoindex(name);
  netlink_init(nlmsg, RTM_NEWLINK, 0, &hdr, sizeof(hdr));
  if (new_name)
    netlink_attr(nlmsg, IFLA_IFNAME, new_name, strlen(new_name));
  if (master) {
    int ifindex = if_nametoindex(master);
    netlink_attr(nlmsg, IFLA_MASTER, &ifindex, sizeof(ifindex));
  }
  if (macsize)
    netlink_attr(nlmsg, IFLA_ADDRESS, mac, macsize);
  int err = netlink_send(nlmsg, sock);
  if (err < 0) {
  }
}

static int netlink_add_addr(struct nlmsg* nlmsg, int sock, const char* dev,
                            const void* addr, int addrsize)
{
  struct ifaddrmsg hdr;
  memset(&hdr, 0, sizeof(hdr));
  hdr.ifa_family = addrsize == 4 ? AF_INET : AF_INET6;
  hdr.ifa_prefixlen = addrsize == 4 ? 24 : 120;
  hdr.ifa_scope = RT_SCOPE_UNIVERSE;
  hdr.ifa_index = if_nametoindex(dev);
  netlink_init(nlmsg, RTM_NEWADDR, NLM_F_CREATE | NLM_F_REPLACE, &hdr,
               sizeof(hdr));
  netlink_attr(nlmsg, IFA_LOCAL, addr, addrsize);
  netlink_attr(nlmsg, IFA_ADDRESS, addr, addrsize);
  return netlink_send(nlmsg, sock);
}

static void netlink_add_addr4(struct nlmsg* nlmsg, int sock, const char* dev,
                              const char* addr)
{
  struct in_addr in_addr;
  inet_pton(AF_INET, addr, &in_addr);
  int err = netlink_add_addr(nlmsg, sock, dev, &in_addr, sizeof(in_addr));
  if (err < 0) {
  }
}

static void netlink_add_addr6(struct nlmsg* nlmsg, int sock, const char* dev,
                              const char* addr)
{
  struct in6_addr in6_addr;
  inet_pton(AF_INET6, addr, &in6_addr);
  int err = netlink_add_addr(nlmsg, sock, dev, &in6_addr, sizeof(in6_addr));
  if (err < 0) {
  }
}

static struct nlmsg nlmsg;

#define DEVLINK_FAMILY_NAME "devlink"

#define DEVLINK_CMD_PORT_GET 5
#define DEVLINK_ATTR_BUS_NAME 1
#define DEVLINK_ATTR_DEV_NAME 2
#define DEVLINK_ATTR_NETDEV_NAME 7

static struct nlmsg nlmsg2;

static void initialize_devlink_ports(const char* bus_name, const char* dev_name,
                                     const char* netdev_prefix)
{
  struct genlmsghdr genlhdr;
  int len, total_len, id, err, offset;
  uint16_t netdev_index;
  int sock = socket(AF_NETLINK, SOCK_RAW, NETLINK_GENERIC);
  if (sock == -1)
    exit(1);
  int rtsock = socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
  if (rtsock == -1)
    exit(1);
  id = netlink_query_family_id(&nlmsg, sock, DEVLINK_FAMILY_NAME, true);
  if (id == -1)
    goto error;
  memset(&genlhdr, 0, sizeof(genlhdr));
  genlhdr.cmd = DEVLINK_CMD_PORT_GET;
  netlink_init(&nlmsg, id, NLM_F_DUMP, &genlhdr, sizeof(genlhdr));
  netlink_attr(&nlmsg, DEVLINK_ATTR_BUS_NAME, bus_name, strlen(bus_name) + 1);
  netlink_attr(&nlmsg, DEVLINK_ATTR_DEV_NAME, dev_name, strlen(dev_name) + 1);
  err = netlink_send_ext(&nlmsg, sock, id, &total_len, true);
  if (err < 0) {
    goto error;
  }
  offset = 0;
  netdev_index = 0;
  while ((len = netlink_next_msg(&nlmsg, offset, total_len)) != -1) {
    struct nlattr* attr = (struct nlattr*)(nlmsg.buf + offset + NLMSG_HDRLEN +
                                           NLMSG_ALIGN(sizeof(genlhdr)));
    for (; (char*)attr < nlmsg.buf + offset + len;
         attr = (struct nlattr*)((char*)attr + NLMSG_ALIGN(attr->nla_len))) {
      if (attr->nla_type == DEVLINK_ATTR_NETDEV_NAME) {
        char* port_name;
        char netdev_name[IFNAMSIZ];
        port_name = (char*)(attr + 1);
        snprintf(netdev_name, sizeof(netdev_name), "%s%d", netdev_prefix,
                 netdev_index);
        netlink_device_change(&nlmsg2, rtsock, port_name, true, 0, 0, 0,
                              netdev_name);
        break;
      }
    }
    offset += len;
    netdev_index++;
  }
error:
  close(rtsock);
  close(sock);
}

#define DEV_IPV4 "172.20.20.%d"
#define DEV_IPV6 "fe80::%02x"
#define DEV_MAC 0x00aaaaaaaaaa

static void netdevsim_add(unsigned int addr, unsigned int port_count)
{
  write_file("/sys/bus/netdevsim/del_device", "%u", addr);
  if (write_file("/sys/bus/netdevsim/new_device", "%u %u", addr, port_count)) {
    char buf[32];
    snprintf(buf, sizeof(buf), "netdevsim%d", addr);
    initialize_devlink_ports("netdevsim", buf, "netdevsim");
  }
}

#define WG_GENL_NAME "wireguard"
enum wg_cmd {
  WG_CMD_GET_DEVICE,
  WG_CMD_SET_DEVICE,
};
enum wgdevice_attribute {
  WGDEVICE_A_UNSPEC,
  WGDEVICE_A_IFINDEX,
  WGDEVICE_A_IFNAME,
  WGDEVICE_A_PRIVATE_KEY,
  WGDEVICE_A_PUBLIC_KEY,
  WGDEVICE_A_FLAGS,
  WGDEVICE_A_LISTEN_PORT,
  WGDEVICE_A_FWMARK,
  WGDEVICE_A_PEERS,
};
enum wgpeer_attribute {
  WGPEER_A_UNSPEC,
  WGPEER_A_PUBLIC_KEY,
  WGPEER_A_PRESHARED_KEY,
  WGPEER_A_FLAGS,
  WGPEER_A_ENDPOINT,
  WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL,
  WGPEER_A_LAST_HANDSHAKE_TIME,
  WGPEER_A_RX_BYTES,
  WGPEER_A_TX_BYTES,
  WGPEER_A_ALLOWEDIPS,
  WGPEER_A_PROTOCOL_VERSION,
};
enum wgallowedip_attribute {
  WGALLOWEDIP_A_UNSPEC,
  WGALLOWEDIP_A_FAMILY,
  WGALLOWEDIP_A_IPADDR,
  WGALLOWEDIP_A_CIDR_MASK,
};

static void netlink_wireguard_setup(void)
{
  const char ifname_a[] = "wg0";
  const char ifname_b[] = "wg1";
  const char ifname_c[] = "wg2";
  const char private_a[] =
      "\xa0\x5c\xa8\x4f\x6c\x9c\x8e\x38\x53\xe2\xfd\x7a\x70\xae\x0f\xb2\x0f\xa1"
      "\x52\x60\x0c\xb0\x08\x45\x17\x4f\x08\x07\x6f\x8d\x78\x43";
  const char private_b[] =
      "\xb0\x80\x73\xe8\xd4\x4e\x91\xe3\xda\x92\x2c\x22\x43\x82\x44\xbb\x88\x5c"
      "\x69\xe2\x69\xc8\xe9\xd8\x35\xb1\x14\x29\x3a\x4d\xdc\x6e";
  const char private_c[] =
      "\xa0\xcb\x87\x9a\x47\xf5\xbc\x64\x4c\x0e\x69\x3f\xa6\xd0\x31\xc7\x4a\x15"
      "\x53\xb6\xe9\x01\xb9\xff\x2f\x51\x8c\x78\x04\x2f\xb5\x42";
  const char public_a[] =
      "\x97\x5c\x9d\x81\xc9\x83\xc8\x20\x9e\xe7\x81\x25\x4b\x89\x9f\x8e\xd9\x25"
      "\xae\x9f\x09\x23\xc2\x3c\x62\xf5\x3c\x57\xcd\xbf\x69\x1c";
  const char public_b[] =
      "\xd1\x73\x28\x99\xf6\x11\xcd\x89\x94\x03\x4d\x7f\x41\x3d\xc9\x57\x63\x0e"
      "\x54\x93\xc2\x85\xac\xa4\x00\x65\xcb\x63\x11\xbe\x69\x6b";
  const char public_c[] =
      "\xf4\x4d\xa3\x67\xa8\x8e\xe6\x56\x4f\x02\x02\x11\x45\x67\x27\x08\x2f\x5c"
      "\xeb\xee\x8b\x1b\xf5\xeb\x73\x37\x34\x1b\x45\x9b\x39\x22";
  const uint16_t listen_a = 20001;
  const uint16_t listen_b = 20002;
  const uint16_t listen_c = 20003;
  const uint16_t af_inet = AF_INET;
  const uint16_t af_inet6 = AF_INET6;
  const struct sockaddr_in endpoint_b_v4 = {
      .sin_family = AF_INET,
      .sin_port = htons(listen_b),
      .sin_addr = {htonl(INADDR_LOOPBACK)}};
  const struct sockaddr_in endpoint_c_v4 = {
      .sin_family = AF_INET,
      .sin_port = htons(listen_c),
      .sin_addr = {htonl(INADDR_LOOPBACK)}};
  struct sockaddr_in6 endpoint_a_v6 = {.sin6_family = AF_INET6,
                                       .sin6_port = htons(listen_a)};
  endpoint_a_v6.sin6_addr = in6addr_loopback;
  struct sockaddr_in6 endpoint_c_v6 = {.sin6_family = AF_INET6,
                                       .sin6_port = htons(listen_c)};
  endpoint_c_v6.sin6_addr = in6addr_loopback;
  const struct in_addr first_half_v4 = {0};
  const struct in_addr second_half_v4 = {(uint32_t)htonl(128 << 24)};
  const struct in6_addr first_half_v6 = {{{0}}};
  const struct in6_addr second_half_v6 = {{{0x80}}};
  const uint8_t half_cidr = 1;
  const uint16_t persistent_keepalives[] = {1, 3, 7, 9, 14, 19};
  struct genlmsghdr genlhdr = {.cmd = WG_CMD_SET_DEVICE, .version = 1};
  int sock;
  int id, err;
  sock = socket(AF_NETLINK, SOCK_RAW, NETLINK_GENERIC);
  if (sock == -1) {
    return;
  }
  id = netlink_query_family_id(&nlmsg, sock, WG_GENL_NAME, true);
  if (id == -1)
    goto error;
  netlink_init(&nlmsg, id, 0, &genlhdr, sizeof(genlhdr));
  netlink_attr(&nlmsg, WGDEVICE_A_IFNAME, ifname_a, strlen(ifname_a) + 1);
  netlink_attr(&nlmsg, WGDEVICE_A_PRIVATE_KEY, private_a, 32);
  netlink_attr(&nlmsg, WGDEVICE_A_LISTEN_PORT, &listen_a, 2);
  netlink_nest(&nlmsg, NLA_F_NESTED | WGDEVICE_A_PEERS);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGPEER_A_PUBLIC_KEY, public_b, 32);
  netlink_attr(&nlmsg, WGPEER_A_ENDPOINT, &endpoint_b_v4,
               sizeof(endpoint_b_v4));
  netlink_attr(&nlmsg, WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL,
               &persistent_keepalives[0], 2);
  netlink_nest(&nlmsg, NLA_F_NESTED | WGPEER_A_ALLOWEDIPS);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &first_half_v4,
               sizeof(first_half_v4));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet6, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &first_half_v6,
               sizeof(first_half_v6));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGPEER_A_PUBLIC_KEY, public_c, 32);
  netlink_attr(&nlmsg, WGPEER_A_ENDPOINT, &endpoint_c_v6,
               sizeof(endpoint_c_v6));
  netlink_attr(&nlmsg, WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL,
               &persistent_keepalives[1], 2);
  netlink_nest(&nlmsg, NLA_F_NESTED | WGPEER_A_ALLOWEDIPS);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &second_half_v4,
               sizeof(second_half_v4));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet6, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &second_half_v6,
               sizeof(second_half_v6));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  err = netlink_send(&nlmsg, sock);
  if (err < 0) {
  }
  netlink_init(&nlmsg, id, 0, &genlhdr, sizeof(genlhdr));
  netlink_attr(&nlmsg, WGDEVICE_A_IFNAME, ifname_b, strlen(ifname_b) + 1);
  netlink_attr(&nlmsg, WGDEVICE_A_PRIVATE_KEY, private_b, 32);
  netlink_attr(&nlmsg, WGDEVICE_A_LISTEN_PORT, &listen_b, 2);
  netlink_nest(&nlmsg, NLA_F_NESTED | WGDEVICE_A_PEERS);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGPEER_A_PUBLIC_KEY, public_a, 32);
  netlink_attr(&nlmsg, WGPEER_A_ENDPOINT, &endpoint_a_v6,
               sizeof(endpoint_a_v6));
  netlink_attr(&nlmsg, WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL,
               &persistent_keepalives[2], 2);
  netlink_nest(&nlmsg, NLA_F_NESTED | WGPEER_A_ALLOWEDIPS);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &first_half_v4,
               sizeof(first_half_v4));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet6, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &first_half_v6,
               sizeof(first_half_v6));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGPEER_A_PUBLIC_KEY, public_c, 32);
  netlink_attr(&nlmsg, WGPEER_A_ENDPOINT, &endpoint_c_v4,
               sizeof(endpoint_c_v4));
  netlink_attr(&nlmsg, WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL,
               &persistent_keepalives[3], 2);
  netlink_nest(&nlmsg, NLA_F_NESTED | WGPEER_A_ALLOWEDIPS);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &second_half_v4,
               sizeof(second_half_v4));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet6, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &second_half_v6,
               sizeof(second_half_v6));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  err = netlink_send(&nlmsg, sock);
  if (err < 0) {
  }
  netlink_init(&nlmsg, id, 0, &genlhdr, sizeof(genlhdr));
  netlink_attr(&nlmsg, WGDEVICE_A_IFNAME, ifname_c, strlen(ifname_c) + 1);
  netlink_attr(&nlmsg, WGDEVICE_A_PRIVATE_KEY, private_c, 32);
  netlink_attr(&nlmsg, WGDEVICE_A_LISTEN_PORT, &listen_c, 2);
  netlink_nest(&nlmsg, NLA_F_NESTED | WGDEVICE_A_PEERS);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGPEER_A_PUBLIC_KEY, public_a, 32);
  netlink_attr(&nlmsg, WGPEER_A_ENDPOINT, &endpoint_a_v6,
               sizeof(endpoint_a_v6));
  netlink_attr(&nlmsg, WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL,
               &persistent_keepalives[4], 2);
  netlink_nest(&nlmsg, NLA_F_NESTED | WGPEER_A_ALLOWEDIPS);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &first_half_v4,
               sizeof(first_half_v4));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet6, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &first_half_v6,
               sizeof(first_half_v6));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGPEER_A_PUBLIC_KEY, public_b, 32);
  netlink_attr(&nlmsg, WGPEER_A_ENDPOINT, &endpoint_b_v4,
               sizeof(endpoint_b_v4));
  netlink_attr(&nlmsg, WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL,
               &persistent_keepalives[5], 2);
  netlink_nest(&nlmsg, NLA_F_NESTED | WGPEER_A_ALLOWEDIPS);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &second_half_v4,
               sizeof(second_half_v4));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_nest(&nlmsg, NLA_F_NESTED | 0);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_FAMILY, &af_inet6, 2);
  netlink_attr(&nlmsg, WGALLOWEDIP_A_IPADDR, &second_half_v6,
               sizeof(second_half_v6));
  netlink_attr(&nlmsg, WGALLOWEDIP_A_CIDR_MASK, &half_cidr, 1);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  netlink_done(&nlmsg);
  err = netlink_send(&nlmsg, sock);
  if (err < 0) {
  }

error:
  close(sock);
}

static void initialize_netdevices(void)
{
  char netdevsim[16];
  sprintf(netdevsim, "netdevsim%d", (int)procid);
  struct {
    const char* type;
    const char* dev;
  } devtypes[] = {
      {"ip6gretap", "ip6gretap0"}, {"bridge", "bridge0"}, {"vcan", "vcan0"},
      {"bond", "bond0"},           {"team", "team0"},     {"dummy", "dummy0"},
      {"nlmon", "nlmon0"},         {"caif", "caif0"},     {"batadv", "batadv0"},
      {"vxcan", "vxcan1"},         {"veth", 0},           {"wireguard", "wg0"},
      {"wireguard", "wg1"},        {"wireguard", "wg2"},
  };
  const char* devmasters[] = {"bridge", "bond", "team", "batadv"};
  struct {
    const char* name;
    int macsize;
    bool noipv6;
  } devices[] = {
      {"lo", ETH_ALEN},
      {"sit0", 0},
      {"bridge0", ETH_ALEN},
      {"vcan0", 0, true},
      {"tunl0", 0},
      {"gre0", 0},
      {"gretap0", ETH_ALEN},
      {"ip_vti0", 0},
      {"ip6_vti0", 0},
      {"ip6tnl0", 0},
      {"ip6gre0", 0},
      {"ip6gretap0", ETH_ALEN},
      {"erspan0", ETH_ALEN},
      {"bond0", ETH_ALEN},
      {"veth0", ETH_ALEN},
      {"veth1", ETH_ALEN},
      {"team0", ETH_ALEN},
      {"veth0_to_bridge", ETH_ALEN},
      {"veth1_to_bridge", ETH_ALEN},
      {"veth0_to_bond", ETH_ALEN},
      {"veth1_to_bond", ETH_ALEN},
      {"veth0_to_team", ETH_ALEN},
      {"veth1_to_team", ETH_ALEN},
      {"veth0_to_hsr", ETH_ALEN},
      {"veth1_to_hsr", ETH_ALEN},
      {"hsr0", 0},
      {"dummy0", ETH_ALEN},
      {"nlmon0", 0},
      {"vxcan0", 0, true},
      {"vxcan1", 0, true},
      {"caif0", ETH_ALEN},
      {"batadv0", ETH_ALEN},
      {netdevsim, ETH_ALEN},
      {"xfrm0", ETH_ALEN},
      {"veth0_virt_wifi", ETH_ALEN},
      {"veth1_virt_wifi", ETH_ALEN},
      {"virt_wifi0", ETH_ALEN},
      {"veth0_vlan", ETH_ALEN},
      {"veth1_vlan", ETH_ALEN},
      {"vlan0", ETH_ALEN},
      {"vlan1", ETH_ALEN},
      {"macvlan0", ETH_ALEN},
      {"macvlan1", ETH_ALEN},
      {"ipvlan0", ETH_ALEN},
      {"ipvlan1", ETH_ALEN},
      {"veth0_macvtap", ETH_ALEN},
      {"veth1_macvtap", ETH_ALEN},
      {"macvtap0", ETH_ALEN},
      {"macsec0", ETH_ALEN},
      {"veth0_to_batadv", ETH_ALEN},
      {"veth1_to_batadv", ETH_ALEN},
      {"batadv_slave_0", ETH_ALEN},
      {"batadv_slave_1", ETH_ALEN},
      {"geneve0", ETH_ALEN},
      {"geneve1", ETH_ALEN},
      {"wg0", 0},
      {"wg1", 0},
      {"wg2", 0},
  };
  int sock = socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
  if (sock == -1)
    exit(1);
  unsigned i;
  for (i = 0; i < sizeof(devtypes) / sizeof(devtypes[0]); i++)
    netlink_add_device(&nlmsg, sock, devtypes[i].type, devtypes[i].dev);
  for (i = 0; i < sizeof(devmasters) / (sizeof(devmasters[0])); i++) {
    char master[32], slave0[32], veth0[32], slave1[32], veth1[32];
    sprintf(slave0, "%s_slave_0", devmasters[i]);
    sprintf(veth0, "veth0_to_%s", devmasters[i]);
    netlink_add_veth(&nlmsg, sock, slave0, veth0);
    sprintf(slave1, "%s_slave_1", devmasters[i]);
    sprintf(veth1, "veth1_to_%s", devmasters[i]);
    netlink_add_veth(&nlmsg, sock, slave1, veth1);
    sprintf(master, "%s0", devmasters[i]);
    netlink_device_change(&nlmsg, sock, slave0, false, master, 0, 0, NULL);
    netlink_device_change(&nlmsg, sock, slave1, false, master, 0, 0, NULL);
  }
  netlink_add_xfrm(&nlmsg, sock, "xfrm0");
  netlink_device_change(&nlmsg, sock, "bridge_slave_0", true, 0, 0, 0, NULL);
  netlink_device_change(&nlmsg, sock, "bridge_slave_1", true, 0, 0, 0, NULL);
  netlink_add_veth(&nlmsg, sock, "hsr_slave_0", "veth0_to_hsr");
  netlink_add_veth(&nlmsg, sock, "hsr_slave_1", "veth1_to_hsr");
  netlink_add_hsr(&nlmsg, sock, "hsr0", "hsr_slave_0", "hsr_slave_1");
  netlink_device_change(&nlmsg, sock, "hsr_slave_0", true, 0, 0, 0, NULL);
  netlink_device_change(&nlmsg, sock, "hsr_slave_1", true, 0, 0, 0, NULL);
  netlink_add_veth(&nlmsg, sock, "veth0_virt_wifi", "veth1_virt_wifi");
  netlink_add_linked(&nlmsg, sock, "virt_wifi", "virt_wifi0",
                     "veth1_virt_wifi");
  netlink_add_veth(&nlmsg, sock, "veth0_vlan", "veth1_vlan");
  netlink_add_vlan(&nlmsg, sock, "vlan0", "veth0_vlan", 0, htons(ETH_P_8021Q));
  netlink_add_vlan(&nlmsg, sock, "vlan1", "veth0_vlan", 1, htons(ETH_P_8021AD));
  netlink_add_macvlan(&nlmsg, sock, "macvlan0", "veth1_vlan");
  netlink_add_macvlan(&nlmsg, sock, "macvlan1", "veth1_vlan");
  netlink_add_ipvlan(&nlmsg, sock, "ipvlan0", "veth0_vlan", IPVLAN_MODE_L2, 0);
  netlink_add_ipvlan(&nlmsg, sock, "ipvlan1", "veth0_vlan", IPVLAN_MODE_L3S,
                     IPVLAN_F_VEPA);
  netlink_add_veth(&nlmsg, sock, "veth0_macvtap", "veth1_macvtap");
  netlink_add_linked(&nlmsg, sock, "macvtap", "macvtap0", "veth0_macvtap");
  netlink_add_linked(&nlmsg, sock, "macsec", "macsec0", "veth1_macvtap");
  char addr[32];
  sprintf(addr, DEV_IPV4, 14 + 10);
  struct in_addr geneve_addr4;
  if (inet_pton(AF_INET, addr, &geneve_addr4) <= 0)
    exit(1);
  struct in6_addr geneve_addr6;
  if (inet_pton(AF_INET6, "fc00::01", &geneve_addr6) <= 0)
    exit(1);
  netlink_add_geneve(&nlmsg, sock, "geneve0", 0, &geneve_addr4, 0);
  netlink_add_geneve(&nlmsg, sock, "geneve1", 1, 0, &geneve_addr6);
  netdevsim_add((int)procid, 4);
  netlink_wireguard_setup();
  for (i = 0; i < sizeof(devices) / (sizeof(devices[0])); i++) {
    char addr[32];
    sprintf(addr, DEV_IPV4, i + 10);
    netlink_add_addr4(&nlmsg, sock, devices[i].name, addr);
    if (!devices[i].noipv6) {
      sprintf(addr, DEV_IPV6, i + 10);
      netlink_add_addr6(&nlmsg, sock, devices[i].name, addr);
    }
    uint64_t macaddr = DEV_MAC + ((i + 10ull) << 40);
    netlink_device_change(&nlmsg, sock, devices[i].name, true, 0, &macaddr,
                          devices[i].macsize, NULL);
  }
  close(sock);
}
static void initialize_netdevices_init(void)
{
  int sock = socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
  if (sock == -1)
    exit(1);
  struct {
    const char* type;
    int macsize;
    bool noipv6;
    bool noup;
  } devtypes[] = {
      {"nr", 7, true},
      {"rose", 5, true, true},
  };
  unsigned i;
  for (i = 0; i < sizeof(devtypes) / sizeof(devtypes[0]); i++) {
    char dev[32], addr[32];
    sprintf(dev, "%s%d", devtypes[i].type, (int)procid);
    sprintf(addr, "172.30.%d.%d", i, (int)procid + 1);
    netlink_add_addr4(&nlmsg, sock, dev, addr);
    if (!devtypes[i].noipv6) {
      sprintf(addr, "fe88::%02x:%02x", i, (int)procid + 1);
      netlink_add_addr6(&nlmsg, sock, dev, addr);
    }
    int macsize = devtypes[i].macsize;
    uint64_t macaddr = 0xbbbbbb +
                       ((unsigned long long)i << (8 * (macsize - 2))) +
                       (procid << (8 * (macsize - 1)));
    netlink_device_change(&nlmsg, sock, dev, !devtypes[i].noup, 0, &macaddr,
                          macsize, NULL);
  }
  close(sock);
}

#define MAX_FDS 30

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

static void sandbox_common_mount_tmpfs(void)
{
  write_file("/proc/sys/fs/mount-max", "100000");
  if (mkdir("./syz-tmp", 0777))
    exit(1);
  if (mount("", "./syz-tmp", "tmpfs", 0, NULL))
    exit(1);
  if (mkdir("./syz-tmp/newroot", 0777))
    exit(1);
  if (mkdir("./syz-tmp/newroot/dev", 0700))
    exit(1);
  unsigned bind_mount_flags = MS_BIND | MS_REC | MS_PRIVATE;
  if (mount("/dev", "./syz-tmp/newroot/dev", NULL, bind_mount_flags, NULL))
    exit(1);
  if (mkdir("./syz-tmp/newroot/proc", 0700))
    exit(1);
  if (mount("syz-proc", "./syz-tmp/newroot/proc", "proc", 0, NULL))
    exit(1);
  if (mkdir("./syz-tmp/newroot/selinux", 0700))
    exit(1);
  const char* selinux_path = "./syz-tmp/newroot/selinux";
  if (mount("/selinux", selinux_path, NULL, bind_mount_flags, NULL)) {
    if (errno != ENOENT)
      exit(1);
    if (mount("/sys/fs/selinux", selinux_path, NULL, bind_mount_flags, NULL) &&
        errno != ENOENT)
      exit(1);
  }
  if (mkdir("./syz-tmp/newroot/sys", 0700))
    exit(1);
  if (mount("/sys", "./syz-tmp/newroot/sys", 0, bind_mount_flags, NULL))
    exit(1);
  if (mkdir("./syz-tmp/pivot", 0777))
    exit(1);
  if (syscall(SYS_pivot_root, "./syz-tmp", "./syz-tmp/pivot")) {
    if (chdir("./syz-tmp"))
      exit(1);
  } else {
    if (chdir("/"))
      exit(1);
    if (umount2("./pivot", MNT_DETACH))
      exit(1);
  }
  if (chroot("./newroot"))
    exit(1);
  if (chdir("/"))
    exit(1);
}

static void setup_common()
{
  if (mount(0, "/sys/fs/fuse/connections", "fusectl", 0, 0)) {
  }
}

static void setup_binderfs()
{
  if (mkdir("/dev/binderfs", 0777)) {
  }
  if (mount("binder", "/dev/binderfs", "binder", 0, NULL)) {
  }
}

static void loop();

static void sandbox_common()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setsid();
  struct rlimit rlim;
  rlim.rlim_cur = rlim.rlim_max = (200 << 20);
  setrlimit(RLIMIT_AS, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 32 << 20;
  setrlimit(RLIMIT_MEMLOCK, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 136 << 20;
  setrlimit(RLIMIT_FSIZE, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 1 << 20;
  setrlimit(RLIMIT_STACK, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 128 << 20;
  setrlimit(RLIMIT_CORE, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 256;
  setrlimit(RLIMIT_NOFILE, &rlim);
  if (unshare(CLONE_NEWNS)) {
  }
  if (mount(NULL, "/", NULL, MS_REC | MS_PRIVATE, NULL)) {
  }
  if (unshare(CLONE_NEWIPC)) {
  }
  if (unshare(0x02000000)) {
  }
  if (unshare(CLONE_NEWUTS)) {
  }
  if (unshare(CLONE_SYSVSEM)) {
  }
  typedef struct {
    const char* name;
    const char* value;
  } sysctl_t;
  static const sysctl_t sysctls[] = {
      {"/proc/sys/kernel/shmmax", "16777216"},
      {"/proc/sys/kernel/shmall", "536870912"},
      {"/proc/sys/kernel/shmmni", "1024"},
      {"/proc/sys/kernel/msgmax", "8192"},
      {"/proc/sys/kernel/msgmni", "1024"},
      {"/proc/sys/kernel/msgmnb", "1024"},
      {"/proc/sys/kernel/sem", "1024 1048576 500 1024"},
  };
  unsigned i;
  for (i = 0; i < sizeof(sysctls) / sizeof(sysctls[0]); i++)
    write_file(sysctls[i].name, sysctls[i].value);
}

static int wait_for_loop(int pid)
{
  if (pid < 0)
    exit(1);
  int status = 0;
  while (waitpid(-1, &status, __WALL) != pid) {
  }
  return WEXITSTATUS(status);
}

static void drop_caps(void)
{
  struct __user_cap_header_struct cap_hdr = {};
  struct __user_cap_data_struct cap_data[2] = {};
  cap_hdr.version = _LINUX_CAPABILITY_VERSION_3;
  cap_hdr.pid = getpid();
  if (syscall(SYS_capget, &cap_hdr, &cap_data))
    exit(1);
  const int drop = (1 << CAP_SYS_PTRACE) | (1 << CAP_SYS_NICE);
  cap_data[0].effective &= ~drop;
  cap_data[0].permitted &= ~drop;
  cap_data[0].inheritable &= ~drop;
  if (syscall(SYS_capset, &cap_hdr, &cap_data))
    exit(1);
}

static int do_sandbox_none(void)
{
  if (unshare(CLONE_NEWPID)) {
  }
  int pid = fork();
  if (pid != 0)
    return wait_for_loop(pid);
  setup_common();
  sandbox_common();
  drop_caps();
  initialize_netdevices_init();
  if (unshare(CLONE_NEWNET)) {
  }
  write_file("/proc/sys/net/ipv4/ping_group_range", "0 65535");
  initialize_netdevices();
  sandbox_common_mount_tmpfs();
  setup_binderfs();
  loop();
  exit(1);
}

static void close_fds()
{
  for (int fd = 3; fd < MAX_FDS; fd++)
    close(fd);
}

static const char* setup_binfmt_misc()
{
  if (mount(0, "/proc/sys/fs/binfmt_misc", "binfmt_misc", 0, 0)) {
    return NULL;
  }
  if (!write_file("/proc/sys/fs/binfmt_misc/register",
                  ":syz0:M:0:\x01::./file0:") ||
      !write_file("/proc/sys/fs/binfmt_misc/register",
                  ":syz1:M:1:\x02::./file0:POC"))
    return "write(/proc/sys/fs/binfmt_misc/register) failed";
  return NULL;
}

uint64_t r[2] = {0xffffffffffffffff, 0xffffffffffffffff};

void loop(void)
{
  intptr_t res = 0;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  NONFAILING(memcpy((void*)0x20000580, "ext4\000", 5));
  NONFAILING(memcpy((void*)0x200005c0, "./file0\000", 8));
  NONFAILING(memcpy((void*)0x20000300, "max_dir_size_kb", 15));
  NONFAILING(*(uint8_t*)0x2000030f = 0x3d);
  NONFAILING(sprintf((char*)0x20000310, "0x%016llx", (long long)0x10001));
  NONFAILING(*(uint8_t*)0x20000322 = 0x2c);
  NONFAILING(memcpy((void*)0x20000323, "block_validity", 14));
  NONFAILING(*(uint8_t*)0x20000331 = 0x2c);
  NONFAILING(memcpy((void*)0x20000332, "nogrpid", 7));
  NONFAILING(*(uint8_t*)0x20000339 = 0x2c);
  NONFAILING(memcpy((void*)0x2000033a, "block_validity", 14));
  NONFAILING(*(uint8_t*)0x20000348 = 0x2c);
  NONFAILING(memcpy((void*)0x20000349, "debug_want_extra_isize", 22));
  NONFAILING(*(uint8_t*)0x2000035f = 0x3d);
  NONFAILING(sprintf((char*)0x20000360, "0x%016llx", (long long)6));
  NONFAILING(*(uint8_t*)0x20000372 = 0x2c);
  NONFAILING(memcpy((void*)0x20000373, "journal_ioprio", 14));
  NONFAILING(*(uint8_t*)0x20000381 = 0x3d);
  NONFAILING(sprintf((char*)0x20000382, "0x%016llx", (long long)3));
  NONFAILING(*(uint8_t*)0x20000394 = 0x2c);
  NONFAILING(memcpy((void*)0x20000395, "usrquota", 8));
  NONFAILING(*(uint8_t*)0x2000039d = 0x2c);
  NONFAILING(memcpy((void*)0x2000039e, "usrquota", 8));
  NONFAILING(*(uint8_t*)0x200003a6 = 0x2c);
  NONFAILING(*(uint8_t*)0x200003a7 = 0);
  NONFAILING(memcpy(
      (void*)0x20001bc0,
      "\x78\x9c\xec\xdd\xcf\x6f\x14\xe5\x1b\x00\xf0\xe7\xdd\xfe\xa0\x50\xbe\xdf"
      "\x16\x62\x54\x3c\x48\x13\x63\x20\x51\x5a\x5a\xc0\x10\xe3\x01\xee\xa4\xc1"
      "\x1f\xf1\xe2\xc5\x4a\x0b\x41\x0a\x34\xb4\x46\x8b\x26\x96\x04\x2f\x26\xc6"
      "\x8b\x31\x26\x9e\x3c\x88\xff\x85\x12\xb9\x72\xd2\x93\x07\x2f\x9e\x0c\x09"
      "\x51\xc3\xd1\xc4\x35\xb3\xbb\x53\xda\x32\xdb\xd2\xb2\xed\x54\xe6\xf3\x49"
      "\x96\xce\xcc\xbb\xc3\xfb\x4c\xb7\xcf\xbe\x33\xef\xbe\xef\x6c\x00\x95\x35"
      "\x94\xfd\x53\x8b\xd8\x17\x11\x33\x29\x62\x20\x2d\x2c\x96\x75\x47\xab\x70"
      "\xa8\xf9\xbc\x7b\x7f\x7d\x74\x26\x7b\xa4\xa8\xd7\x5f\xff\x23\x45\x6a\x6d"
      "\xcb\x9f\x9f\x5a\x3f\xfb\x5b\x3b\xf7\x45\xc4\x4f\x3f\xa6\xd8\xdb\xf5\x60"
      "\xbd\xb3\xf3\x57\x2f\x4c\x4c\x4f\x4f\x5d\x69\xad\x8f\xcc\x5d\x9c\x19\x99"
      "\x9d\xbf\x7a\xe8\xfc\xc5\x89\x73\x53\xe7\xa6\x2e\x8d\xbd\x34\x76\xfc\xd8"
      "\xd1\x63\xc7\x47\x0f\x77\xec\x58\x4f\x5d\x7f\xf7\xfd\x81\x4f\xc7\xdf\xfa"
      "\xf6\xeb\xbf\xd3\xe8\x77\xbf\x8e\xa7\x38\x11\xbb\x5b\x65\x4b\x8f\xa3\x53"
      "\x86\x62\xa8\xf9\x3b\xd9\xb1\xb2\x64\x30\x8e\x77\xba\xb2\x92\x74\xb5\xfe"
      "\x4e\x96\xbe\xc4\xa9\xbb\xc4\x80\x58\x97\xfc\xf5\xeb\x89\x88\xa7\x62\x20"
      "\xba\xe2\xfe\x8b\x37\x10\x9f\xbc\x5a\x6a\x70\xc0\xa6\xaa\xa7\x88\x3a\x50"
      "\x51\x49\xfe\x43\x45\xe5\xe7\x01\xf9\xb5\xfd\xca\xeb\xe0\x5a\x29\x67\x25"
      "\xc0\x56\xb8\x7b\xb2\xd9\x01\xf0\x60\xfe\x77\x37\xfb\x06\xa3\xaf\xd1\x37"
      "\xb0\xeb\x5e\x8a\xa5\xdd\x3a\x29\x22\x3a\xd1\x33\x97\xd5\x71\xfb\xd6\xf8"
      "\xf5\xb3\xb7\xc6\xaf\xc7\x26\xf5\xc3\x01\xc5\x16\xae\x45\xc4\xd3\x45\xf9"
      "\x9f\x1a\xb9\x39\xd8\xe8\xc5\xcf\xf2\xbf\xb6\x2c\xff\xb3\xf3\x82\xd3\xad"
      "\x9f\xd9\xf6\xd7\x36\x58\xff\xd0\x8a\x75\xf9\x0f\x5b\xa7\x99\xff\x7d\x1b"
      "\xca\xff\xb7\x97\xe4\xff\x3b\x1b\xac\x5f\xfe\x03\x00\x00\x00\x00\x00\x40"
      "\xe7\xdc\x3c\x19\x11\x2f\x16\x7d\xfe\x5f\x5b\x1c\xff\x13\x05\xe3\x7f\xfa"
      "\x23\xe2\x44\x07\xea\x5f\xfb\xf3\xbf\xda\x9d\x0e\x54\x03\x14\xb8\x7b\x32"
      "\xe2\x95\xc2\xf1\xbf\xb5\x7c\xf4\xef\x60\x57\x6b\xe9\x7f\x8d\xf1\x00\x3d"
      "\xe9\xec\xf9\xe9\xa9\xc3\x11\xf1\xff\x88\x38\x18\x3d\x3b\xb2\xf5\xd1\x55"
      "\xea\x38\xf4\xd9\xde\xaf\xda\x95\xe5\xe3\xff\xf2\x47\x56\xff\xed\xd6\x58"
      "\xc0\x56\x1c\x77\xba\x57\xcc\x9f\x9d\x9c\x98\x9b\x78\xd4\xe3\x06\x22\xee"
      "\x5e\x8b\x78\xa6\x70\xfc\x6f\x5a\x6c\xff\x53\x41\xfb\x9f\xbd\x1f\xcc\x3c"
      "\x64\x1d\x7b\x9f\xbf\x71\xba\x5d\xd9\xda\xf9\x0f\x6c\x96\xfa\x37\x11\x07"
      "\x0a\xdb\xff\xb4\xf8\x9c\xb4\xfa\xfd\x39\x46\x1a\xe7\x03\x23\xf9\x59\xc1"
      "\x83\x9e\xfd\xf0\xf3\xef\xdb\xd5\x2f\xff\xa1\x3c\x59\xfb\xbf\x6b\xf5\xfc"
      "\x1f\x4c\x4b\xef\xd7\x33\xbb\xfe\x3a\x8e\xcc\x77\xd7\xdb\x95\x6d\xf4\xfc"
      "\xbf\x37\xbd\xd1\xb8\xe5\x4c\x6f\x6b\xdb\x07\x13\x73\x73\x57\x46\x23\x7a"
      "\xd3\xa9\xae\x6c\xeb\xb2\xed\x63\xeb\x8f\x19\x1e\x47\x79\x3e\xe4\xf9\x92"
      "\xe5\xff\xc1\xe7\x56\xef\xff\x2b\x3a\xff\xdf\x19\x11\x0b\x2b\xfe\xef\xf4"
      "\xe7\xf2\x39\xc5\xb9\x27\xff\xe9\xff\xad\x5d\x3c\xda\x7f\x28\x4f\x96\xff"
      "\x93\xeb\x6a\xff\xd7\xbf\x30\x76\x63\xf0\x87\x76\xf5\x3f\x5c\xfb\x7f\xb4"
      "\xd1\xd6\x1f\x6c\x6d\xd1\xff\x07\x4d\x5f\xe6\x69\xda\xbb\x7c\x7b\x41\x3a"
      "\x76\x17\x15\x6d\x75\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x38\xa8\x45\xc4"
      "\xee\x48\xb5\xe1\xc5\xe5\x5a\x6d\x78\x38\xa2\x3f\x22\x9e\x88\x5d\xb5\xe9"
      "\xcb\xb3\x73\x2f\x9c\xbd\xfc\xde\xa5\xc9\xac\xac\xf1\xfd\xff\xb5\xfc\x9b"
      "\x7e\x07\x9a\xeb\x29\xff\xfe\xff\xc1\x25\xeb\x63\x2b\xd6\x8f\x44\xc4\x9e"
      "\x88\xf8\xa2\x6b\x67\x63\x7d\xf8\xcc\xe5\xe9\xc9\xb2\x0f\x1e\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb6\x89\xfe\x36\xf3\xff"
      "\x33\xbf\x77\x95\x1d\x1d\xb0\xe9\xba\xcb\x0e\x00\x28\x4d\x41\xfe\xff\x5c"
      "\x46\x1c\xc0\xd6\xd3\xfe\x43\x75\xc9\x7f\xa8\x2e\xf9\x0f\xd5\x25\xff\xa1"
      "\xba\xe4\x3f\x54\x97\xfc\x87\xea\x92\xff\x50\x5d\xf2\x1f\x00\x00\x00\x00"
      "\x00\x1e\x2b\x7b\xf6\xdf\xfc\x25\x45\xc4\xc2\xcb\x3b\x1b\x8f\x4c\x6f\xab"
      "\xac\xa7\xd4\xc8\x80\xcd\x56\x2b\x3b\x00\xa0\x34\x6e\xf1\x03\xd5\x65\xe8"
      "\x0f\x54\x97\x6b\x7c\x20\xad\x51\xde\xd7\x76\xa7\xb5\xf6\x5c\xcd\xcc\x99"
      "\x47\xd8\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\xe7\xc0\x3e\xf3"
      "\xff\xa1\xaa\xcc\xff\x87\xea\x32\xff\x1f\xaa\x2b\x9f\xff\xbf\xbf\xe4\x38"
      "\x80\xad\xe7\x1a\x1f\x88\x35\x66\xf2\x17\xce\xff\x5f\x73\x2f\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\xa0\x93\x66\xe7\xaf\x5e\x98\x98\x9e\x9e\xba"
      "\x62\xe1\xcd\xed\x11\xc6\x56\x2e\xd4\xeb\xf5\x8f\xb3\xbf\x82\xed\x12\xcf"
      "\x7f\x7c\x21\x1f\x0a\xbf\x5d\xe2\x79\xa4\x85\x72\xdf\x97\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xfb\xfe\x0d\x00"
      "\x00\xff\xff\x28\x32\x26\xb2",
      1465));
  NONFAILING(syz_mount_image(/*fs=*/0x20000580, /*dir=*/0x200005c0,
                             /*flags=MS_STRICTATIME|MS_SILENT*/ 0x1008000,
                             /*opts=*/0x20000300, /*chdir=*/1, /*size=*/0x5ba,
                             /*img=*/0x20001bc0));
  NONFAILING(memcpy((void*)0x20000440, "ext4\000", 5));
  NONFAILING(memcpy((void*)0x20000180, "./bus\000", 6));
  NONFAILING(*(uint8_t*)0x20000900 = 0);
  NONFAILING(memcpy(
      (void*)0x20000d00,
      "\x78\x9c\xec\xdc\xcb\x6f\x1b\x45\x18\x00\xf0\x6f\xd7\x49\x0b\x7d\x90\x50"
      "\xca\xa3\xa5\x80\xa1\x20\x22\x1e\x49\x93\xf2\xe8\x81\x0b\x08\x24\x38\x20"
      "\x21\xc1\xa1\x48\x5c\x42\x92\x56\xa5\x6e\x83\x9a\x20\xd1\x2a\x82\x80\x50"
      "\x7b\x44\x95\xb8\x23\x6e\x20\xf1\x17\x70\x82\x0b\x02\x4e\x48\x70\x04\xce"
      "\xa8\x52\x85\x72\x69\xe0\x64\xb4\xf6\x3a\x71\x1d\xdb\xc4\x4e\x52\xa7\xf8"
      "\xf7\x93\xb6\x9e\xe9\x8e\x3d\xf3\x79\x77\xd6\xb3\x33\x76\x02\xe8\x5b\xc5"
      "\xec\x9f\x24\x62\x4f\x44\xfc\x16\x11\x43\xd5\xec\xf5\x05\x8a\xd5\x87\xe5"
      "\xa5\x85\xa9\xbf\x97\x16\xa6\x92\x28\x97\x5f\xff\x2b\xa9\x94\xbb\xb6\xb4"
      "\x30\x55\x2b\x5a\x7b\xde\xee\x3c\x33\x92\x46\xa4\x9f\x24\x0d\x2f\x58\x35"
      "\x77\xfe\xc2\xe9\xc9\x52\x69\xe6\x5c\x9e\x1f\x9b\x3f\xf3\xee\xd8\xdc\xf9"
      "\x0b\x4f\x9e\x3a\x33\x79\x72\xe6\xe4\xcc\xd9\x89\x63\xc7\x9e\x3a\x3a\xfe"
      "\xec\x33\x13\x4f\x6f\x4a\x9c\x59\x5c\xd7\x0e\x7e\x30\x7b\xe8\xc0\xcb\x6f"
      "\x5e\x7e\x75\xea\xf8\xe5\xb7\x7f\xfc\xfa\xd2\xde\x6a\xdc\xd1\x10\x47\x7b"
      "\x3b\xd6\x5d\x67\x31\x8a\xcd\x42\xaf\x78\x64\xdd\xaf\x72\x73\xd8\x5b\x97"
      "\x4e\x06\x7a\xd8\x10\x3a\x52\x88\x88\xec\x70\x0d\x56\xfa\xff\x50\x14\x62"
      "\xf5\xe0\x0d\xc5\x4b\x1f\xf7\xb4\x71\xc0\x96\x2a\x97\xcb\xe5\x9d\xad\x77"
      "\x2f\x96\x81\xff\xb1\x24\x7a\xdd\x02\xa0\x37\x6a\x1f\xf4\xd9\xfd\x6f\x6d"
      "\xbb\x41\x43\x8f\x6d\xe1\xea\xf3\xd5\x1b\xa0\x2c\xee\xe5\x7c\xab\xee\x19"
      "\x88\x34\x2f\x33\xd8\x70\x7f\xbb\x99\x8a\x11\x71\x7c\xf1\x9f\xcf\xb3\x2d"
      "\x3a\x9a\x87\x00\x00\xe8\xce\xb7\xd9\xf8\xe7\x89\x66\xe3\xbf\x34\xee\xaa"
      "\x2b\x77\x5b\xbe\x86\x32\x1c\x11\xb7\x47\xc4\xbe\x88\xb8\x23\x22\xf6\x47"
      "\xc4\x9d\x11\x95\xb2\x77\x47\xc4\x3d\x1d\xd6\x5f\x6c\xc8\xaf\x1d\xff\xa4"
      "\x57\xba\x0a\x6c\x9d\xb2\xf1\xdf\x73\xf9\xda\xd6\xf5\xe3\xbf\xda\xe8\x2f"
      "\x86\x0b\x79\x6e\x6f\x25\xfe\xc1\xe4\xc4\xa9\xd2\xcc\x91\xfc\x3d\x19\x89"
      "\xc1\x9d\x59\x7e\xbc\x4d\x1d\xdf\xbd\xf8\xcb\xa7\xad\xf6\xd5\x8f\xff\xb2"
      "\x2d\xab\xbf\x36\x16\xcc\xdb\x71\x65\xa0\x61\x82\x6e\x7a\x72\x7e\x72\x23"
      "\x31\xd7\xbb\xfa\x51\xc4\xc1\x81\x66\xf1\x27\x2b\x2b\x01\x49\x44\x1c\x88"
      "\x88\x83\x5d\xd6\x71\xea\xb1\xaf\x0e\xb5\xda\xf7\xdf\xf1\xb7\xb1\x09\xeb"
      "\x4c\xe5\x2f\x22\x1e\xad\x1e\xff\xc5\xc8\xe3\xaf\xae\xf0\xad\xae\xdc\x25"
      "\xed\xd7\x27\xc7\x6e\x89\xd2\xcc\x91\xb1\xda\x59\xb1\xd6\x4f\x3f\x5f\x7c"
      "\xad\x55\xfd\x1b\x8a\x7f\x13\x64\xc7\x7f\x57\xd3\xf3\x7f\x25\xfe\xe1\xa4"
      "\x7e\xbd\x76\xae\xf3\x3a\x2e\xfe\x7e\xa9\xe5\x3d\x4d\xb7\xe7\xff\x8e\xe4"
      "\x8d\x4a\xba\xb6\x1a\xfb\xfe\xe4\xfc\xfc\xb9\xf1\xca\xe5\x69\xed\xff\x4f"
      "\xac\x3e\xb7\x96\xcf\xcb\x57\xe2\x1f\x39\xdc\xbc\xff\xef\x8b\xd5\x77\xe2"
      "\xde\x88\xc8\x4e\xe2\xfb\x22\xe2\xfe\x88\x78\x20\x6f\xfb\x83\x11\xf1\x50"
      "\x44\x1c\x6e\x13\xff\x0f\x2f\x3c\xfc\x4e\xf7\xf1\x6f\xad\x2c\xfe\xe9\x8e"
      "\x8e\x7f\xe7\x89\xc2\xe9\xef\xbf\x69\x55\xff\x3a\x8e\xff\xaf\x6f\xe5\xa9"
      "\x91\xfc\x71\x3d\xd7\xbf\x4a\xe5\xaf\xe4\x99\x36\x0d\xec\xee\x5d\x03\x00"
      "\x00\x80\x9b\x4b\x1a\x11\x7b\x22\x49\x47\x57\xd2\x69\x3a\x3a\x5a\xfd\x0e"
      "\xff\xfe\xd8\x95\x96\x66\xe7\xe6\x1f\x3f\x31\xfb\xde\xd9\xe9\xea\x77\xe5"
      "\x87\x63\x30\xad\xcd\x74\x0d\xd5\xcd\x87\x8e\xe7\x73\xc3\xb5\xfc\x44\x43"
      "\xfe\x68\x3e\x6f\xfc\x59\xe1\xd6\x4a\x7e\x74\x6a\xb6\x34\xdd\xeb\xe0\xa1"
      "\xcf\xed\x6e\xd1\xff\x33\x7f\x16\x7a\xdd\x3a\x60\xcb\xf9\xbd\x16\xf4\x2f"
      "\xfd\x1f\xfa\x97\xfe\x0f\xfd\x4b\xff\x87\xfe\xa5\xff\x43\xff\x6a\xd6\xff"
      "\x3f\xec\x41\x3b\x80\x1b\xcf\xe7\x3f\xf4\x2f\xfd\x1f\xfa\x97\xfe\x0f\xfd"
      "\x4b\xff\x87\xbe\xb4\x91\xdf\xf5\x77\x90\x58\x2e\x97\xcb\x5b\x5c\xc5\xb6"
      "\x49\x7c\x99\xff\xad\xc0\xed\xd2\x9e\x2d\x4a\x44\xba\x2d\x9a\x21\xb1\xa1"
      "\xc4\x1f\xf9\x75\x60\xed\xae\x5e\x5e\x95\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x36\xcf\xbf\x01\x00\x00\xff\xff\xad\xd7\xe0\xaa",
      1096));
  NONFAILING(syz_mount_image(/*fs=*/0x20000440, /*dir=*/0x20000180, /*flags=*/0,
                             /*opts=*/0x20000900, /*chdir=*/0xfd,
                             /*size=*/0x448, /*img=*/0x20000d00));
  NONFAILING(memcpy((void*)0x200000c0, "./file1\000", 8));
  res = syscall(
      __NR_open, /*file=*/0x200000c0ul,
      /*flags=O_SYNC|O_NONBLOCK|O_NOCTTY|O_NOATIME|O_DIRECT|O_CREAT|0x2002*/
      0x147942ul, /*mode=*/0ul);
  if (res != -1)
    r[0] = res;
  NONFAILING(memcpy((void*)0x20000180, "./bus\000", 6));
  syscall(__NR_open, /*file=*/0x20000180ul,
          /*flags=O_TRUNC|O_SYNC|O_NOATIME|O_LARGEFILE|O_DIRECT|O_CREAT|0x3e*/
          0x14d27eul, /*mode=*/0ul);
  NONFAILING(memcpy((void*)0x20000040, "ext4\000", 5));
  NONFAILING(memcpy((void*)0x20000500, "./file0\000", 8));
  NONFAILING(memcpy((void*)0x20000080, "nobarrier", 9));
  NONFAILING(*(uint8_t*)0x20000089 = 0x2c);
  NONFAILING(memcpy((void*)0x2000008a, "noblock_validity", 16));
  NONFAILING(*(uint8_t*)0x2000009a = 0x2c);
  NONFAILING(memcpy((void*)0x2000009b, "discard", 7));
  NONFAILING(*(uint8_t*)0x200000a2 = 0x2c);
  NONFAILING(memcpy((void*)0x200000a3, "barrier", 7));
  NONFAILING(*(uint8_t*)0x200000aa = 0x3d);
  NONFAILING(sprintf((char*)0x200000ab, "0x%016llx", (long long)3));
  NONFAILING(*(uint8_t*)0x200000bd = 0x2c);
  NONFAILING(memcpy((void*)0x200000be, "mblk_io_submit", 14));
  NONFAILING(*(uint8_t*)0x200000cc = 0x2c);
  NONFAILING(memcpy((void*)0x200000cd, "resgid", 6));
  NONFAILING(*(uint8_t*)0x200000d3 = 0x3d);
  NONFAILING(sprintf((char*)0x200000d4, "0x%016llx", (long long)0xee01));
  NONFAILING(*(uint8_t*)0x200000e6 = 0x2c);
  NONFAILING(memcpy((void*)0x200000e7, "jqfmt=vfsold", 12));
  NONFAILING(*(uint8_t*)0x200000f3 = 0x2c);
  NONFAILING(memcpy((void*)0x200000f4, "resgid", 6));
  NONFAILING(*(uint8_t*)0x200000fa = 0x3d);
  NONFAILING(sprintf((char*)0x200000fb, "0x%016llx", (long long)0xee01));
  NONFAILING(*(uint8_t*)0x2000010d = 0x2c);
  NONFAILING(memcpy((void*)0x2000010e, "journal_ioprio", 14));
  NONFAILING(*(uint8_t*)0x2000011c = 0x3d);
  NONFAILING(sprintf((char*)0x2000011d, "0x%016llx", (long long)4));
  NONFAILING(*(uint8_t*)0x2000012f = 0x32);
  NONFAILING(*(uint8_t*)0x20000130 = 0);
  NONFAILING(memcpy(
      (void*)0x20000ec0,
      "\x78\x9c\xec\xdd\x5f\x6b\x5b\xe7\x19\x00\xf0\xe7\x1c\x5b\x59\xfe\x38\xb3"
      "\xc3\x76\x91\x05\x96\x85\x25\xc3\x0e\x5b\x24\x3b\x5e\x12\xb3\x8b\x6c\x83"
      "\xb1\x5d\x05\xb6\x65\xf7\x99\x67\xcb\xc6\x58\xb6\x8c\x25\x27\xb1\x09\x9b"
      "\xc3\x3e\xc0\x60\x94\xb6\xd0\xab\x5e\xf5\xa6\xd0\x0f\x50\x28\xf9\x08\xa5"
      "\x10\x68\xef\x4b\x5b\x5a\x4a\x9b\xb4\x17\xbd\x68\xa3\xa2\x7f\xa9\xe3\x48"
      "\xb1\x4d\x64\x29\x58\xbf\x1f\x1c\xeb\x3d\x47\x47\x7e\x9e\x47\x42\xaf\xf4"
      "\x9e\xf3\xa2\x13\x40\xdf\x3a\x13\x11\x17\x23\xe2\x51\xa5\x52\x39\x1f\x11"
      "\xc3\x8d\xed\x69\x63\xb9\x77\x2c\x22\x36\xeb\xfb\x3d\x7c\x70\x67\xa6\xba"
      "\x24\x51\xa9\x5c\xff\x22\x89\xa4\xb1\xad\xba\xff\xd8\x96\xff\xd9\x78\x48"
      "\x1c\x8e\x88\xbf\xff\x25\xe2\x5f\xc9\xd3\x71\x4b\xeb\x1b\x8b\xd3\x85\x42"
      "\x7e\xb5\xb1\x9e\x2b\x2f\xad\xe4\x4a\xeb\x1b\x17\x16\x96\xa6\xe7\xf3\xf3"
      "\xf9\xe5\xc9\xc9\x89\xcb\x53\x57\xa6\x2e\x4d\x8d\x77\xa4\xce\xa1\x88\xb8"
      "\xfa\xa7\x4f\x5e\xfe\xdf\x1b\x7f\xbe\xfa\xce\x6f\x6e\x7d\x78\xe3\xb3\xb1"
      "\x7f\x27\x8d\xed\xb1\xa5\x8e\x4e\xab\x97\x9e\xa9\x3d\x17\x4d\x83\x11\xb1"
      "\xba\x1f\xc1\x7a\x60\xa0\x51\x4f\xa6\xd7\x89\x00\x00\xb0\x2b\xcd\xef\xf9"
      "\xbf\x8c\x88\xf3\x31\x1c\x03\xb5\x6f\x73\x00\x00\x00\xc0\x41\x52\xf9\xfd"
      "\x50\x7c\x9b\x44\x54\x00\x00\x00\x80\x03\x2b\xad\xcd\x81\x4d\xd2\x6c\x63"
      "\x1e\xc0\x50\xa4\x69\x36\x5b\x9f\xc3\xfb\xd3\x38\x9a\x16\x8a\xa5\xf2\xaf"
      "\xe7\x8a\x6b\xcb\xb3\xf5\xb9\xb2\x23\x91\x49\xe7\x16\x0a\xf9\xf1\xc6\x5c"
      "\xe1\x91\xc8\x24\xd5\xf5\x89\x5a\xfb\x87\xf5\x8b\xdb\xd6\x27\x23\xe2\x44"
      "\x44\xbc\x34\x7c\xa4\xb6\x9e\x9d\x29\x16\x66\x7b\x7d\xf0\x03\x00\x00\x00"
      "\xfa\xc4\xb1\x6d\xe3\xff\xaf\x87\xeb\xe3\x7f\x00\x00\x00\xe0\x80\x19\xe9"
      "\x75\x02\x00\x00\x00\xc0\xbe\x33\xfe\x07\x00\x00\x80\x83\xcf\xf8\x1f\x00"
      "\x00\x00\x0e\xb4\xbf\x5e\xbb\x56\x5d\x2a\xcd\xeb\x5f\xcf\xde\x5c\x5f\x5b"
      "\x2c\xde\xbc\x30\x9b\x2f\x2d\x66\x97\xd6\x66\xb2\x33\xc5\xd5\x95\xec\x7c"
      "\xb1\x38\x5f\xfb\xcd\xbe\xa5\x9d\xfe\x5f\xa1\x58\x5c\xf9\x6d\x2c\xaf\xdd"
      "\xce\x95\xf3\xa5\x72\xae\xb4\xbe\x71\x63\xa9\xb8\xb6\x5c\xbe\xb1\xf0\xc4"
      "\x25\xb0\x01\x00\x00\x80\x2e\x3a\xf1\x8b\x7b\x1f\x24\x11\xb1\xf9\xbb\x23"
      "\xb5\xa5\xea\x50\xaf\x93\x02\xba\x62\x70\x2f\x3b\x7f\xbc\x7f\x79\x00\xdd"
      "\x37\xd0\xeb\x04\x80\x9e\xd9\xd3\xe7\x3f\x70\xa0\x64\x7a\x9d\x00\xd0\x73"
      "\xc9\x0e\xf7\xb7\x9d\xbc\xf3\x6e\xe7\x73\x01\x00\x00\xf6\xc7\xe8\xcf\x5a"
      "\x9f\xff\x4f\x76\x3c\x36\xb0\x99\x76\x29\x45\x60\x9f\x38\xfe\x07\xfd\xcb"
      "\xf9\x7f\xe8\x5f\xce\xff\x43\xff\xca\xc4\x40\x18\xc8\x43\x7f\xdb\xff\xf3"
      "\xff\x95\xca\x9e\x12\x02\x00\x00\x3a\x6e\xa8\xb6\x24\x69\x36\xa2\x76\x1c"
      "\x60\x28\xd2\x34\x9b\x8d\x38\x5e\xbb\x2c\x40\x26\x99\x5b\x28\xe4\xc7\x23"
      "\xe2\xc7\x11\xf1\xfe\x70\xe6\x47\xd5\xf5\x89\xda\x23\x93\x1d\xc7\x0c\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x40\x5d\xa5\x92\x44\x05\x00\x00\x00\x38\xd0\x22\xd2\x4f\x93\xc6\xf5\xbf"
      "\x46\x87\xcf\x0d\x6d\x3f\x3e\x70\x28\xf9\x66\xb8\x76\x1b\x11\xb7\x5e\xbb"
      "\xfe\xca\xed\xe9\x72\x79\x75\xa2\xba\xfd\xcb\xc7\xdb\xcb\xaf\x36\xb6\x5f"
      "\xec\xc5\x11\x0c\x00\x00\x00\x60\xbb\xe6\x38\xbd\x39\x8e\x07\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x4e\x7a"
      "\xf8\xe0\xce\x4c\x73\xe9\x66\xdc\xcf\xff\x18\x11\x23\xad\xe2\x0f\xc6\xe1"
      "\xda\xed\xe1\xc8\x44\xc4\xd1\xaf\x92\x18\xdc\xf2\xb8\x24\x22\x06\x3a\x10"
      "\x7f\xf3\x6e\x44\x9c\x6c\x15\x3f\xa9\xa6\x15\x23\x8d\x2c\x5a\xc5\x3f\xd2"
      "\xc3\xf8\x69\x44\x1c\xeb\x40\x7c\xe8\x67\xf7\xaa\xfd\xcf\x1f\x5a\xbd\xff"
      "\xd2\x38\x53\xbb\x6d\xfd\xfe\xbb\x5c\xeb\xa1\x9e\x5f\xfb\xfe\x2f\x7d\xdc"
      "\xff\x0d\xb4\xe9\x7f\x8e\xef\x32\xc6\xa9\xfb\x6f\xe5\xda\xc6\xbf\x1b\x71"
      "\x6a\xb0\x75\xff\xd3\x8c\x9f\xb4\x89\x7f\x76\x97\xf1\xff\xf9\x8f\x8d\x8d"
      "\x76\xf7\x55\x5e\x8f\x18\x6d\xf9\xf9\x93\x3c\x11\x2b\x57\x5e\x5a\xc9\x95"
      "\xd6\x37\x2e\x2c\x2c\x4d\xcf\xe7\xe7\xf3\xcb\x93\x93\x13\x97\xa7\xae\x4c"
      "\x5d\x9a\x1a\xcf\xcd\x2d\x14\xf2\x8d\xbf\x2d\x63\xfc\xff\xe7\x6f\x3f\x7a"
      "\x56\xfd\x47\xdb\xc4\x1f\xd9\xa1\xfe\x73\xbb\xac\xff\xbb\xfb\xb7\x1f\xfc"
      "\xa4\xde\xcc\xb4\x8a\x3f\x76\xb6\xf5\xeb\x7f\xb2\x4d\xfc\xb4\xf1\xd9\xf7"
      "\xab\x46\xbb\x7a\xff\x68\xb3\xbd\x59\x6f\x6f\x75\xfa\xcd\xf7\x4e\x3f\xab"
      "\xfe\xd9\x36\xf5\xef\xf4\xfa\x8f\xed\xb2\xfe\xf3\x7f\xfb\xef\x47\xbb\xdc"
      "\x15\x00\xe8\x82\xd2\xfa\xc6\xe2\x74\xa1\x90\x5f\xed\xeb\xc6\x73\x3d\x1b"
      "\xd5\xaf\x45\x2f\x44\x15\x1a\x7b\x6d\xfc\xe7\xc5\x48\xe3\x85\x6c\xf4\xb6"
      "\x5f\x02\x00\x00\x3a\xef\xe9\x31\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\xd0\x6d\xdd\xfc\x75\xbd\xa6\xcd\xde\x94\x0a\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\xf0\x4c\xdf\x07\x00\x00\xff\xff\xbc\xbe\xd4\xeb",
      1221));
  NONFAILING(syz_mount_image(
      /*fs=*/0x20000040, /*dir=*/0x20000500,
      /*flags=MS_POSIXACL|MS_REC|MS_SYNCHRONOUS|MS_SILENT|MS_NOSUID|0x904*/
      0x1c916, /*opts=*/0x20000080, /*chdir=*/0x1b, /*size=*/0x4c5,
      /*img=*/0x20000ec0));
  NONFAILING(memcpy((void*)0x20000380, "/dev/loop", 9));
  NONFAILING(*(uint8_t*)0x20000389 = 0x30);
  NONFAILING(*(uint8_t*)0x2000038a = 0);
  NONFAILING(memcpy((void*)0x20000140, "./bus\000", 6));
  syscall(__NR_mount, /*src=*/0x20000380ul, /*dst=*/0x20000140ul, /*type=*/0ul,
          /*flags=MS_BIND*/ 0x1000ul, /*data=*/0ul);
  NONFAILING(memcpy((void*)0x20000400, "./bus\000", 6));
  res = syscall(__NR_open, /*file=*/0x20000400ul,
                /*flags=O_SYNC|O_NOCTTY|O_NOATIME|O_RDWR|0x3c*/ 0x14113eul,
                /*mode=*/0ul);
  if (res != -1)
    r[1] = res;
  NONFAILING(memcpy((void*)0x200001c0, "#! ", 3));
  NONFAILING(*(uint8_t*)0x200001c3 = 0xa);
  syscall(__NR_write, /*fd=*/r[1], /*data=*/0x200001c0ul, /*len=*/0x208e24bul);
  NONFAILING(memcpy((void*)0x20000580, "#! ", 3));
  NONFAILING(memcpy((void*)0x20000583, "./file1", 7));
  NONFAILING(*(uint8_t*)0x2000058a = 0xa);
  syscall(__NR_write, /*fd=*/r[0], /*data=*/0x20000580ul, /*len=*/0xbul);
  close_fds();
}
int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  if ((reason = setup_binfmt_misc()))
    printf("the reproducer may not work as expected: binfmt_misc setup failed: "
           "%s\n",
           reason);
  install_segv_handler();
  use_temporary_dir();
  do_sandbox_none();
  return 0;
}
