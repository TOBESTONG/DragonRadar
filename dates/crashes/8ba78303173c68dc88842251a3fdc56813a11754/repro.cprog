// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

uint64_t r[1] = {0xffffffffffffffff};

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  intptr_t res = 0;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  syscall(__NR_msgsnd, /*msqid=*/0, /*msgp=*/0ul, /*sz=*/0xaaul, /*flags=*/0ul);
  memcpy((void*)0x200005c0, "ext4\000", 5);
  memcpy((void*)0x20000000, "./file0\000", 8);
  *(uint8_t*)0x20000600 = 0;
  memcpy(
      (void*)0x20000f00,
      "\x78\x9c\xec\xdd\x4d\x6f\x54\x5f\x19\x00\xf0\x67\xa6\x6f\xd3\x52\x68\x41"
      "\x16\x6a\x54\x10\x51\x34\x84\x69\x3b\x40\x43\x58\x28\xae\x8c\x31\x24\x46"
      "\x96\x9a\x40\x6d\x87\xa6\xe9\x4c\xa7\xe9\x4c\x91\x56\x16\xe5\x3b\x98\x48"
      "\xe2\x4a\x97\x7e\x00\xd7\xac\xdc\xbb\x31\xba\x73\x83\x0b\x13\x5f\x1a\x0d"
      "\x25\x71\x31\xff\xdc\x3b\xb7\x65\x28\x1d\xda\x3f\x7d\x19\xd2\xf9\xfd\x92"
      "\x9b\x7b\xcf\x39\x33\xf3\x9c\xc3\xe4\x9e\xc3\x3c\x84\x7b\x02\xe8\x59\x97"
      "\x23\x62\x23\x22\x06\x23\xe2\x51\x44\x8c\x65\xf5\xb9\xec\x88\x7b\xad\x23"
      "\x79\xdd\xeb\xcd\x67\xb3\x5b\x9b\xcf\x66\x73\xd1\x6c\x3e\xf8\x77\x2e\x6d"
      "\x4f\xea\xa2\xed\x3d\x89\x33\xd9\x67\x16\x22\xe2\x27\x3f\x88\xf8\x79\xee"
      "\xfd\xb8\xf5\xb5\xf5\xc5\x99\x4a\xa5\xbc\x92\x95\x27\x1a\xd5\xe5\x89\xfa"
      "\xda\xfa\x8d\x85\xea\xcc\x7c\x79\xbe\xbc\x54\x2a\x4d\x4f\x4d\x4f\xde\xb9"
      "\x79\xbb\x74\x64\x63\xbd\x54\x1d\xcc\xae\xbe\xfa\xea\x4f\x1b\xdf\xf9\x65"
      "\xd2\xad\xd1\xac\xa6\x7d\x1c\x47\xa9\x35\xf4\x81\x9d\x38\x89\xfe\x88\xf8"
      "\xd1\x71\x04\xeb\x82\xbe\x6c\x3c\x83\xdd\xee\x08\x1f\x25\x1f\x11\x17\x22"
      "\xe2\x4a\x7a\xff\x8f\x45\x5f\xfa\x6d\x02\x00\xa7\x59\xb3\x39\x16\xcd\xb1"
      "\xf6\x32\x00\x70\xda\xe5\xd3\x1c\x58\x2e\x5f\xcc\x72\x01\xa3\x91\xcf\x17"
      "\x8b\xad\x1c\xde\xc5\x18\xc9\x57\x6a\xf5\xc6\xf5\xc7\xb5\xd5\xa5\xb9\x56"
      "\xae\x6c\x3c\x06\xf2\x8f\x17\x2a\xe5\xc9\x2c\x57\x38\x1e\x03\xb9\xa4\x3c"
      "\x95\x5e\xbf\x2d\x97\x76\x95\x6f\x46\xc4\xf9\x88\xf8\xd5\xd0\x70\x5a\x2e"
      "\xce\xd6\x2a\x73\xdd\xfc\x8b\x0f\x00\xf4\xb0\x33\xbb\xd6\xff\xff\x0d\xb5"
      "\xd6\x7f\x00\xe0\x94\x2b\x74\xbb\x03\x00\xc0\x89\xb3\xfe\x03\x40\xef\xb1"
      "\xfe\x03\x40\xef\xb1\xfe\x03\x40\xef\xb1\xfe\x03\x40\xef\xb1\xfe\x03\x40"
      "\xef\xb1\xfe\x03\x40\x4f\xf9\xf1\xfd\xfb\xc9\xd1\xdc\xca\x9e\x7f\x3d\xf7"
      "\x64\x6d\x75\xb1\xf6\xe4\xc6\x5c\xb9\xbe\x58\xac\xae\xce\x16\x67\x6b\x2b"
      "\xcb\xc5\xf9\x5a\x6d\x3e\x7d\x66\x4f\x75\xbf\xcf\xab\xd4\x6a\xcb\x53\xb7"
      "\x62\xf5\xe9\xf8\x77\x97\xeb\x8d\x89\xfa\xda\xfa\xc3\x6a\x6d\x75\xa9\xf1"
      "\x30\x7d\xae\xf7\xc3\xf2\xc0\x89\x8c\x0a\x00\xf8\x90\xf3\x97\x5e\xfe\x35"
      "\x17\x11\x1b\x77\x87\xd3\x23\xda\xf6\x72\xb0\x56\xc3\xe9\x96\xef\x76\x07"
      "\x80\xae\xe9\xeb\x76\x07\x80\xae\xb1\xdb\x17\xf4\xae\x43\xfc\xc6\x97\x1e"
      "\x80\x53\x62\x8f\x2d\x7a\xdf\x51\x88\x88\xe1\xdd\x95\xcd\x66\xb3\x79\x7c"
      "\x5d\x02\x8e\xd9\xb5\x2f\xc9\xff\x43\xaf\x92\xff\x87\xde\x25\xff\x0f\xbd"
      "\x4b\xfe\x1f\x7a\x57\xb3\x99\x3b\xe8\x9e\xff\x71\xd0\x17\x02\x00\x9f\x36"
      "\x39\x7e\xa0\xc3\xbf\xff\x5f\xc8\xce\xbf\xcf\x1e\x11\xf2\xb3\xb9\xdd\xaf"
      "\x78\x71\x9c\xbd\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x4f\xdb\xf6\xfe\xbf\xc5\x6c"
      "\x2f\xf0\xd1\xc8\xe7\x8b\xc5\x88\xb3\x11\x31\x1e\x03\xb9\xc7\x0b\x95\xf2"
      "\x64\x44\x9c\x8b\x88\xbf\x0c\x0d\x0c\x25\xe5\xa9\x2e\xf7\x19\x00\x38\xac"
      "\xfc\x3f\x72\xd9\xfe\x5f\xd7\xc6\xae\x8e\xee\x6e\x1d\xcc\xbd\x19\x4a\xcf"
      "\x11\xf1\x8b\xdf\x3c\xf8\xf5\xd3\x99\x46\x63\xe5\xcf\x49\xfd\x7f\x76\xea"
      "\x1b\x2f\xb2\xfa\x52\x37\xfa\x0f\x00\xec\x67\x7b\x9d\x4e\xcf\x6d\x3f\xe4"
      "\x5f\x6f\x3e\x9b\xdd\x3e\x4e\xb2\x3f\xff\xfc\x7e\x44\x14\x5a\xf1\xb7\x36"
      "\x07\x63\x6b\x27\x7e\x7f\xf4\xa7\xe7\x42\x0c\x44\xc4\xc8\x7f\x73\x59\xb9"
      "\x25\xd7\x96\xbb\x38\x8c\x8d\xe7\x11\xf1\xc5\xbd\xc6\x9f\x8b\xd1\x34\x07"
      "\xd2\xda\xf9\x74\x77\xfc\x24\xf6\xd9\x13\x8d\x9f\x7f\x27\x7e\x3e\x6d\x6b"
      "\x9d\x93\x3f\x8b\x2f\x1c\x41\x5f\xa0\xd7\xbc\x4c\xe6\x9f\x7b\x7b\xdd\x7f"
      "\xf9\xb8\x9c\x9e\xf7\xbe\xff\x0b\xe9\x0c\x75\x78\xd9\xfc\x97\x7c\xd4\xec"
      "\x56\x3a\x07\xbe\x8d\xbf\x3d\xff\xf5\x75\x98\xff\x2e\x1f\x34\xc6\xad\x3f"
      "\xfe\xb0\x75\x35\xfc\x7e\xdb\xf3\x88\x2f\xf7\x47\x6c\xc7\xde\x6a\x9b\x7f"
      "\xb6\xe3\xe7\x3a\xc4\xbf\x7a\xc0\xf8\x7f\xfb\xca\xd7\xae\x74\x6a\x6b\xfe"
      "\x36\xe2\x5a\xec\x1d\xbf\x3d\xd6\x44\xa3\xba\x3c\x51\x5f\x5b\xbf\xb1\x50"
      "\x9d\x99\x2f\xcf\x97\x97\x4a\xa5\xe9\xa9\xe9\xc9\x3b\x37\x6f\x97\x26\xd2"
      "\x1c\xf5\x44\xe7\xd5\xe0\x5f\x77\xaf\x9f\xeb\xd4\x96\x8c\x7f\xa4\x43\xfc"
      "\xc2\x3e\xe3\xff\xe6\x01\xc7\xff\xbb\xff\x3f\xfa\xe9\xd7\x3f\x10\xff\xdb"
      "\xdf\xd8\x2b\x7e\x3e\x2e\x7e\x20\x7e\xb2\x26\x7e\xeb\x80\xf1\x67\x46\xfe"
      "\x50\xe8\xd4\x96\xc4\x9f\xeb\x30\xfe\xfd\xbe\xff\xeb\x07\x8c\xff\xea\xef"
      "\xeb\xef\x6d\x1b\x0e\x00\x74\x4f\x7d\x6d\x7d\x71\xa6\x52\x29\xaf\xb8\x70"
      "\xe1\xe2\x30\x17\xdf\x3b\xa9\x58\x83\xf1\xb9\xde\xd5\x6c\x7e\x54\xac\x4e"
      "\x33\xc6\x51\x64\xdd\x80\x4f\xc1\xce\x4d\x1f\x11\x6f\xba\xdd\x19\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x4f\x27\xf1\x3f\x96\xba\x3d\x46"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x4e\xaf\xcf\x02\x00\x00\xff\xff\x77\x94\xd3"
      "\xd4",
      1242);
  syz_mount_image(/*fs=*/0x200005c0, /*dir=*/0x20000000,
                  /*flags=MS_SYNCHRONOUS|MS_RELATIME|MS_NODIRATIME*/ 0x200810,
                  /*opts=*/0x20000600, /*chdir=*/4, /*size=*/0x4da,
                  /*img=*/0x20000f00);
  syscall(__NR_ftruncate, /*fd=*/-1, /*len=*/0x800ul);
  memcpy((void*)0x200002c0, "/sys/power/resume", 17);
  res = syscall(
      __NR_openat, /*fd=*/0xffffffffffffff9cul, /*dir=*/0x200002c0ul,
      /*flags=O_TRUNC|O_SYNC|O_NONBLOCK|O_NOATIME|O_EXCL|O_RDWR*/ 0x141a82ul,
      /*mode=*/0ul);
  if (res != -1)
    r[0] = res;
  sprintf((char*)0x20000040, "0x%016llx", (long long)0x700);
  syscall(__NR_write, /*fd=*/r[0], /*buf=*/0x20000040ul, /*len=*/0x12ul);
  return 0;
}
