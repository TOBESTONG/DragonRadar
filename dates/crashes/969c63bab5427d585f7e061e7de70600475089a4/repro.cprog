// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <sched.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#include <linux/capability.h>
#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

static void sandbox_common_mount_tmpfs(void)
{
  write_file("/proc/sys/fs/mount-max", "100000");
  if (mkdir("./syz-tmp", 0777))
    exit(1);
  if (mount("", "./syz-tmp", "tmpfs", 0, NULL))
    exit(1);
  if (mkdir("./syz-tmp/newroot", 0777))
    exit(1);
  if (mkdir("./syz-tmp/newroot/dev", 0700))
    exit(1);
  unsigned bind_mount_flags = MS_BIND | MS_REC | MS_PRIVATE;
  if (mount("/dev", "./syz-tmp/newroot/dev", NULL, bind_mount_flags, NULL))
    exit(1);
  if (mkdir("./syz-tmp/newroot/proc", 0700))
    exit(1);
  if (mount("syz-proc", "./syz-tmp/newroot/proc", "proc", 0, NULL))
    exit(1);
  if (mkdir("./syz-tmp/newroot/selinux", 0700))
    exit(1);
  const char* selinux_path = "./syz-tmp/newroot/selinux";
  if (mount("/selinux", selinux_path, NULL, bind_mount_flags, NULL)) {
    if (errno != ENOENT)
      exit(1);
    if (mount("/sys/fs/selinux", selinux_path, NULL, bind_mount_flags, NULL) &&
        errno != ENOENT)
      exit(1);
  }
  if (mkdir("./syz-tmp/newroot/sys", 0700))
    exit(1);
  if (mount("/sys", "./syz-tmp/newroot/sys", 0, bind_mount_flags, NULL))
    exit(1);
  if (mkdir("./syz-tmp/pivot", 0777))
    exit(1);
  if (syscall(SYS_pivot_root, "./syz-tmp", "./syz-tmp/pivot")) {
    if (chdir("./syz-tmp"))
      exit(1);
  } else {
    if (chdir("/"))
      exit(1);
    if (umount2("./pivot", MNT_DETACH))
      exit(1);
  }
  if (chroot("./newroot"))
    exit(1);
  if (chdir("/"))
    exit(1);
}

static void setup_common()
{
  if (mount(0, "/sys/fs/fuse/connections", "fusectl", 0, 0)) {
  }
}

static void setup_binderfs()
{
  if (mkdir("/dev/binderfs", 0777)) {
  }
  if (mount("binder", "/dev/binderfs", "binder", 0, NULL)) {
  }
  if (symlink("/dev/binderfs", "./binderfs")) {
  }
}

static void loop();

static void sandbox_common()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setsid();
  struct rlimit rlim;
  rlim.rlim_cur = rlim.rlim_max = (200 << 20);
  setrlimit(RLIMIT_AS, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 32 << 20;
  setrlimit(RLIMIT_MEMLOCK, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 136 << 20;
  setrlimit(RLIMIT_FSIZE, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 1 << 20;
  setrlimit(RLIMIT_STACK, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 128 << 20;
  setrlimit(RLIMIT_CORE, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 256;
  setrlimit(RLIMIT_NOFILE, &rlim);
  if (unshare(CLONE_NEWNS)) {
  }
  if (mount(NULL, "/", NULL, MS_REC | MS_PRIVATE, NULL)) {
  }
  if (unshare(CLONE_NEWIPC)) {
  }
  if (unshare(0x02000000)) {
  }
  if (unshare(CLONE_NEWUTS)) {
  }
  if (unshare(CLONE_SYSVSEM)) {
  }
  typedef struct {
    const char* name;
    const char* value;
  } sysctl_t;
  static const sysctl_t sysctls[] = {
      {"/proc/sys/kernel/shmmax", "16777216"},
      {"/proc/sys/kernel/shmall", "536870912"},
      {"/proc/sys/kernel/shmmni", "1024"},
      {"/proc/sys/kernel/msgmax", "8192"},
      {"/proc/sys/kernel/msgmni", "1024"},
      {"/proc/sys/kernel/msgmnb", "1024"},
      {"/proc/sys/kernel/sem", "1024 1048576 500 1024"},
  };
  unsigned i;
  for (i = 0; i < sizeof(sysctls) / sizeof(sysctls[0]); i++)
    write_file(sysctls[i].name, sysctls[i].value);
}

static int wait_for_loop(int pid)
{
  if (pid < 0)
    exit(1);
  int status = 0;
  while (waitpid(-1, &status, __WALL) != pid) {
  }
  return WEXITSTATUS(status);
}

static void drop_caps(void)
{
  struct __user_cap_header_struct cap_hdr = {};
  struct __user_cap_data_struct cap_data[2] = {};
  cap_hdr.version = _LINUX_CAPABILITY_VERSION_3;
  cap_hdr.pid = getpid();
  if (syscall(SYS_capget, &cap_hdr, &cap_data))
    exit(1);
  const int drop = (1 << CAP_SYS_PTRACE) | (1 << CAP_SYS_NICE);
  cap_data[0].effective &= ~drop;
  cap_data[0].permitted &= ~drop;
  cap_data[0].inheritable &= ~drop;
  if (syscall(SYS_capset, &cap_hdr, &cap_data))
    exit(1);
}

static int do_sandbox_none(void)
{
  if (unshare(CLONE_NEWPID)) {
  }
  int pid = fork();
  if (pid != 0)
    return wait_for_loop(pid);
  setup_common();
  sandbox_common();
  drop_caps();
  if (unshare(CLONE_NEWNET)) {
  }
  write_file("/proc/sys/net/ipv4/ping_group_range", "0 65535");
  sandbox_common_mount_tmpfs();
  setup_binderfs();
  loop();
  exit(1);
}

void loop(void)
{
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x20000040, "ext4\000", 5);
  memcpy((void*)0x200001c0, "./file0\000", 8);
  memcpy((void*)0x200003c0, "oldalloc", 8);
  *(uint8_t*)0x200003c8 = 0x2c;
  memcpy((void*)0x200003c9, "noblock_validity", 16);
  *(uint8_t*)0x200003d9 = 0x2c;
  memcpy((void*)0x200003da, "stripe", 6);
  *(uint8_t*)0x200003e0 = 0x3d;
  sprintf((char*)0x200003e1, "0x%016llx", (long long)6);
  *(uint8_t*)0x200003f3 = 0x2c;
  memcpy((void*)0x200003f4, "barrier", 7);
  *(uint8_t*)0x200003fb = 0x3d;
  sprintf((char*)0x200003fc, "0x%016llx", (long long)0x7fff0038);
  *(uint8_t*)0x2000040e = 0x2c;
  memcpy((void*)0x2000040f, "errors=remount-ro", 17);
  *(uint8_t*)0x20000420 = 0x2c;
  memcpy((void*)0x20000421, "sysvgroups", 10);
  *(uint8_t*)0x2000042b = 0x2c;
  memcpy((void*)0x2000042c, "resuid", 6);
  *(uint8_t*)0x20000432 = 0x3d;
  sprintf((char*)0x20000433, "0x%016llx", (long long)0xee00);
  *(uint8_t*)0x20000445 = 0x2c;
  memcpy((void*)0x20000446, "resgid", 6);
  *(uint8_t*)0x2000044c = 0x3d;
  sprintf((char*)0x2000044d, "0x%016llx", (long long)0xee01);
  *(uint8_t*)0x2000045f = 0x2c;
  memcpy((void*)0x20000460, "barrier", 7);
  *(uint8_t*)0x20000467 = 0x3d;
  sprintf((char*)0x20000468, "0x%016llx", (long long)0x41db);
  *(uint8_t*)0x2000047a = 0x32;
  *(uint8_t*)0x2000047b = 0;
  memcpy(
      (void*)0x20000ec0,
      "\x78\x9c\xec\xdd\xcf\x6f\x1b\x59\x1d\x00\xf0\xef\x4c\xe2\xfe\x4c\x9b\x14"
      "\x38\x94\x4a\x94\x8a\x16\xa5\x15\xd4\x4e\x1a\xda\x46\x1c\x0a\x48\x08\x4e"
      "\x95\x80\x72\x2f\x21\x71\xa2\x28\x4e\x1c\xc5\x4e\xdb\x44\x15\xa4\xe2\x0f"
      "\x40\x42\x08\x90\x38\x71\xe2\x82\xc4\x1f\x80\x84\xfa\x27\x20\xa4\x4a\x70"
      "\x06\xc1\x6a\x57\xab\xdd\x76\xf7\xb0\x87\xdd\x7a\x65\x7b\xdc\x6d\xb3\x76"
      "\xe2\xee\x26\x71\x64\x7f\x3e\xd2\xcb\xbc\x37\x63\xfb\xfb\x7d\xb1\xfc\x3c"
      "\x6f\x66\xe4\x09\x60\x60\x5d\x88\x88\x2b\x11\xf1\xbc\x56\xab\xd5\x97\xa3"
      "\xd9\xfa\x34\x2b\xb1\xd5\x2c\xf5\xc7\x3d\x7b\xfa\x70\xb6\x5e\x92\xa8\xd5"
      "\xee\xbc\x93\x44\x92\xad\x6b\xbd\xd6\x50\xb6\x3c\x99\x3d\xed\x58\x44\xfc"
      "\xe4\x87\x11\x3f\x4f\x3e\x1d\xb7\xb2\xb1\xb9\x34\x53\x2a\x15\xd7\xb2\x76"
      "\xa1\xba\xbc\x5a\xa8\x6c\x6c\x5e\x5d\x5c\x9e\x59\x28\x2e\x14\x57\xa6\xa6"
      "\x26\x6f\x4c\xdf\x9c\xbe\x3e\x3d\xb1\x27\xfd\x1c\x8b\x88\x5b\xdf\x7f\xe3"
      "\x77\xbf\xfe\xf3\x0f\x6e\xfd\xfd\x9b\xf7\xff\x7b\xf7\xad\xcb\xbf\xa8\xa7"
      "\xd5\x4a\xed\xe5\x7e\xbc\xa6\x23\x3b\x6d\x6c\xbe\x7e\xae\xf1\xbf\x68\x19"
      "\x8e\x88\xb5\xcf\x18\xec\xb0\x19\xca\xfa\x93\xeb\x75\x22\x00\x00\x74\xa5"
      "\xbe\x8f\xff\x85\x88\xf8\x5a\x63\x1e\x30\x1a\x43\x8d\xbd\x39\x00\x00\x00"
      "\xa0\x9f\xd4\xbe\x33\x12\x1f\x26\x11\x35\x00\x00\x00\xa0\x6f\xa5\x11\x31"
      "\x12\x49\x9a\xcf\xae\x05\x18\x89\x34\xcd\xe7\x9b\xd7\xf0\x7e\x29\x4e\xa4"
      "\xa5\x72\xa5\xfa\x8d\xf9\xf2\xfa\xca\x5c\x7d\x5b\xc4\x58\xe4\xd2\xf9\xc5"
      "\x52\x71\x22\xbb\x56\x78\x2c\x72\x49\xbd\x3d\x99\x5d\x63\xdb\x6a\x5f\xdb"
      "\xd6\x9e\x8a\x88\x33\x11\xf1\xdb\xd1\xe3\x8d\x76\x7e\xb6\x5c\x9a\xeb\xf5"
      "\xc1\x0f\x00\x00\x00\x18\x10\x27\xb7\xcd\xff\xdf\x1f\x6d\xce\xff\x01\x00"
      "\x00\x80\x3e\x33\xd6\xeb\x04\x00\x00\x00\x80\x7d\x67\xfe\x0f\x00\x00\x00"
      "\xfd\xcf\xfc\x1f\x00\x00\x00\xfa\xda\x8f\x6e\xdf\xae\x97\x5a\xeb\xfe\xd7"
      "\x73\xf7\x36\xd6\x97\xca\xf7\xae\xce\x15\x2b\x4b\xf9\xe5\xf5\xd9\xfc\x6c"
      "\x79\x6d\x35\xbf\x50\x2e\x2f\x34\x7e\xb3\x6f\x79\xb7\xd7\x2b\x95\xcb\xab"
      "\xdf\x8a\x95\xf5\x07\x85\x6a\xb1\x52\x2d\x54\x36\x36\xef\x2e\x97\xd7\x57"
      "\xaa\x77\x17\x5f\xb9\x05\x36\x00\x00\x00\x70\x80\xce\x7c\xf5\xf1\xbf\x93"
      "\x88\xd8\xfa\xf6\xf1\x46\xa9\x3b\xd2\xeb\xa4\x80\x03\x31\xdc\xcd\x83\xfe"
      "\x73\xba\xb9\xfc\xff\x3e\x27\x03\x1c\xa8\xa1\x5e\x27\x00\xf4\x4c\x57\xdf"
      "\xff\x40\x5f\xca\xf5\x3a\x01\xa0\xe7\x92\x5d\xb6\x77\xbc\x78\xe7\x1f\x7b"
      "\x9f\x0b\x00\x00\xb0\x3f\xc6\xbf\xdc\xf9\xfc\xff\xce\xc7\x06\xb6\xd2\x03"
      "\x48\x0f\xd8\x47\x3e\xc4\x30\xb8\x9c\xff\x87\xc1\xe5\xfc\x3f\x0c\xae\x9c"
      "\x3d\x00\x18\x78\xfb\x7f\xfe\xbf\x56\x7b\xad\x84\x00\x00\x80\x3d\x37\xd2"
      "\x28\x49\x9a\xcf\xce\x05\x8e\x44\x9a\xe6\xf3\x11\xa7\x1a\xb7\x05\xc8\x25"
      "\xf3\x8b\xa5\xe2\x44\x44\x9c\x8e\x88\x7f\x8d\xe6\x8e\xd6\xdb\x93\x8d\x67"
      "\x26\xbb\xce\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x80\xa6\x5a\x2d\x89\x1a\x00\x00\x00\xd0\xd7\x22\xd2"
      "\x37\x93\xec\xfe\x5f\xe3\xa3\x97\x46\xb6\x1f\x1f\x38\x92\x7c\x30\xda\x58"
      "\x46\xc4\xfd\x3f\xde\xf9\xfd\x83\x99\x6a\x75\x6d\xb2\xbe\xfe\xdd\x17\xeb"
      "\xab\x7f\xc8\xd6\x5f\xeb\xc5\x11\x0c\x00\x00\x00\x60\xbb\xd6\x3c\xbd\x35"
      "\x8f\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x80\xbd\xf4\xec\xe9\xc3\xd9\x56\x39\xc8\xb8\x6f\x7f\x2f\x22\xc6"
      "\xda\xc5\x1f\x8e\x63\x8d\xe5\xb1\xc8\x45\xc4\x89\xf7\x92\x18\x7e\xe9\x79"
      "\x49\x44\x0c\xed\x41\xfc\xad\x47\x11\x71\xb6\x5d\xfc\xa4\x9e\x56\x8c\x65"
      "\x59\xb4\x8b\x7f\xbc\x87\xf1\xd3\x88\x38\xb9\x07\xf1\x61\x90\x3d\xae\x8f"
      "\x3f\xdf\x6d\xf7\xf9\x4b\xe3\x42\x63\xd9\xfe\xf3\x37\x9c\x95\xcf\xab\xf3"
      "\xf8\x97\xbe\x18\xff\x86\x3a\x8c\x3f\xa7\xba\x8c\x71\xee\xc9\x5f\x0b\x1d"
      "\xe3\x3f\x8a\x38\x37\xdc\x7e\xfc\x69\xc5\x4f\x3a\xc4\xbf\xd8\x65\xfc\x9f"
      "\xfd\x74\x73\xb3\xd3\xb6\xda\x9f\x22\xc6\xdb\x7e\xff\x24\xaf\xc4\x2a\x54"
      "\x97\x57\x0b\x95\x8d\xcd\xab\x8b\xcb\x33\x0b\xc5\x85\xe2\xca\xd4\xd4\xe4"
      "\x8d\xe9\x9b\xd3\xd7\xa7\x27\x0a\xf3\x8b\xa5\x62\xf6\xb7\x6d\x8c\xdf\x7c"
      "\xe5\x6f\xcf\x77\xea\xff\x89\x0e\xf1\xc7\x76\xe9\xff\xa5\x2e\xfb\xff\xd1"
      "\x93\x07\x4f\xbf\xd8\xac\xe6\xda\xc5\xbf\x7c\xb1\xfd\xfb\x7f\xb6\x43\xfc"
      "\x34\xfb\xee\xfb\x7a\x56\xaf\x6f\x1f\x6f\xd5\xb7\x9a\xf5\x97\x9d\xff\xcb"
      "\x3f\xcf\xef\xd4\xff\xb9\x66\xff\x8f\xbe\xee\xfb\x7f\xb9\xcb\xfe\x5f\xf9"
      "\xf1\xaf\xfe\xd7\xe5\x43\x01\x80\x03\x50\xd9\xd8\x5c\x9a\x29\x95\x8a\x6b"
      "\x7d\x5b\xa9\xcf\xd2\x0f\x41\x1a\x2a\x87\xb0\xf2\xcb\xc3\x91\xc6\xa1\xac"
      "\xf4\x7a\x64\x02\x00\x00\xf6\xda\x27\x3b\xfd\xbd\xce\x04\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xd7\x41\xfc\x9c\xd8\xf6"
      "\x98\x5b\xbd\xe9\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x8e\x3e\x0e\x00\x00\xff\xff\x02"
      "\x97\xd8\x6a",
      1227);
  syz_mount_image(/*fs=*/0x20000040, /*dir=*/0x200001c0, /*flags=MS_NODEV*/ 4,
                  /*opts=*/0x200003c0, /*chdir=*/1, /*size=*/0x4c9,
                  /*img=*/0x20000ec0);
}
int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  do_sandbox_none();
  return 0;
}
