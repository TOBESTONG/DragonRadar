// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x200005c0, "ext4\000", 5);
  memcpy((void*)0x20000000, "./file2\000", 8);
  *(uint8_t*)0x20000b00 = 0;
  memcpy(
      (void*)0x20000600,
      "\x78\x9c\xec\xdd\x4d\x6f\x5b\x59\x19\x00\xe0\xd7\xce\x97\x93\xc9\x4c\x32"
      "\x65\x16\x80\x80\x29\xc3\x40\x41\x55\x9d\xc4\x6d\xa3\xaa\x0b\x28\x2b\x84"
      "\x50\x25\x44\x97\x20\xb5\x21\x71\xa3\x28\x76\x1c\xc5\x4e\x69\x42\x17\xe9"
      "\x7f\x40\xa2\x12\x2b\x58\xf2\x03\x58\x77\xc5\x9e\x0d\x82\x1d\x9b\xb2\x40"
      "\xe2\x23\x02\x35\x95\x58\x18\xdd\xeb\x9b\xd4\x4d\xe3\x24\x34\x1f\xce\xd8"
      "\xcf\x23\x5d\xdd\x7b\xce\xb1\xfd\x9e\xd3\xe8\x9e\xd3\xbc\x56\xee\x09\xa0"
      "\x6f\x5d\x8e\x88\xad\x88\x18\x8e\x88\x07\x11\x31\x91\xd5\xe7\xb2\x23\xee"
      "\xb4\x8e\xe4\x75\x2f\xb7\x9f\xcc\xef\x6c\x3f\x99\xcf\x45\xb3\x79\xef\x9f"
      "\xb9\xb4\x3d\xa9\x8b\xb6\xf7\x24\xde\xcb\x3e\xb3\x10\x11\x3f\xfa\x5e\xc4"
      "\x4f\x73\x6f\xc7\xad\x6f\x6c\x2e\xcf\x55\x2a\xe5\xb5\xac\x3c\xd5\xa8\xae"
      "\x4e\xd5\x37\x36\xaf\x2d\x55\xe7\x16\xcb\x8b\xe5\x95\x52\x69\x76\x66\x76"
      "\xfa\xd6\xf5\x9b\xa5\x53\x1b\xeb\xc7\xd5\xe1\xec\xea\xcb\x2f\xfe\xb0\xf5"
      "\xad\x9f\x27\xdd\x1a\xcf\x6a\xda\xc7\x71\x9a\x5a\x43\x1f\xda\x8b\x93\x18"
      "\x8c\x88\x1f\x9c\x45\xb0\x2e\x18\xc8\xc6\x33\xdc\xed\x8e\xf0\x4e\xf2\x11"
      "\x71\x29\x22\x3e\x49\xef\xff\x89\x18\x48\x7f\x9a\x00\x40\x2f\x6b\x36\x27"
      "\xa2\x39\xd1\x5e\x06\x00\x7a\x5d\x3e\xcd\x81\xe5\xf2\xc5\x2c\x17\x30\x1e"
      "\xf9\x7c\xb1\xd8\xca\xe1\x7d\x14\x63\xf9\x4a\xad\xde\xb8\xfa\xb0\xb6\xbe"
      "\xb2\xd0\xca\x95\x4d\xc6\x50\xfe\xe1\x52\xa5\x3c\x9d\xe5\x0a\x27\x63\x28"
      "\x97\x94\x67\xd2\xeb\xd7\xe5\xd2\xbe\xf2\xf5\x88\xf8\x30\x22\x7e\x31\x32"
      "\x9a\x96\x8b\xf3\xb5\xca\x42\x37\xff\xe3\x03\x00\x7d\xec\xbd\x7d\xeb\xff"
      "\x7f\x46\x5a\xeb\x3f\x00\xd0\xe3\x0a\xdd\xee\x00\x00\x70\xee\xac\xff\x00"
      "\xd0\x7f\xac\xff\x00\xd0\x7f\x0a\x87\x94\x00\x80\xde\x64\xc5\x07\x80\xfe"
      "\x63\xfd\x07\x80\xfe\x63\xfd\x07\x80\xbe\xf2\xc3\xbb\x77\x93\xa3\xb9\x93"
      "\x3d\xff\x7a\xe1\xd1\xc6\xfa\x72\xed\xd1\xb5\x85\x72\x7d\xb9\x58\x5d\x9f"
      "\x2f\xce\xd7\xd6\x56\x8b\x8b\xb5\xda\x62\xfa\xcc\x9e\xea\x51\x9f\x57\xa9"
      "\xd5\x56\x67\x6e\xc4\xfa\xe3\xc9\x6f\xaf\xd6\x1b\x53\xf5\x8d\xcd\xfb\xd5"
      "\xda\xfa\x4a\xe3\x7e\xfa\x5c\xef\xfb\xe5\xa1\x73\x19\x15\x00\x70\x98\x0f"
      "\x3f\x7e\xfe\xe7\x5c\x44\x6c\xdd\x1e\x4d\x8f\x68\xdb\xcb\xc1\x5a\x0d\xbd"
      "\x2d\xdf\xed\x0e\x00\x5d\x33\xd0\xed\x0e\x00\x5d\x63\xb7\x2f\xe8\x5f\x27"
      "\xf8\x1d\x5f\x7a\x00\x7a\xc4\x01\x5b\xf4\xbe\xa1\x10\x11\xa3\xfb\x2b\x9b"
      "\xcd\x66\xf3\xec\xba\x04\x9c\xb1\x2b\x5f\xe8\x98\xff\x97\x1a\x80\x1e\x27"
      "\xff\x0f\xfd\xcb\x22\x0f\xfd\x4b\xfe\x1f\xfa\x57\xb3\x99\x3b\xee\x9e\xff"
      "\x71\xdc\x17\x02\x00\x17\x9b\x2f\xf1\x81\x0e\xdf\xff\x5f\xca\xce\xbf\xcd"
      "\x1e\x11\xf2\x93\x85\xfd\xaf\x78\x76\x96\xbd\x02\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
      "\x8b\x6d\x77\xff\xdf\x62\xb6\x17\xf8\x78\xe4\xf3\xc5\x62\xc4\xfb\x11\x31"
      "\x19\x43\xb9\x87\x4b\x95\xf2\x74\x44\x7c\x10\x11\x7f\x1a\x19\x1a\x49\xca"
      "\x33\x5d\xee\x33\x00\x70\x52\xf9\xbf\xe5\xb2\xfd\xbf\xae\x4c\x7c\x3a\xbe"
      "\xbf\x75\x38\xf7\x6a\x24\x3d\x47\xc4\xcf\x7e\x75\xef\x97\x8f\xe7\x1a\x8d"
      "\xb5\x3f\x26\xf5\xff\xda\xab\x6f\x3c\xcb\xea\x4b\xdd\xe8\x3f\x00\x70\x94"
      "\xdd\x75\x3a\x3d\xb7\xfd\x22\xff\x72\xfb\xc9\xfc\xee\x71\x9e\xfd\xf9\xfb"
      "\x77\x23\xa2\xd0\x8a\xbf\xb3\x3d\x1c\x3b\x7b\xf1\x07\x63\x30\x3d\x17\x62"
      "\x28\x22\xc6\xfe\x9d\xcb\xca\x2d\xb9\xb6\xdc\xc5\x49\x6c\x3d\x8d\x88\xcf"
      "\x1f\x34\xfe\x5c\x8c\xa7\x39\x90\xd6\xce\xa7\xfb\xe3\x27\xb1\xdf\x3f\xd7"
      "\xf8\xf9\x37\xe2\xe7\xd3\xb6\xd6\x39\xf9\xb7\xf8\xdc\x29\xf4\x05\xfa\xcd"
      "\xf3\x64\xfe\xb9\x73\xd0\xfd\x97\x8f\xcb\xe9\xf9\xe0\xfb\xbf\x90\xce\x50"
      "\x27\x97\xcd\x7f\xc9\x47\xcd\xef\xa4\x73\xe0\xeb\xf8\xbb\xf3\xdf\x40\x87"
      "\xf9\xef\xf2\x71\x63\xdc\xf8\xfd\xf7\x5b\x57\xa3\x6f\xb7\x3d\x8d\xf8\xe2"
      "\x60\xc4\x6e\xec\x9d\xb6\xf9\x67\x37\x7e\xae\x43\xfc\x4f\x8f\x19\xff\x2f"
      "\x5f\xfa\xca\x27\x9d\xda\x9a\xbf\x8e\xb8\x12\x07\xc7\x6f\x8f\x35\xd5\xa8"
      "\xae\x4e\xd5\x37\x36\xaf\x2d\x55\xe7\x16\xcb\x8b\xe5\x95\x52\x69\x76\x66"
      "\x76\xfa\xd6\xf5\x9b\xa5\xa9\x34\x47\x3d\xd5\x79\x35\xf8\xc7\xed\xab\x1f"
      "\x74\x6a\x4b\xc6\x3f\xd6\x21\x7e\xe1\x88\xf1\x7f\xfd\x98\xe3\xff\xcd\x7f"
      "\x1f\xfc\xf8\xab\x87\xc4\xff\xe6\xd7\x0e\x8a\x9f\x8f\x8f\x0e\x89\x9f\xac"
      "\x89\xdf\x38\x66\xfc\xb9\xb1\xdf\x15\x3a\xb5\x25\xf1\x17\x3a\x8c\xff\xa8"
      "\x9f\xff\xd5\x63\xc6\x7f\xf1\xd7\xcd\xb7\xb6\x0d\x07\x00\xba\xa7\xbe\xb1"
      "\xb9\x3c\x57\xa9\x94\xd7\x5c\x1c\x79\x31\x12\x11\x17\xa0\x1b\x6f\x5c\x5c"
      "\x8a\x88\x77\x7e\xfb\xe8\x85\x1b\xce\x67\xf9\xe2\x3b\xe7\x15\x6b\x38\xfe"
      "\xaf\x77\x35\x9b\xef\x14\xab\xd3\x8c\x71\x1a\x59\x37\xe0\x22\xd8\xbb\xe9"
      "\x23\xe2\x55\xb7\x3b\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c"
      "\xe8\x3c\xfe\x62\xa9\xdb\x63\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x77\xfd\x2f\x00"
      "\x00\xff\xff\xe2\x79\xcf\xbd",
      1267);
  syz_mount_image(
      /*fs=*/0x200005c0, /*dir=*/0x20000000,
      /*flags=MS_I_VERSION|MS_SILENT|MS_RELATIME|MS_NOSUID|MS_NODEV*/ 0xa08006,
      /*opts=*/0x20000b00, /*chdir=*/4, /*size=*/0x4f3, /*img=*/0x20000600);
  memcpy((void*)0x20000140, "./file1\000", 8);
  syscall(__NR_lchown, /*file=*/0x20000140ul, /*uid=*/-1, /*gid=*/0xee00);
  return 0;
}
