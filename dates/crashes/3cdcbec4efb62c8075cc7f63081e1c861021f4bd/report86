   program syz.1.747 not setting count and/or reply_len properly
netlink: 177 bytes leftover after parsing attributes in process `syz.3.750'.
EXT4-fs (loop3): mounted filesystem without journal. Opts: ,errors=continue
================================
WARNING: inconsistent lock state
5.10.0 #1 Not tainted
--------------------------------
inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
kworker/u4:5/11776 [HC0[0]:SC1[1]:HE1:SE0] takes:
ffff888018058aa8 (&file_data->lock){+.?.}-{2:2}, at: spin_lock include/linux/spinlock.h:354 [inline]
ffff888018058aa8 (&file_data->lock){+.?.}-{2:2}, at: io_file_data_ref_zero+0x75/0x450 fs/io_uring.c:7361
{SOFTIRQ-ON-W} state was registered at:
  lock_acquire kernel/locking/lockdep.c:5437 [inline]
  lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
  __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
  _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
  spin_lock include/linux/spinlock.h:354 [inline]
  io_sqe_files_register fs/io_uring.c:7496 [inline]
  __io_uring_register fs/io_uring.c:9665 [inline]
  __do_sys_io_uring_register+0x3447/0x40a0 fs/io_uring.c:9755
  do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
  entry_SYSCALL_64_after_hwframe+0x44/0xa9
irq event stamp: 1596
hardirqs last  enabled at (1596): [<ffffffff83ecb152>] __raw_spin_unlock_irqrestore include/linux/spinlock_api_smp.h:160 [inline]
hardirqs last  enabled at (1596): [<ffffffff83ecb152>] _raw_spin_unlock_irqrestore+0x42/0x50 kernel/locking/spinlock.c:191
hardirqs last disabled at (1595): [<ffffffff83ecaf1e>] __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:108 [inline]
hardirqs last disabled at (1595): [<ffffffff83ecaf1e>] _raw_spin_lock_irqsave+0x4e/0x50 kernel/locking/spinlock.c:159
softirqs last  enabled at (0): [<ffffffff8115f59c>] copy_process+0x185c/0x69f0 kernel/fork.c:2044
softirqs last disabled at (1531): [<ffffffff84000f92>] asm_call_irq_on_stack+0x12/0x20

other info that might help us debug this:
 Possible unsafe locking scenario:

       CPU0
       ----
  lock(&file_data->lock);
  <Interrupt>
    lock(&file_data->lock);

 *** DEADLOCK ***

4 locks held by kworker/u4:5/11776:
 #0: ffff88800ae00548 (&sig->cred_guard_mutex){+.+.}-{3:3}, at: prepare_bprm_creds fs/exec.c:1449 [inline]
 #0: ffff88800ae00548 (&sig->cred_guard_mutex){+.+.}-{3:3}, at: bprm_execve+0x1c6/0x1bb0 fs/exec.c:1791
 #1: ffffffff85258260 (remove_cache_srcu){....}-{0:0}, at: quarantine_reduce+0x41/0x200 mm/kasan/quarantine.c:269
 #2: ffffffff850e7de0 (rcu_callback){....}-{0:0}, at: rcu_do_batch+0x415/0x1440 kernel/rcu/tree.c:2466
 #3: ffffffff850e7f00 (rcu_read_lock){....}-{1:2}, at: percpu_ref_put_many.constprop.0+0x0/0x2a0

stack backtrace:
CPU: 1 PID: 11776 Comm: kworker/u4:5 Not tainted 5.10.0 #1
Hardware name: QEMU Ubuntu 24.04 PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014
Call Trace:
 <IRQ>
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x107/0x163 lib/dump_stack.c:118
 print_usage_bug kernel/locking/lockdep.c:4413 [inline]
 valid_state kernel/locking/lockdep.c:3751 [inline]
 mark_lock_irq kernel/locking/lockdep.c:3954 [inline]
 mark_lock.cold+0x65/0x90 kernel/locking/lockdep.c:4411
 mark_usage kernel/locking/lockdep.c:4306 [inline]
 __lock_acquire+0x11c2/0x5ca0 kernel/locking/lockdep.c:4786
 lock_acquire kernel/locking/lockdep.c:5437 [inline]
 lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
 __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
 _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
 spin_lock include/linux/spinlock.h:354 [inline]
 io_file_data_ref_zero+0x75/0x450 fs/io_uring.c:7361
 percpu_ref_put_many.constprop.0+0x262/0x2a0 include/linux/percpu-refcount.h:322
 rcu_do_batch+0x496/0x1440 kernel/rcu/tree.c:2476
 rcu_core+0x62d/0x9d0 kernel/rcu/tree.c:2711
 __do_softirq+0x295/0xa3f kernel/softirq.c:298
 asm_call_irq_on_stack+0x12/0x20
 </IRQ>
 __run_on_irqstack arch/x86/include/asm/irq_stack.h:26 [inline]
 run_on_irqstack_cond arch/x86/include/asm/irq_stack.h:77 [inline]
 do_softirq_own_stack+0xaa/0xd0 arch/x86/kernel/irq_64.c:77
 invoke_softirq kernel/softirq.c:393 [inline]
 __irq_exit_rcu+0x1e5/0x220 kernel/softirq.c:423
 irq_exit_rcu+0x5/0x20 kernel/softirq.c:435
 sysvec_apic_timer_interrupt+0x48/0xf0 arch/x86/kernel/apic/apic.c:1091
 asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:631
RIP: 0010:qlink_free mm/kasan/quarantine.c:151 [inline]
RIP: 0010:qlist_free_all+0x3f/0xd0 mm/kasan/quarantine.c:170
Code: a3 00 00 00 49 89 fc 41 bd 00 00 00 80 49 c7 c6 00 00 00 80 48 bd 00 00 00 00 00 fc ff df eb 2c 48 63 87 c0 00 00 00 4c 8b 3e <48> c7 c2 25 42 73 81 48 29 c6 48 89 f0 48 c1 e8 03 c6 04 28 fb e8
RSP: 0018:ffff888012befb20 EFLAGS: 00000202
RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffea000031f500
RDX: 0000000000000001 RSI: ffff88800c7d5b80 RDI: ffff888008144000
RBP: dffffc0000000000 R08: 0000000000000001 R09: 00000000800c0009
R10: 0000000000000001 R11: 0000000000000001 R12: ffff888012befb58
R13: 0000000080000000 R14: ffffffff80000000 R15: ffff88800c7d4280
 quarantine_reduce+0x180/0x200 mm/kasan/quarantine.c:267
 __kasan_kmalloc.constprop.0+0x9e/0xd0 mm/kasan/common.c:442
 slab_post_alloc_hook mm/slab.h:535 [inline]
 slab_alloc_node mm/slub.c:2891 [inline]
 slab_alloc mm/slub.c:2899 [inline]
 kmem_cache_alloc_trace+0x13d/0x270 mm/slub.c:2916
 kmalloc include/linux/slab.h:552 [inline]
 load_elf_binary+0x600/0x4c90 fs/binfmt_elf.c:907
 search_binary_handler fs/exec.c:1703 [inline]
 exec_binprm fs/exec.c:1744 [inline]
 bprm_execve+0xa4d/0x1bb0 fs/exec.c:1820
 kernel_execve+0x371/0x460 fs/exec.c:1969
 call_usermodehelper_exec_async+0x2e1/0x4f0 kernel/umh.c:110
 ret_from_fork+0x22/0x30 arch/x86/entry/entry_64.S:296
----------------
Code disassembly (best guess):
   0:	a3 00 00 00 49 89 fc 	movabs %eax,0xbd41fc8949000000
   7:	41 bd
   9:	00 00                	add    %al,(%rax)
   b:	00 80 49 c7 c6 00    	add    %al,0xc6c749(%rax)
  11:	00 00                	add    %al,(%rax)
  13:	80 48 bd 00          	orb    $0x0,-0x43(%rax)
  17:	00 00                	add    %al,(%rax)
  19:	00 00                	add    %al,(%rax)
  1b:	fc                   	cld
  1c:	ff                   	lcall  (bad)
  1d:	df eb                	fucomip %st(3),%st
  1f:	2c 48                	sub    $0x48,%al
  21:	63 87 c0 00 00 00    	movsxd 0xc0(%rdi),%eax
  27:	4c 8b 3e             	mov    (%rsi),%r15
* 2a:	48 c7 c2 25 42 73 81 	mov    $0xffffffff81734225,%rdx <-- trapping instruction
  31:	48 29 c6             	sub    %rax,%rsi
  34:	48 89 f0             	mov    %rsi,%rax
  37:	48 c1 e8 03          	shr    $0x3,%rax
  3b:	c6 04 28 fb          	movb   $0xfb,(%rax,%rbp,1)
  3f:	e8                   	.byte 0xe8
