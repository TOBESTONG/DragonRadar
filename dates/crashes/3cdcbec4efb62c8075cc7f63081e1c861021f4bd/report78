EXT4-fs (loop1): mounted filesystem without journal. Opts: dioread_nolock,user_xattr,debug_want_extra_isize=0x000000000000005c,resuid=0x000000000000ee01,mblk_io_submit,errors=continue,usrjquota=,prjquota,nodiscard,,errors=continue
================================
WARNING: inconsistent lock state
5.10.0 #1 Not tainted
--------------------------------
inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
modprobe/9340 [HC0[0]:SC1[1]:HE1:SE0] takes:
ffff88800fbc92a8 (&file_data->lock){+.?.}-{2:2}, at: spin_lock include/linux/spinlock.h:354 [inline]
ffff88800fbc92a8 (&file_data->lock){+.?.}-{2:2}, at: io_file_data_ref_zero+0x75/0x450 fs/io_uring.c:7361
{SOFTIRQ-ON-W} state was registered at:
  lock_acquire kernel/locking/lockdep.c:5437 [inline]
  lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
  __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
  _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
  spin_lock include/linux/spinlock.h:354 [inline]
  io_sqe_files_register fs/io_uring.c:7496 [inline]
  __io_uring_register fs/io_uring.c:9665 [inline]
  __do_sys_io_uring_register+0x3447/0x40a0 fs/io_uring.c:9755
  do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
  entry_SYSCALL_64_after_hwframe+0x44/0xa9
irq event stamp: 2072
hardirqs last  enabled at (2072): [<ffffffff83ecb152>] __raw_spin_unlock_irqrestore include/linux/spinlock_api_smp.h:160 [inline]
hardirqs last  enabled at (2072): [<ffffffff83ecb152>] _raw_spin_unlock_irqrestore+0x42/0x50 kernel/locking/spinlock.c:191
hardirqs last disabled at (2071): [<ffffffff83ecaf1e>] __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:108 [inline]
hardirqs last disabled at (2071): [<ffffffff83ecaf1e>] _raw_spin_lock_irqsave+0x4e/0x50 kernel/locking/spinlock.c:159
softirqs last  enabled at (1808): [<ffffffff84000f92>] asm_call_irq_on_stack+0x12/0x20
softirqs last disabled at (2017): [<ffffffff84000f92>] asm_call_irq_on_stack+0x12/0x20

other info that might help us debug this:
 Possible unsafe locking scenario:

       CPU0
       ----
  lock(&file_data->lock);
  <Interrupt>
    lock(&file_data->lock);

 *** DEADLOCK ***

5 locks held by modprobe/9340:
 #0: ffff88801069c4a8 (&mm->mmap_lock#2){++++}-{3:3}, at: mmap_read_trylock include/linux/mmap_lock.h:56 [inline]
 #0: ffff88801069c4a8 (&mm->mmap_lock#2){++++}-{3:3}, at: do_user_addr_fault+0x339/0xc40 arch/x86/mm/fault.c:1313
 #1: ffffffff850e7f00 (rcu_read_lock){....}-{1:2}, at: filemap_map_pages+0x17f/0xdf0 mm/filemap.c:2843
 #2: ffff888017548f78 (ptlock_ptr(page)#2){+.+.}-{2:2}, at: spin_lock include/linux/spinlock.h:354 [inline]
 #2: ffff888017548f78 (ptlock_ptr(page)#2){+.+.}-{2:2}, at: pte_alloc_one_map mm/memory.c:3688 [inline]
 #2: ffff888017548f78 (ptlock_ptr(page)#2){+.+.}-{2:2}, at: alloc_set_pte+0xa09/0xf80 mm/memory.c:3801
 #3: ffffffff850e7de0 (rcu_callback){....}-{0:0}, at: rcu_do_batch+0x415/0x1440 kernel/rcu/tree.c:2466
 #4: ffffffff850e7f00 (rcu_read_lock){....}-{1:2}, at: percpu_ref_put_many.constprop.0+0x0/0x2a0

stack backtrace:
CPU: 1 PID: 9340 Comm: modprobe Not tainted 5.10.0 #1
Hardware name: QEMU Ubuntu 24.04 PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014
Call Trace:
 <IRQ>
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x107/0x163 lib/dump_stack.c:118
 print_usage_bug kernel/locking/lockdep.c:4413 [inline]
 valid_state kernel/locking/lockdep.c:3751 [inline]
 mark_lock_irq kernel/locking/lockdep.c:3954 [inline]
 mark_lock.cold+0x65/0x90 kernel/locking/lockdep.c:4411
 mark_usage kernel/locking/lockdep.c:4306 [inline]
 __lock_acquire+0x11c2/0x5ca0 kernel/locking/lockdep.c:4786
 lock_acquire kernel/locking/lockdep.c:5437 [inline]
 lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
 __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
 _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
 spin_lock include/linux/spinlock.h:354 [inline]
 io_file_data_ref_zero+0x75/0x450 fs/io_uring.c:7361
 percpu_ref_put_many.constprop.0+0x262/0x2a0 include/linux/percpu-refcount.h:322
 rcu_do_batch+0x496/0x1440 kernel/rcu/tree.c:2476
 rcu_core+0x62d/0x9d0 kernel/rcu/tree.c:2711
 __do_softirq+0x295/0xa3f kernel/softirq.c:298
 asm_call_irq_on_stack+0x12/0x20
 </IRQ>
 __run_on_irqstack arch/x86/include/asm/irq_stack.h:26 [inline]
 run_on_irqstack_cond arch/x86/include/asm/irq_stack.h:77 [inline]
 do_softirq_own_stack+0xaa/0xd0 arch/x86/kernel/irq_64.c:77
 invoke_softirq kernel/softirq.c:393 [inline]
 __irq_exit_rcu+0x1e5/0x220 kernel/softirq.c:423
 irq_exit_rcu+0x5/0x20 kernel/softirq.c:435
 sysvec_apic_timer_interrupt+0x48/0xf0 arch/x86/kernel/apic/apic.c:1091
 asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:631
RIP: 0010:debug_lockdep_rcu_enabled+0x10/0x30 kernel/rcu/update.c:278
Code: 81 05 40 ff 16 7c 00 00 00 f0 c3 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 8b 05 5a 4c eb 01 85 c0 74 21 8b 05 1c 5b eb 01 <85> c0 74 17 65 48 8b 04 25 40 ef 01 00 8b 80 4c 09 00 00 85 c0 0f
RSP: 0000:ffff8880167c7c20 EFLAGS: 00000202
RAX: 0000000000000001 RBX: ffff888009e1ddf0 RCX: 1ffff110013d73d1
RDX: 0000000000000008 RSI: ffffffff81597bde RDI: ffff888009eb9e88
RBP: ffffea000010dbb4 R08: 0000000000000001 R09: ffffea000010dbb7
R10: 0000000000000000 R11: 0000000000000001 R12: ffffea000010db80
R13: ffffea000010db88 R14: ffff8880167c7cc8 R15: dffffc0000000000
 xa_entry include/linux/xarray.h:1180 [inline]
 xas_reload include/linux/xarray.h:1563 [inline]
 filemap_map_pages+0x42f/0xdf0 mm/filemap.c:2862
 do_fault_around mm/memory.c:3967 [inline]
 do_read_fault mm/memory.c:4001 [inline]
 do_fault mm/memory.c:4134 [inline]
 handle_pte_fault mm/memory.c:4374 [inline]
 __handle_mm_fault mm/memory.c:4509 [inline]
 handle_mm_fault+0x24f6/0x37e0 mm/memory.c:4607
 do_user_addr_fault+0x645/0xc40 arch/x86/mm/fault.c:1372
 handle_page_fault arch/x86/mm/fault.c:1429 [inline]
 exc_page_fault+0xa2/0x1a0 arch/x86/mm/fault.c:1485
 asm_exc_page_fault+0x1e/0x30 arch/x86/include/asm/idtentry.h:583
RIP: 0033:0x7f2b6090ab50
Code: 00 eb ce 0f 1f 80 00 00 00 00 8b 47 10 85 c0 74 11 4c 8b 47 08 48 8b 07 4c 89 c7 ff e0 0f 1f 44 00 00 c3 0f 1f 80 00 00 00 00 <53> 31 c9 48 89 d3 48 89 f2 48 89 3d d0 ff 14 00 31 f6 31 ff e8 47
RSP: 002b:00007ffdef344988 EFLAGS: 00010206
RAX: 00007f2b6086f970 RBX: 00000000ffffffff RCX: 0000000000800000
RDX: 00007f2b60884c20 RSI: 00007f2b6086f280 RDI: 00007f2b60889408
RBP: 00007f2b60dab968 R08: 0000000000000000 R09: 0000000000000000
R10: fffffffffffff74b R11: 00007f2b6090ab50 R12: 00007f2b60dab060
R13: 00007ffdef344b20 R14: 00007f2b60dac180 R15: 0000000000000000
----------------
Code disassembly (best guess):
   0:	81 05 40 ff 16 7c 00 	addl   $0xf0000000,0x7c16ff40(%rip)        # 0x7c16ff4a
   7:	00 00 f0
   a:	c3                   	ret
   b:	cc                   	int3
   c:	cc                   	int3
   d:	cc                   	int3
   e:	cc                   	int3
   f:	cc                   	int3
  10:	cc                   	int3
  11:	cc                   	int3
  12:	cc                   	int3
  13:	cc                   	int3
  14:	cc                   	int3
  15:	cc                   	int3
  16:	cc                   	int3
  17:	cc                   	int3
  18:	cc                   	int3
  19:	cc                   	int3
  1a:	8b 05 5a 4c eb 01    	mov    0x1eb4c5a(%rip),%eax        # 0x1eb4c7a
  20:	85 c0                	test   %eax,%eax
  22:	74 21                	je     0x45
  24:	8b 05 1c 5b eb 01    	mov    0x1eb5b1c(%rip),%eax        # 0x1eb5b46
* 2a:	85 c0                	test   %eax,%eax <-- trapping instruction
  2c:	74 17                	je     0x45
  2e:	65 48 8b 04 25 40 ef 	mov    %gs:0x1ef40,%rax
  35:	01 00
  37:	8b 80 4c 09 00 00    	mov    0x94c(%rax),%eax
  3d:	85 c0                	test   %eax,%eax
  3f:	0f                   	.byte 0xf
