EXT4-fs (loop1): mounted filesystem without journal. Opts: quota,nodelalloc,errors=remount-ro,grpid,
ext4 filesystem being mounted at /29/file0 supports timestamps until 2038 (0x7fffffff)
======================================================
WARNING: possible circular locking dependency detected
5.10.0 #1 Not tainted
------------------------------------------------------
syz.1.582/10659 is trying to acquire lock:
ffff88801a1d3e20 (&ei->i_mmap_sem){++++}-{3:3}, at: ext4_setattr+0xc42/0x20c0 fs/ext4/inode.c:5418

but task is already holding lock:
ffff88801a1d3f98 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}, at: inode_lock include/linux/fs.h:774 [inline]
ffff88801a1d3f98 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}, at: do_truncate+0x125/0x1f0 fs/open.c:62

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #2 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}:
       down_write+0x8d/0x150 kernel/locking/rwsem.c:1531
       inode_lock include/linux/fs.h:774 [inline]
       ext4_xattr_inode_create fs/ext4/xattr.c:1438 [inline]
       ext4_xattr_inode_lookup_create fs/ext4/xattr.c:1518 [inline]
       ext4_xattr_set_entry+0x299e/0x37c0 fs/ext4/xattr.c:1646
       ext4_xattr_block_set+0x834/0x2f50 fs/ext4/xattr.c:1942
       ext4_xattr_set_handle+0xd01/0x12b0 fs/ext4/xattr.c:2390
       ext4_xattr_set+0x13a/0x340 fs/ext4/xattr.c:2491
       __vfs_setxattr+0x10f/0x170 fs/xattr.c:177
       __vfs_setxattr_noperm+0x11a/0x4c0 fs/xattr.c:208
       __vfs_setxattr_locked+0x1bf/0x250 fs/xattr.c:266
       vfs_setxattr+0xe8/0x270 fs/xattr.c:283
       setxattr+0x23d/0x330 fs/xattr.c:548
       path_setxattr+0x170/0x190 fs/xattr.c:567
       __do_sys_setxattr fs/xattr.c:582 [inline]
       __se_sys_setxattr fs/xattr.c:578 [inline]
       __x64_sys_setxattr+0xc0/0x160 fs/xattr.c:578
       do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9

-> #1 (&ei->xattr_sem){++++}-{3:3}:
       down_write+0x8d/0x150 kernel/locking/rwsem.c:1531
       ext4_write_lock_xattr fs/ext4/xattr.h:142 [inline]
       ext4_inline_data_truncate+0x19b/0xb20 fs/ext4/inline.c:1881
       ext4_truncate+0xa4a/0x1390 fs/ext4/inode.c:4211
       ext4_setattr+0x13c9/0x20c0 fs/ext4/inode.c:5493
       notify_change+0xb9e/0x1090 fs/attr.c:336
       do_truncate+0x134/0x1f0 fs/open.c:64
       handle_truncate fs/namei.c:2910 [inline]
       do_open fs/namei.c:3256 [inline]
       path_openat+0x1d7a/0x26f0 fs/namei.c:3369
       do_filp_open+0x17e/0x3c0 fs/namei.c:3396
       do_sys_openat2+0x16d/0x420 fs/open.c:1168
       do_sys_open fs/open.c:1184 [inline]
       __do_sys_open fs/open.c:1192 [inline]
       __se_sys_open fs/open.c:1188 [inline]
       __x64_sys_open+0x119/0x1c0 fs/open.c:1188
       do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9

-> #0 (&ei->i_mmap_sem){++++}-{3:3}:
       check_prev_add kernel/locking/lockdep.c:2868 [inline]
       check_prevs_add kernel/locking/lockdep.c:2993 [inline]
       validate_chain kernel/locking/lockdep.c:3608 [inline]
       __lock_acquire+0x2ac4/0x5ca0 kernel/locking/lockdep.c:4832
       lock_acquire kernel/locking/lockdep.c:5437 [inline]
       lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
       down_write+0x8d/0x150 kernel/locking/rwsem.c:1531
       ext4_setattr+0xc42/0x20c0 fs/ext4/inode.c:5418
       notify_change+0xb9e/0x1090 fs/attr.c:336
       do_truncate+0x134/0x1f0 fs/open.c:64
       do_sys_ftruncate+0x596/0x8b0 fs/open.c:195
       do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9

other info that might help us debug this:

Chain exists of:
  &ei->i_mmap_sem --> &ei->xattr_sem --> &ea_inode->i_rwsem#14/1

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(&ea_inode->i_rwsem#14/1);
                               lock(&ei->xattr_sem);
                               lock(&ea_inode->i_rwsem#14/1);
  lock(&ei->i_mmap_sem);

 *** DEADLOCK ***

2 locks held by syz.1.582/10659:
 #0: ffff888008b14438 (sb_writers#3){.+.+}-{0:0}, at: do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
 #1: ffff88801a1d3f98 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}, at: inode_lock include/linux/fs.h:774 [inline]
 #1: ffff88801a1d3f98 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}, at: do_truncate+0x125/0x1f0 fs/open.c:62

stack backtrace:
CPU: 0 PID: 10659 Comm: syz.1.582 Not tainted 5.10.0 #1
Hardware name: QEMU Ubuntu 24.04 PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014
Call Trace:
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x107/0x163 lib/dump_stack.c:118
 check_noncircular+0x25f/0x2e0 kernel/locking/lockdep.c:2117
 check_prev_add kernel/locking/lockdep.c:2868 [inline]
 check_prevs_add kernel/locking/lockdep.c:2993 [inline]
 validate_chain kernel/locking/lockdep.c:3608 [inline]
 __lock_acquire+0x2ac4/0x5ca0 kernel/locking/lockdep.c:4832
 lock_acquire kernel/locking/lockdep.c:5437 [inline]
 lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
 down_write+0x8d/0x150 kernel/locking/rwsem.c:1531
 ext4_setattr+0xc42/0x20c0 fs/ext4/inode.c:5418
 notify_change+0xb9e/0x1090 fs/attr.c:336
 do_truncate+0x134/0x1f0 fs/open.c:64
 do_sys_ftruncate+0x596/0x8b0 fs/open.c:195
 do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
 entry_SYSCALL_64_after_hwframe+0x44/0xa9
RIP: 0033:0x7f69d69fdef9
Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 a8 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007f69d5677038 EFLAGS: 00000246 ORIG_RAX: 000000000000004d
RAX: ffffffffffffffda RBX: 00007f69d6bb5f80 RCX: 00007f69d69fdef9
RDX: 0000000000000000 RSI: 0000000002007ffb RDI: 0000000000000008
RBP: 00007f69d6a70b76 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
R13: 0000000000000000 R14: 00007f69d6bb5f80 R15: 00007ffd787707d8
device lo left promiscuous mode
