EXT4-fs (loop0): mounted filesystem without journal. Opts: noload,resuid=0x000000000000ee01,debug_want_extra_isize=0x000000000000002e,jqfmt=vfsv1,errors=remount-ro,nouid32,
 loop0: p1 p2 p3
Unrecognized hibernate image header format!
PM: hibernation: Image mismatch: architecture specific data
======================================================
WARNING: possible circular locking dependency detected
5.10.0 #1 Not tainted
------------------------------------------------------
syz.3.329/8042 is trying to acquire lock:
ffff88801a4051d0 (&ei->i_mmap_sem){++++}-{3:3}, at: ext4_setattr+0xc42/0x20c0 fs/ext4/inode.c:5418

but task is already holding lock:
ffff88801a405348 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}, at: inode_lock include/linux/fs.h:774 [inline]
ffff88801a405348 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}, at: do_truncate+0x125/0x1f0 fs/open.c:62

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #2 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}:
       down_write+0x8d/0x150 kernel/locking/rwsem.c:1531
       inode_lock include/linux/fs.h:774 [inline]
       ext4_xattr_inode_create fs/ext4/xattr.c:1438 [inline]
       ext4_xattr_inode_lookup_create fs/ext4/xattr.c:1518 [inline]
       ext4_xattr_set_entry+0x299e/0x37c0 fs/ext4/xattr.c:1646
       ext4_xattr_ibody_inline_set+0x78/0x2b0 fs/ext4/xattr.c:2198
       ext4_xattr_set_handle+0x939/0x12b0 fs/ext4/xattr.c:2378
       ext4_initxattrs+0xb5/0x120 fs/ext4/xattr_security.c:43
       security_inode_init_security+0x1a7/0x350 security/security.c:1053
       __ext4_new_inode+0x38ec/0x55b0 fs/ext4/ialloc.c:1317
       ext4_create+0x2ce/0x4d0 fs/ext4/namei.c:2619
       lookup_open+0xf52/0x1330 fs/namei.c:3104
       open_last_lookups fs/namei.c:3178 [inline]
       path_openat+0x93f/0x26f0 fs/namei.c:3366
       do_filp_open+0x17e/0x3c0 fs/namei.c:3396
       do_sys_openat2+0x16d/0x420 fs/open.c:1168
       do_sys_open fs/open.c:1184 [inline]
       __do_sys_openat fs/open.c:1200 [inline]
       __se_sys_openat fs/open.c:1195 [inline]
       __x64_sys_openat+0x13f/0x1f0 fs/open.c:1195
       do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9

-> #1 (&ei->xattr_sem){++++}-{3:3}:
       down_read+0x96/0x450 kernel/locking/rwsem.c:1492
       ext4_readpage_inline+0x2d/0x410 fs/ext4/inline.c:502
       ext4_readpage+0x16a/0x3b0 fs/ext4/inode.c:3236
       filemap_fault+0x6a5/0x2310 mm/filemap.c:2804
       ext4_filemap_fault+0x87/0xc0 fs/ext4/inode.c:6192
       __do_fault+0x113/0x410 mm/memory.c:3612
       do_cow_fault mm/memory.c:4035 [inline]
       do_fault mm/memory.c:4136 [inline]
       handle_pte_fault mm/memory.c:4374 [inline]
       __handle_mm_fault mm/memory.c:4509 [inline]
       handle_mm_fault+0xfa1/0x37e0 mm/memory.c:4607
       do_user_addr_fault+0x645/0xc40 arch/x86/mm/fault.c:1372
       handle_page_fault arch/x86/mm/fault.c:1429 [inline]
       exc_page_fault+0xa2/0x1a0 arch/x86/mm/fault.c:1485
       asm_exc_page_fault+0x1e/0x30 arch/x86/include/asm/idtentry.h:583

-> #0 (&ei->i_mmap_sem){++++}-{3:3}:
       check_prev_add kernel/locking/lockdep.c:2868 [inline]
       check_prevs_add kernel/locking/lockdep.c:2993 [inline]
       validate_chain kernel/locking/lockdep.c:3608 [inline]
       __lock_acquire+0x2ac4/0x5ca0 kernel/locking/lockdep.c:4832
       lock_acquire kernel/locking/lockdep.c:5437 [inline]
       lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
       down_write+0x8d/0x150 kernel/locking/rwsem.c:1531
       ext4_setattr+0xc42/0x20c0 fs/ext4/inode.c:5418
       notify_change+0xb9e/0x1090 fs/attr.c:336
       do_truncate+0x134/0x1f0 fs/open.c:64
       handle_truncate fs/namei.c:2910 [inline]
       do_open fs/namei.c:3256 [inline]
       path_openat+0x1d7a/0x26f0 fs/namei.c:3369
       do_filp_open+0x17e/0x3c0 fs/namei.c:3396
       do_sys_openat2+0x16d/0x420 fs/open.c:1168
       do_sys_open fs/open.c:1184 [inline]
       __do_sys_creat fs/open.c:1258 [inline]
       __se_sys_creat fs/open.c:1252 [inline]
       __x64_sys_creat+0xc9/0x120 fs/open.c:1252
       do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9

other info that might help us debug this:

Chain exists of:
  &ei->i_mmap_sem --> &ei->xattr_sem --> &ea_inode->i_rwsem#14/1

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(&ea_inode->i_rwsem#14/1);
                               lock(&ei->xattr_sem);
                               lock(&ea_inode->i_rwsem#14/1);
  lock(&ei->i_mmap_sem);

 *** DEADLOCK ***

2 locks held by syz.3.329/8042:
 #0: ffff88801164e438 (sb_writers#3){.+.+}-{0:0}, at: do_open fs/namei.c:3245 [inline]
 #0: ffff88801164e438 (sb_writers#3){.+.+}-{0:0}, at: path_openat+0x1a6f/0x26f0 fs/namei.c:3369
 #1: ffff88801a405348 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}, at: inode_lock include/linux/fs.h:774 [inline]
 #1: ffff88801a405348 (&ea_inode->i_rwsem#14/1){+.+.}-{3:3}, at: do_truncate+0x125/0x1f0 fs/open.c:62

stack backtrace:
CPU: 0 PID: 8042 Comm: syz.3.329 Not tainted 5.10.0 #1
Hardware name: QEMU Ubuntu 24.04 PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014
Call Trace:
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x107/0x163 lib/dump_stack.c:118
 check_noncircular+0x25f/0x2e0 kernel/locking/lockdep.c:2117
 check_prev_add kernel/locking/lockdep.c:2868 [inline]
 check_prevs_add kernel/locking/lockdep.c:2993 [inline]
 validate_chain kernel/locking/lockdep.c:3608 [inline]
 __lock_acquire+0x2ac4/0x5ca0 kernel/locking/lockdep.c:4832
 lock_acquire kernel/locking/lockdep.c:5437 [inline]
 lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
 down_write+0x8d/0x150 kernel/locking/rwsem.c:1531
 ext4_setattr+0xc42/0x20c0 fs/ext4/inode.c:5418
 notify_change+0xb9e/0x1090 fs/attr.c:336
 do_truncate+0x134/0x1f0 fs/open.c:64
 handle_truncate fs/namei.c:2910 [inline]
 do_open fs/namei.c:3256 [inline]
 path_openat+0x1d7a/0x26f0 fs/namei.c:3369
 do_filp_open+0x17e/0x3c0 fs/namei.c:3396
 do_sys_openat2+0x16d/0x420 fs/open.c:1168
 do_sys_open fs/open.c:1184 [inline]
 __do_sys_creat fs/open.c:1258 [inline]
 __se_sys_creat fs/open.c:1252 [inline]
 __x64_sys_creat+0xc9/0x120 fs/open.c:1252
 do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
 entry_SYSCALL_64_after_hwframe+0x44/0xa9
RIP: 0033:0x7f09097d8ef9
Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 a8 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007f0908410038 EFLAGS: 00000246 ORIG_RAX: 0000000000000055
RAX: ffffffffffffffda RBX: 00007f0909991130 RCX: 00007f09097d8ef9
RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000080
RBP: 00007f090984bb76 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
R13: 0000000000000000 R14: 00007f0909991130 R15: 00007ffc28707ca8
