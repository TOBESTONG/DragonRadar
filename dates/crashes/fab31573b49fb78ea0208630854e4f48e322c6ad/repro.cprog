// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <sched.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#include <linux/capability.h>
#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

static void sandbox_common_mount_tmpfs(void)
{
  write_file("/proc/sys/fs/mount-max", "100000");
  if (mkdir("./syz-tmp", 0777))
    exit(1);
  if (mount("", "./syz-tmp", "tmpfs", 0, NULL))
    exit(1);
  if (mkdir("./syz-tmp/newroot", 0777))
    exit(1);
  if (mkdir("./syz-tmp/newroot/dev", 0700))
    exit(1);
  unsigned bind_mount_flags = MS_BIND | MS_REC | MS_PRIVATE;
  if (mount("/dev", "./syz-tmp/newroot/dev", NULL, bind_mount_flags, NULL))
    exit(1);
  if (mkdir("./syz-tmp/newroot/proc", 0700))
    exit(1);
  if (mount("syz-proc", "./syz-tmp/newroot/proc", "proc", 0, NULL))
    exit(1);
  if (mkdir("./syz-tmp/newroot/selinux", 0700))
    exit(1);
  const char* selinux_path = "./syz-tmp/newroot/selinux";
  if (mount("/selinux", selinux_path, NULL, bind_mount_flags, NULL)) {
    if (errno != ENOENT)
      exit(1);
    if (mount("/sys/fs/selinux", selinux_path, NULL, bind_mount_flags, NULL) &&
        errno != ENOENT)
      exit(1);
  }
  if (mkdir("./syz-tmp/newroot/sys", 0700))
    exit(1);
  if (mount("/sys", "./syz-tmp/newroot/sys", 0, bind_mount_flags, NULL))
    exit(1);
  if (mkdir("./syz-tmp/pivot", 0777))
    exit(1);
  if (syscall(SYS_pivot_root, "./syz-tmp", "./syz-tmp/pivot")) {
    if (chdir("./syz-tmp"))
      exit(1);
  } else {
    if (chdir("/"))
      exit(1);
    if (umount2("./pivot", MNT_DETACH))
      exit(1);
  }
  if (chroot("./newroot"))
    exit(1);
  if (chdir("/"))
    exit(1);
}

static void setup_common()
{
  if (mount(0, "/sys/fs/fuse/connections", "fusectl", 0, 0)) {
  }
}

static void setup_binderfs()
{
  if (mkdir("/dev/binderfs", 0777)) {
  }
  if (mount("binder", "/dev/binderfs", "binder", 0, NULL)) {
  }
  if (symlink("/dev/binderfs", "./binderfs")) {
  }
}

static void loop();

static void sandbox_common()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setsid();
  struct rlimit rlim;
  rlim.rlim_cur = rlim.rlim_max = (200 << 20);
  setrlimit(RLIMIT_AS, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 32 << 20;
  setrlimit(RLIMIT_MEMLOCK, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 136 << 20;
  setrlimit(RLIMIT_FSIZE, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 1 << 20;
  setrlimit(RLIMIT_STACK, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 128 << 20;
  setrlimit(RLIMIT_CORE, &rlim);
  rlim.rlim_cur = rlim.rlim_max = 256;
  setrlimit(RLIMIT_NOFILE, &rlim);
  if (unshare(CLONE_NEWNS)) {
  }
  if (mount(NULL, "/", NULL, MS_REC | MS_PRIVATE, NULL)) {
  }
  if (unshare(CLONE_NEWIPC)) {
  }
  if (unshare(0x02000000)) {
  }
  if (unshare(CLONE_NEWUTS)) {
  }
  if (unshare(CLONE_SYSVSEM)) {
  }
  typedef struct {
    const char* name;
    const char* value;
  } sysctl_t;
  static const sysctl_t sysctls[] = {
      {"/proc/sys/kernel/shmmax", "16777216"},
      {"/proc/sys/kernel/shmall", "536870912"},
      {"/proc/sys/kernel/shmmni", "1024"},
      {"/proc/sys/kernel/msgmax", "8192"},
      {"/proc/sys/kernel/msgmni", "1024"},
      {"/proc/sys/kernel/msgmnb", "1024"},
      {"/proc/sys/kernel/sem", "1024 1048576 500 1024"},
  };
  unsigned i;
  for (i = 0; i < sizeof(sysctls) / sizeof(sysctls[0]); i++)
    write_file(sysctls[i].name, sysctls[i].value);
}

static int wait_for_loop(int pid)
{
  if (pid < 0)
    exit(1);
  int status = 0;
  while (waitpid(-1, &status, __WALL) != pid) {
  }
  return WEXITSTATUS(status);
}

static void drop_caps(void)
{
  struct __user_cap_header_struct cap_hdr = {};
  struct __user_cap_data_struct cap_data[2] = {};
  cap_hdr.version = _LINUX_CAPABILITY_VERSION_3;
  cap_hdr.pid = getpid();
  if (syscall(SYS_capget, &cap_hdr, &cap_data))
    exit(1);
  const int drop = (1 << CAP_SYS_PTRACE) | (1 << CAP_SYS_NICE);
  cap_data[0].effective &= ~drop;
  cap_data[0].permitted &= ~drop;
  cap_data[0].inheritable &= ~drop;
  if (syscall(SYS_capset, &cap_hdr, &cap_data))
    exit(1);
}

static int do_sandbox_none(void)
{
  if (unshare(CLONE_NEWPID)) {
  }
  int pid = fork();
  if (pid != 0)
    return wait_for_loop(pid);
  setup_common();
  sandbox_common();
  drop_caps();
  if (unshare(CLONE_NEWNET)) {
  }
  write_file("/proc/sys/net/ipv4/ping_group_range", "0 65535");
  sandbox_common_mount_tmpfs();
  setup_binderfs();
  loop();
  exit(1);
}

void loop(void)
{
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x20000040, "ext4\000", 5);
  memcpy((void*)0x20000500, "./file0\000", 8);
  memcpy((void*)0x20000140, "nobarrier", 9);
  *(uint8_t*)0x20000149 = 0x2c;
  memcpy((void*)0x2000014a, "noblock_validity", 16);
  *(uint8_t*)0x2000015a = 0x2c;
  memcpy((void*)0x2000015b, "lazytime", 8);
  *(uint8_t*)0x20000163 = 0x2c;
  memcpy((void*)0x20000164, "barrier", 7);
  *(uint8_t*)0x2000016b = 0x3d;
  sprintf((char*)0x2000016c, "0x%016llx", (long long)3);
  *(uint8_t*)0x2000017e = 0x2c;
  memcpy((void*)0x2000017f, "errors=remount-ro", 17);
  *(uint8_t*)0x20000190 = 0x2c;
  memcpy((void*)0x20000191, "resuid", 6);
  *(uint8_t*)0x20000197 = 0x3d;
  sprintf((char*)0x20000198, "0x%016llx", (long long)0xee00);
  *(uint8_t*)0x200001aa = 0x2c;
  memcpy((void*)0x200001ab, "errors=remount-ro", 17);
  *(uint8_t*)0x200001bc = 0x2c;
  memcpy((void*)0x200001bd, "resgid", 6);
  *(uint8_t*)0x200001c3 = 0x3d;
  sprintf((char*)0x200001c4, "0x%016llx", (long long)0xee01);
  *(uint8_t*)0x200001d6 = 0x2c;
  memcpy((void*)0x200001d7, "resgid", 6);
  *(uint8_t*)0x200001dd = 0x3d;
  sprintf((char*)0x200001de, "0x%016llx", (long long)0xee00);
  *(uint8_t*)0x200001f0 = 0x32;
  *(uint8_t*)0x200001f1 = 0;
  memcpy(
      (void*)0x20000540,
      "\x78\x9c\xec\xdd\xdf\x6b\x5b\xd7\x1d\x00\xf0\xef\x95\xad\xc4\x49\x9c\xd9"
      "\x61\x7b\xc8\x02\xcb\xc2\x92\x61\x87\x2d\x92\x1d\x2f\x89\xd9\x43\xb6\xc1"
      "\xd8\x9e\x02\xdb\xb2\xf7\xcc\xb3\x65\x63\x2c\x5b\xc6\x92\x93\xd8\x84\xcd"
      "\x61\x7f\xc0\x60\x8c\xad\xd0\xa7\x3e\xf5\xa5\xd0\x3f\xa0\x50\xf2\x27\x94"
      "\x42\xa0\x7d\x2f\x6d\x69\x29\x6d\xd2\x3e\xf4\xa1\x8d\x8a\xae\xa4\xd4\x71"
      "\xe4\xd8\x4e\x64\x29\x58\x9f\x0f\xdc\xe8\x9c\xfb\x43\xdf\xf3\x55\xac\x23"
      "\x9d\x7b\x0f\xba\x01\xf4\xac\x33\x11\x71\x31\x22\x1e\x55\xab\xd5\x5a\x7d"
      "\xa8\xb1\x3e\xd3\x58\x22\x89\x88\x8d\xfa\x7e\x0f\x1f\xdc\x99\xae\x2d\x49"
      "\x54\xab\xd7\x3f\x4f\xd2\x4d\xb5\x7a\x6d\xb7\xd1\x4d\xcf\x79\xac\x7e\x48"
      "\x0c\x44\xc4\x5f\xfe\x18\xf1\xf7\xe4\xe9\xb8\xe5\xb5\xf5\x85\xa9\x62\xb1"
      "\xb0\xd2\xa8\xe7\x2b\x8b\xcb\xf9\xf2\xda\xfa\x85\xf9\xc5\xa9\xb9\xc2\x5c"
      "\x61\x69\x62\x62\xfc\xf2\xe4\x95\xc9\x4b\x93\x63\x6d\xc9\x73\x30\x22\xae"
      "\xfe\xfe\xe3\xff\xfd\xfb\xf5\x3f\x5c\x7d\xfb\x97\xb7\x3e\xb8\xf1\xe9\xe8"
      "\x3f\x92\xc6\xfa\xd8\x94\x47\xbb\xd5\x53\xcf\xa6\xaf\x45\x53\x7f\x44\xac"
      "\xec\x47\xb0\x2e\xe8\x6b\xe4\x93\xed\x76\x43\x00\x00\xd8\x95\xe6\xf7\xfc"
      "\x9f\x45\xc4\xf9\x18\x8a\xbe\xf4\xdb\x1c\x00\x00\x00\x70\x90\x54\x7f\x33"
      "\x18\xdf\x24\x11\xd5\xe7\x74\xf8\x79\x0f\x04\x00\x00\x00\x3a\x26\x93\xce"
      "\x81\x4d\x32\xb9\xc6\x3c\x80\xc1\xc8\x64\x72\xb9\xfa\x1c\xde\x1f\xc5\xd1"
      "\x4c\xb1\x54\xae\xfc\x62\xb6\xb4\xba\x34\x53\x9f\x2b\x3b\x1c\xd9\xcc\xec"
      "\x7c\xb1\x30\xd6\x98\x2b\x3c\x1c\xd9\xa4\x56\x1f\x4f\xcb\xdf\xd7\x2f\x6e"
      "\xa9\x4f\x44\xc4\x89\x88\xf8\xef\xd0\x91\xb4\x9e\x9b\x2e\x15\x67\xba\x7d"
      "\xf2\x03\x00\x00\x00\x7a\xc4\xb1\x2d\xe3\xff\xaf\x86\xea\xe3\x7f\x00\x00"
      "\x00\xe0\x80\x19\xee\x76\x03\x00\x00\x00\x80\x7d\x67\xfc\x0f\x00\x00\x00"
      "\x07\x9f\xf1\x3f\x00\x00\x00\x1c\x68\x7f\xba\x76\xad\xb6\x54\x9b\xf7\xbf"
      "\x9e\xb9\xb9\xb6\xba\x50\xba\x79\x61\xa6\x50\x5e\xc8\x2d\xae\x4e\xe7\xa6"
      "\x4b\x2b\xcb\xb9\xb9\x52\x69\x2e\xfd\xcd\xbe\xc5\x9d\x9e\xaf\x58\x2a\x2d"
      "\xff\x2a\x96\x56\x6f\xe7\x2b\x85\x72\x25\x5f\x5e\x5b\xbf\xb1\x58\x5a\x5d"
      "\xaa\xdc\x98\x7f\xe2\x16\xd8\x00\x00\x00\x40\x07\x9d\xf8\xe9\xbd\xf7\x93"
      "\x88\xd8\xf8\xf5\x91\x74\xa9\x39\xd4\xed\x46\x01\x1d\xd1\xbf\x97\x9d\x3f"
      "\xda\xbf\x76\x00\x9d\xd7\xd7\xed\x06\x00\x5d\xb3\xa7\xcf\x7f\xe0\x40\xc9"
      "\x76\xbb\x01\x40\xd7\x25\x3b\x6c\xdf\x76\xf2\xce\x3b\xed\x6f\x0b\x00\x00"
      "\xb0\x3f\x46\x7e\xdc\xfa\xfa\x7f\xb2\xe3\xb9\x81\x8d\x4c\x87\x9a\x08\xec"
      "\x13\xe7\xff\xa0\x77\xb9\xfe\x0f\xbd\xcb\xf5\x7f\xe8\x5d\xd9\xe8\x0b\x03"
      "\x79\xe8\x6d\xfb\x7f\xfd\xbf\x5a\xdd\x53\x83\x00\x00\x80\xb6\x1b\x4c\x97"
      "\x24\x93\x8b\x48\xcf\x03\x0c\x46\x26\x93\xcb\x45\x1c\x4f\x6f\x0b\x90\x4d"
      "\x66\xe7\x8b\x85\xb1\x88\xf8\x41\x44\xbc\x37\x94\x3d\x5c\xab\x8f\xa7\x47"
      "\x26\x3b\x8e\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x80\xba\x6a\x35\x89\x2a\x00\x00\x00\x70\xa0\x45\x64"
      "\x3e\x49\x1a\xf7\xff\x1a\x19\x3a\x37\xb8\xf5\xfc\xc0\xa1\xe4\xeb\xa1\xf4"
      "\x31\x22\x6e\xbd\x7a\xfd\xff\xb7\xa7\x2a\x95\x95\xf1\xda\xfa\x2f\x1e\xaf"
      "\xaf\xbc\xd2\x58\x7f\xb1\x1b\x67\x30\x00\x00\x00\x80\xad\x9a\xe3\xf4\xe6"
      "\x38\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\xda\xe9\xe1\x83\x3b\xd3\xcd\xa5\x93\x71\x3f\xfb\x5d\x44\x0c"
      "\xb7\x8a\xdf\x1f\x03\xe9\xe3\x40\x64\x23\xe2\xe8\x97\x49\xf4\x6f\x3a\x2e"
      "\x89\x88\xbe\x36\xc4\xdf\xb8\x1b\x11\x27\x5b\xc5\x4f\x6a\xcd\x8a\xe1\x46"
      "\x2b\x5a\xc5\x3f\xd2\xc5\xf8\x99\x88\x38\xd6\x86\xf8\xd0\xcb\xee\xd5\xfa"
      "\x9f\xdf\xb6\x7a\xff\x65\xe2\x4c\xfa\xd8\xfa\xfd\x77\x39\xed\xa1\x5e\xdc"
      "\xb6\xfd\x5f\xd2\xdc\x63\x20\xed\xe7\x5a\xf5\x3f\xc7\x77\x19\xe3\xd4\xfd"
      "\x37\xf3\xdb\xc6\xbf\x1b\x71\xaa\xbf\x75\xff\xd3\xec\x7f\x93\x6d\xe2\x9f"
      "\xdd\x65\xfc\xbf\xfd\x75\x7d\x7d\xbb\x6d\xd5\xd7\x22\x46\x5a\x7e\xfe\x24"
      "\x4f\xc4\xca\x57\x16\x97\xf3\xe5\xb5\xf5\x0b\xf3\x8b\x53\x73\x85\xb9\xc2"
      "\xd2\xc4\xc4\xf8\xe5\xc9\x2b\x93\x97\x26\xc7\xf2\xb3\xf3\xc5\x42\xe3\xdf"
      "\x4d\x5d\xf2\x99\xc7\xa5\xff\xfc\xe4\xad\x47\xcf\xca\xff\xe8\x36\xf1\x87"
      "\x77\xc8\xff\xdc\x2e\xf3\xff\xf6\xfe\xed\x07\x3f\xac\x17\xb3\xad\xe2\x8f"
      "\x9e\x6d\xfd\xf7\x77\x72\x9b\xf8\x99\xc6\x67\xdf\xcf\x1b\xe5\xda\xf6\x91"
      "\x66\x79\xa3\x5e\xde\xec\xf4\x1b\xef\x9e\x7e\x56\xfe\x33\xf5\xfc\xfb\xf7"
      "\xfa\xff\x3f\xba\xcb\xfc\xcf\xff\xf9\x5f\x1f\xee\x72\x57\x00\xa0\x03\xca"
      "\x6b\xeb\x0b\x53\xc5\x62\x61\xa5\xa7\x0b\x2f\xf4\x6a\xd4\xbe\x16\xbd\x14"
      "\x59\x28\xec\xb5\xf0\xcf\x97\xa3\x19\x2f\x65\xa1\xbb\xfd\x12\x00\x00\xd0"
      "\x7e\x4f\x8f\x81\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x80\x4e\xeb\xe4\xaf\xeb\x35\x6d\x74\x27\x55\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x67"
      "\xfa\x2e\x00\x00\xff\xff\x60\x2a\xd2\xc1",
      1234);
  syz_mount_image(
      /*fs=*/0x20000040, /*dir=*/0x20000500,
      /*flags=MS_REC|MS_SILENT|MS_NOSUID|MS_NODIRATIME|0x104*/ 0xc906,
      /*opts=*/0x20000140, /*chdir=*/0x1e, /*size=*/0x4d2, /*img=*/0x20000540);
  memcpy((void*)0x20000100, "./bus\000", 6);
  syscall(__NR_open, /*file=*/0x20000100ul,
          /*flags=O_SYNC|O_NOCTTY|O_NOATIME|O_DIRECT|O_CREAT|0x402*/ 0x145542ul,
          /*mode=*/0ul);
}
int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  do_sandbox_none();
  return 0;
}
