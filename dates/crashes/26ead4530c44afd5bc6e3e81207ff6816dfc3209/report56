ext4 filesystem being mounted at /6/file1 supports timestamps until 2038 (0x7fffffff)
FAT-fs (loop3): IO charset asciard not found
mmap: syz.0.87 (3673) uses deprecated remap_file_pages() syscall. See Documentation/vm/remap_file_pages.rst.
================================
WARNING: inconsistent lock state
5.10.0 #1 Not tainted
--------------------------------
inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
syz-executor/232 [HC0[0]:SC1[1]:HE1:SE0] takes:
ffff88800b685ca8 (&file_data->lock){+.?.}-{2:2}, at: spin_lock include/linux/spinlock.h:354 [inline]
ffff88800b685ca8 (&file_data->lock){+.?.}-{2:2}, at: io_file_data_ref_zero+0x75/0x450 fs/io_uring.c:7361
{SOFTIRQ-ON-W} state was registered at:
  lock_acquire kernel/locking/lockdep.c:5437 [inline]
  lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
  __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
  _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
  spin_lock include/linux/spinlock.h:354 [inline]
  io_sqe_files_register fs/io_uring.c:7496 [inline]
  __io_uring_register fs/io_uring.c:9665 [inline]
  __do_sys_io_uring_register+0x3447/0x40a0 fs/io_uring.c:9755
  do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
  entry_SYSCALL_64_after_hwframe+0x44/0xa9
irq event stamp: 168328
hardirqs last  enabled at (168328): [<ffffffff83ecb152>] __raw_spin_unlock_irqrestore include/linux/spinlock_api_smp.h:160 [inline]
hardirqs last  enabled at (168328): [<ffffffff83ecb152>] _raw_spin_unlock_irqrestore+0x42/0x50 kernel/locking/spinlock.c:191
hardirqs last disabled at (168327): [<ffffffff83ecaf1e>] __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:108 [inline]
hardirqs last disabled at (168327): [<ffffffff83ecaf1e>] _raw_spin_lock_irqsave+0x4e/0x50 kernel/locking/spinlock.c:159
softirqs last  enabled at (168178): [<ffffffff81099056>] memcpy include/linux/string.h:399 [inline]
softirqs last  enabled at (168178): [<ffffffff81099056>] fpu__copy+0x176/0x640 arch/x86/kernel/fpu/core.c:240
softirqs last disabled at (168273): [<ffffffff84000f92>] asm_call_irq_on_stack+0x12/0x20

other info that might help us debug this:
 Possible unsafe locking scenario:

       CPU0
       ----
  lock(&file_data->lock);
  <Interrupt>
    lock(&file_data->lock);

 *** DEADLOCK ***

6 locks held by syz-executor/232:
 #0: ffffffff851c5430 (dup_mmap_sem){.+.+}-{0:0}, at: dup_mmap kernel/fork.c:478 [inline]
 #0: ffffffff851c5430 (dup_mmap_sem){.+.+}-{0:0}, at: dup_mm+0x100/0x1110 kernel/fork.c:1357
 #1: ffff88800c40a2e8 (&mm->mmap_lock#2){++++}-{3:3}, at: mmap_write_lock_killable include/linux/mmap_lock.h:26 [inline]
 #1: ffff88800c40a2e8 (&mm->mmap_lock#2){++++}-{3:3}, at: dup_mmap kernel/fork.c:479 [inline]
 #1: ffff88800c40a2e8 (&mm->mmap_lock#2){++++}-{3:3}, at: dup_mm+0x118/0x1110 kernel/fork.c:1357
 #2: ffff88800a066668 (&mm->mmap_lock/1){+.+.}-{3:3}, at: mmap_write_lock_nested include/linux/mmap_lock.h:21 [inline]
 #2: ffff88800a066668 (&mm->mmap_lock/1){+.+.}-{3:3}, at: dup_mmap kernel/fork.c:488 [inline]
 #2: ffff88800a066668 (&mm->mmap_lock/1){+.+.}-{3:3}, at: dup_mm+0x159/0x1110 kernel/fork.c:1357
 #3: ffffffff850e7f00 (rcu_read_lock){....}-{1:2}, at: __is_insn_slot_addr+0x0/0x270
 #4: ffffffff850e7de0 (rcu_callback){....}-{0:0}, at: rcu_do_batch+0x415/0x1440 kernel/rcu/tree.c:2466
 #5: ffffffff850e7f00 (rcu_read_lock){....}-{1:2}, at: percpu_ref_put_many.constprop.0+0x0/0x2a0

stack backtrace:
CPU: 1 PID: 232 Comm: syz-executor Not tainted 5.10.0 #1
Hardware name: QEMU Ubuntu 24.04 PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014
Call Trace:
 <IRQ>
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x107/0x163 lib/dump_stack.c:118
 print_usage_bug kernel/locking/lockdep.c:4413 [inline]
 valid_state kernel/locking/lockdep.c:3751 [inline]
 mark_lock_irq kernel/locking/lockdep.c:3954 [inline]
 mark_lock.cold+0x65/0x90 kernel/locking/lockdep.c:4411
 mark_usage kernel/locking/lockdep.c:4306 [inline]
 __lock_acquire+0x11c2/0x5ca0 kernel/locking/lockdep.c:4786
 lock_acquire kernel/locking/lockdep.c:5437 [inline]
 lock_acquire+0x293/0x9b0 kernel/locking/lockdep.c:5402
 __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
 _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
 spin_lock include/linux/spinlock.h:354 [inline]
 io_file_data_ref_zero+0x75/0x450 fs/io_uring.c:7361
 percpu_ref_put_many.constprop.0+0x262/0x2a0 include/linux/percpu-refcount.h:322
 rcu_do_batch+0x496/0x1440 kernel/rcu/tree.c:2476
 rcu_core+0x62d/0x9d0 kernel/rcu/tree.c:2711
 __do_softirq+0x295/0xa3f kernel/softirq.c:298
 asm_call_irq_on_stack+0x12/0x20
 </IRQ>
 __run_on_irqstack arch/x86/include/asm/irq_stack.h:26 [inline]
 run_on_irqstack_cond arch/x86/include/asm/irq_stack.h:77 [inline]
 do_softirq_own_stack+0xaa/0xd0 arch/x86/kernel/irq_64.c:77
 invoke_softirq kernel/softirq.c:393 [inline]
 __irq_exit_rcu+0x1e5/0x220 kernel/softirq.c:423
 irq_exit_rcu+0x5/0x20 kernel/softirq.c:435
 sysvec_apic_timer_interrupt+0x48/0xf0 arch/x86/kernel/apic/apic.c:1091
 asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:631
RIP: 0010:__sanitizer_cov_trace_pc+0x30/0x60 kernel/kcov.c:197
Code: 8b 14 25 40 ef 01 00 65 8b 05 2c e0 bb 7e a9 00 01 ff 00 74 0f f6 c4 01 74 35 8b 82 14 14 00 00 85 c0 74 2b 8b 82 f0 13 00 00 <83> f8 02 75 20 48 8b 8a f8 13 00 00 8b 92 f4 13 00 00 48 8b 01 48
RSP: 0018:ffff888018cd7378 EFLAGS: 00000246
RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffffff81469177
RDX: ffff888008394e00 RSI: ffffffff814691b9 RDI: 0000000000000001
RBP: 0000000000000001 R08: 0000000000000000 R09: ffffffff86e5f6a7
R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000000
R13: 0000000000000000 R14: ffffffff8516fca8 R15: 00000000000000c0
 rcu_read_unlock include/linux/rcupdate.h:691 [inline]
 __is_insn_slot_addr+0x1c9/0x270 kernel/kprobes.c:307
 is_kprobe_optinsn_slot include/linux/kprobes.h:334 [inline]
 kernel_text_address kernel/extable.c:149 [inline]
 kernel_text_address+0xd7/0x120 kernel/extable.c:120
 __kernel_text_address+0x9/0x30 kernel/extable.c:105
 unwind_get_return_address+0x51/0x90 arch/x86/kernel/unwind_orc.c:318
 arch_stack_walk+0x99/0xf0 arch/x86/kernel/stacktrace.c:26
 stack_trace_save+0x8c/0xc0 kernel/stacktrace.c:121
 kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
 kasan_set_track mm/kasan/common.c:56 [inline]
 __kasan_kmalloc.constprop.0+0xc2/0xd0 mm/kasan/common.c:461
 slab_post_alloc_hook mm/slab.h:535 [inline]
 slab_alloc_node mm/slub.c:2891 [inline]
 slab_alloc mm/slub.c:2899 [inline]
 kmem_cache_alloc+0x145/0x330 mm/slub.c:2904
 vm_area_dup+0x78/0x290 kernel/fork.c:356
 dup_mmap kernel/fork.c:532 [inline]
 dup_mm+0x44d/0x1110 kernel/fork.c:1357
 copy_mm kernel/fork.c:1413 [inline]
 copy_process+0x2668/0x69f0 kernel/fork.c:2095
 kernel_clone+0xe7/0xa80 kernel/fork.c:2456
 __do_sys_clone+0xc8/0x110 kernel/fork.c:2573
 do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
 entry_SYSCALL_64_after_hwframe+0x44/0xa9
RIP: 0033:0x7fcfa0962753
Code: 1f 84 00 00 00 00 00 64 48 8b 04 25 10 00 00 00 45 31 c0 31 d2 31 f6 bf 11 00 20 01 4c 8d 90 d0 02 00 00 b8 38 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 35 89 c2 85 c0 75 2c 64 48 8b 04 25 10 00 00
RSP: 002b:00007ffd86b5d9c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000038
RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fcfa0962753
RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000001200011
RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
R10: 0000555556c777d0 R11: 0000000000000246 R12: 0000000000000001
R13: 0000000000009fef R14: 0000000000009fbc R15: 00007ffd86b5db50
----------------
Code disassembly (best guess):
   0:	8b 14 25 40 ef 01 00 	mov    0x1ef40,%edx
   7:	65 8b 05 2c e0 bb 7e 	mov    %gs:0x7ebbe02c(%rip),%eax        # 0x7ebbe03a
   e:	a9 00 01 ff 00       	test   $0xff0100,%eax
  13:	74 0f                	je     0x24
  15:	f6 c4 01             	test   $0x1,%ah
  18:	74 35                	je     0x4f
  1a:	8b 82 14 14 00 00    	mov    0x1414(%rdx),%eax
  20:	85 c0                	test   %eax,%eax
  22:	74 2b                	je     0x4f
  24:	8b 82 f0 13 00 00    	mov    0x13f0(%rdx),%eax
* 2a:	83 f8 02             	cmp    $0x2,%eax <-- trapping instruction
  2d:	75 20                	jne    0x4f
  2f:	48 8b 8a f8 13 00 00 	mov    0x13f8(%rdx),%rcx
  36:	8b 92 f4 13 00 00    	mov    0x13f4(%rdx),%edx
  3c:	48 8b 01             	mov    (%rcx),%rax
  3f:	48                   	rex.W
