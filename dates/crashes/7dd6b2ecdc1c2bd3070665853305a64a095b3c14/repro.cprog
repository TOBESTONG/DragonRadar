// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  const char* reason;
  (void)reason;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  memcpy((void*)0x20000040, "ext4\000", 5);
  memcpy((void*)0x20000140, "./file0\000", 8);
  memcpy((void*)0x200001c0, "noload", 6);
  *(uint8_t*)0x200001c6 = 0x2c;
  memcpy((void*)0x200001c7, "resuid", 6);
  *(uint8_t*)0x200001cd = 0x3d;
  sprintf((char*)0x200001ce, "0x%016llx", (long long)0xee01);
  *(uint8_t*)0x200001e0 = 0x2c;
  memcpy((void*)0x200001e1, "debug_want_extra_isize", 22);
  *(uint8_t*)0x200001f7 = 0x3d;
  sprintf((char*)0x200001f8, "0x%016llx", (long long)0x2a);
  *(uint8_t*)0x2000020a = 0x2c;
  memcpy((void*)0x2000020b, "sb", 2);
  *(uint8_t*)0x2000020d = 0x3d;
  sprintf((char*)0x2000020e, "0x%016llx", (long long)0x16f);
  *(uint8_t*)0x20000220 = 0x2c;
  memcpy((void*)0x20000221, "i_version", 9);
  *(uint8_t*)0x2000022a = 0x2c;
  memcpy((void*)0x2000022b, "quota", 5);
  *(uint8_t*)0x20000230 = 0x2c;
  *(uint8_t*)0x20000231 = 0;
  memcpy(
      (void*)0x20000500,
      "\x78\x9c\xec\xdb\xcf\x4f\x1c\x55\x1c\x00\xf0\xef\xcc\x02\x95\xfe\x10\xac"
      "\xf5\x47\x69\x55\xb4\x1a\x89\x3f\xa0\xd0\xaa\x3d\x78\xd1\x68\xe2\x41\x13"
      "\x13\x3d\xd4\x23\x02\x6d\xb0\xdb\x62\x0a\x26\xb6\x21\x8a\xc6\xd4\xa3\x69"
      "\xe2\xdd\x78\x34\xf1\x2f\xf0\xa4\x17\xa3\x9e\x4c\xbc\xea\xdd\x34\x69\x0c"
      "\x97\x56\x4f\x6b\x66\x77\x06\x96\x65\x97\x02\x5d\x58\xed\x7e\x3e\xc9\xb4"
      "\xef\xcd\xbc\xcd\x7b\xdf\x7d\xf3\x76\xdf\x9b\xc7\x06\xd0\xb5\x86\xb3\x7f"
      "\x92\x88\xfd\x11\xf1\x7b\x44\x0c\xd4\xb2\x6b\x0b\x0c\xd7\xfe\xbb\xb9\xbc"
      "\x38\xf5\xf7\xf2\xe2\x54\x12\x95\xca\x5b\x7f\x25\xd5\x72\x37\x96\x17\xa7"
      "\x8a\xa2\xc5\xeb\xf6\xe5\x99\x91\x34\x22\xfd\x2c\x89\x23\x4d\xea\x9d\xbf"
      "\x74\xf9\xdc\x64\xb9\x3c\x73\x31\xcf\x8f\x2d\x9c\x7f\x7f\x6c\xfe\xd2\xe5"
      "\x67\x67\xcf\x4f\x9e\x9d\x39\x3b\x73\x61\xe2\xd4\xa9\x93\x27\xc6\x5f\x78"
      "\x7e\xe2\xb9\xb6\xc4\x99\xc5\x75\x63\xe8\xa3\xb9\xa3\x87\x5f\x7b\xe7\xea"
      "\x1b\x53\xa7\xaf\xbe\xfb\xf3\xb7\x49\x11\x7f\x43\x1c\x6d\x32\xbc\xd1\xc5"
      "\x27\x2a\x95\x36\x57\xd7\x59\x07\xea\xd2\x49\x4f\x07\x1b\xc2\x96\x94\x22"
      "\x22\xeb\xae\xde\xea\xf8\x1f\x88\x52\xac\x76\xde\x40\xbc\xfa\x69\x47\x1b"
      "\x07\xec\xa8\x4a\xae\xc5\xe5\xa5\x0a\x70\x07\x4b\xa2\xd3\x2d\x00\x3a\xa3"
      "\xf8\xa2\xcf\xd6\xbf\xc5\xb1\x7b\xb3\x8f\xce\xbb\xfe\x52\x6d\x01\x94\xc5"
      "\x7d\x33\x3f\x6a\x57\x7a\x22\xcd\xcb\xf4\x36\xac\x6f\xdb\x69\x38\x22\x4e"
      "\x2f\xfd\xf3\x55\x76\xc4\xce\x3c\x87\x00\x00\x58\xe3\xfb\x6c\xfe\xf3\x4c"
      "\xb3\xf9\x5f\x1a\xf7\xd7\x95\xbb\x3b\xdf\x43\x19\x8c\x88\x7b\x22\xe2\x60"
      "\x44\xdc\x1b\x11\x87\x22\xe2\xbe\x88\x6a\xd9\x07\x22\xe2\xc1\x2d\xd6\xdf"
      "\xb8\x49\xb2\x7e\xfe\x93\x5e\xdb\x56\x60\x9b\x94\xcd\xff\x5e\xcc\xf7\xb6"
      "\xd6\xce\xff\x8a\xd9\x5f\x0c\x96\xf2\xdc\x81\x6a\xfc\xbd\xc9\x99\xd9\xf2"
      "\xcc\xf1\xfc\x3d\x19\x89\xde\x3d\x59\x7e\x7c\x83\x3a\x7e\x78\xe5\xb7\x2f"
      "\x5a\x5d\xab\x9f\xff\x65\x47\x56\x7f\x31\x17\xcc\xdb\x71\xad\x67\xcf\xda"
      "\xd7\x4c\x4f\x2e\x4c\xde\x4e\xcc\xf5\xae\x7f\x12\x31\xd4\xd3\x2c\xfe\x64"
      "\x65\x27\x20\x89\x88\xc3\x11\x31\xb4\xcd\x3a\x66\x9f\xfa\xe6\x68\xab\x6b"
      "\xb7\x8e\x7f\x03\x6d\xd8\x67\xaa\x7c\x1d\xf1\x64\xad\xff\x97\xa2\x21\xfe"
      "\x42\xb2\xf1\xfe\xe4\xd8\x5d\x51\x9e\x39\x3e\x56\xdc\x15\xeb\xfd\xf2\xeb"
      "\x95\x37\x5b\xd5\x7f\x5b\xf1\xb7\x41\xd6\xff\x7b\x9b\xde\xff\x2b\xf1\x0f"
      "\x26\xf5\xfb\xb5\xf3\x5b\xaf\xe3\xca\x1f\x9f\xb7\x5c\xd3\x6c\xf7\xfe\xef"
      "\x4b\xde\xae\xa6\xfb\xf2\x73\x1f\x4e\x2e\x2c\x5c\x1c\x8f\xe8\x4b\x5e\xaf"
      "\x35\xba\xfe\xfc\xc4\xea\x6b\x8b\x7c\x51\x3e\x8b\x7f\xe4\x58\xf3\xf1\x7f"
      "\x30\x56\xdf\x89\x23\x11\x91\xdd\xc4\x0f\x45\xc4\xc3\x11\xf1\x48\xde\xf6"
      "\x47\x23\xe2\xb1\x88\x38\xb6\x41\xfc\x3f\xbd\xfc\xf8\x7b\xdb\x8f\x7f\x67"
      "\x65\xf1\x4f\x6f\xa9\xff\x57\x13\x7d\xd1\x78\xa6\x79\xa2\x74\xee\xc7\xef"
      "\xd6\x54\x3a\xb8\x95\xf8\xb3\xfe\x3f\x59\x4d\x8d\xe4\x67\x36\xf3\xf9\xb7"
      "\x99\x76\x6d\xef\x6e\x06\x00\x00\x80\xff\x9f\x34\x22\xf6\x47\x92\x8e\xae"
      "\xa4\xd3\x74\x74\xb4\xf6\x37\xfc\x87\x62\x6f\x5a\x9e\x9b\x5f\x78\xfa\xcc"
      "\xdc\x07\x17\xa6\x6b\xbf\x11\x18\x8c\xde\xb4\x78\xd2\x35\x50\xf7\x3c\x74"
      "\x3c\x5f\xd6\x17\xf9\x89\x86\xfc\x89\xfc\xb9\xf1\x97\xa5\xfe\x6a\x7e\x74"
      "\x6a\xae\x3c\xdd\xe9\xe0\xa1\xcb\xed\x6b\x31\xfe\x33\x7f\x96\x3a\xdd\x3a"
      "\x60\xc7\xf9\xbd\x16\x74\x2f\xe3\x1f\xba\x97\xf1\x0f\xdd\xcb\xf8\x87\xee"
      "\xd5\x64\xfc\xf7\x77\xa2\x1d\xc0\xee\x6b\xf6\xfd\xff\x71\x07\xda\x01\xec"
      "\xbe\x86\xf1\x6f\xdb\x0f\xba\x88\xf5\x3f\x74\x2f\xe3\x1f\xba\x97\xf1\x0f"
      "\x5d\x69\xbe\x3f\x6e\xfd\x23\x79\x09\x89\x75\x89\x48\xff\x13\xcd\x90\xd8"
      "\xa1\x44\xa7\x3f\x99\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xda"
      "\xe3\xdf\x00\x00\x00\xff\xff\x08\x33\xea\xc4",
      1073);
  syz_mount_image(/*fs=*/0x20000040, /*dir=*/0x20000140,
                  /*flags=MS_NOSUID|MS_NOEXEC|MS_NODEV*/ 0xe,
                  /*opts=*/0x200001c0, /*chdir=*/3, /*size=*/0x431,
                  /*img=*/0x20000500);
  memcpy((void*)0x20000240, "./file0\000", 8);
  syscall(__NR_chdir, /*dir=*/0x20000240ul);
  memcpy((void*)0x20000080, "./file3\000", 8);
  syscall(__NR_creat, /*file=*/0x20000080ul, /*mode=*/0ul);
  memcpy((void*)0x200000c0, "./file3\000", 8);
  memcpy((void*)0x20000100, "./bus\000", 6);
  syscall(__NR_link, /*old=*/0x200000c0ul, /*new=*/0x20000100ul);
  return 0;
}
